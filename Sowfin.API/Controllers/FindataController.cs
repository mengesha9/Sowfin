using AutoMapper;
using Sowfin.API.Notifications;
using Sowfin.API.ViewModels;
using Sowfin.Data.Abstract;
using Sowfin.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using System.Collections.Generic;
using System.Linq;
using System;
using Sowfin.Data.Abstract;
using Sowfin.Model.Entities;
using Sowfin.API.ViewModels.Filing;
using Sowfin.Data;
using Newtonsoft.Json;
using System.Diagnostics;
using System.IO;
using Microsoft.Extensions.Configuration;
using System.Linq.Expressions;
using Sowfin.Data.Common.Enum;
using Sowfin.Data.Common.Helper;
using Sowfin.API.ViewModels.InternalValuation;
using Sowfin.API.ViewModels;

namespace Sowfin.API.Controllers
{
    [Route("api/[controller]")]
    //[Authorize]
    [ApiController]
    public class FindataController : ControllerBase
    {

        IFindataRepository findataRepository;
        IHubContext<NotificationsHub> hubContext;
        IYearsRepository yearsRepository;
        ISynonymRepository synonymRepository;
        IFilingRepository filingRepository;
        IHistriocalTable histriocalTable;
        IIntegratedDatas iIntegratedDatas;
        IIntegratedValues iIntegratedValues;
        IIntegrated_ExplicitValues iIntegrated_ExplicitValues;
        IFilings iFilings;
        IDatas iDatas;
        IForcastRatioDatas iForcastRatioDatas;
        IForcastRatioValues iForcastRatioValues;
        IForcastRatio_ExplicitValues iForcastRatio_ExplicitValues;
        IReorganizedDatas iReorganizedDatas;
        IReorganizedValues iReorganizedValues;
        IReorganized_ExplicitValues iReorganized_ExplicitValues;
        IIVSensitivity iIVSensitivity;
        IIVScenario iIVScenario;
        IROICDatas iROICDatas;
        IROICValues iROICValues;
        IROIC_ExplicitValues iROIC_ExplicitValues;
        IValuationDatas iValuationDatas;
        IAssetsEquityDatas iAssetsEquityDatas;
        IPayoutPolicy_IValuation iPayoutPolicy_IValuation;
        IMixedSubDatas iMixedSubDatas;
        IMixedSubValues iMixedSubValues;
        ITaxRates_IValuation iTaxRates_IValuation;
        ICategoryByInitialSetup iCategoryByInitialSetup;
        private readonly FindataContext _context;
        private readonly IEdgarDataRepository edgarDataRepository;
        private readonly IProcessedDataRepository processedDataRepository;
        IMapper mapper;
        //private readonly IInitialSetup_IValuation iInitialSetup_IValuation = null;
        private readonly ILineItemInfoRepository iLineItemInfoRepository;
        private readonly IInitialSetup_IValuation iInitialSetup_IValuation = (IInitialSetup_IValuation)null;
        private readonly IIntegratedElementMaster iIntegratedElementMaster = (IIntegratedElementMaster)null;
        private readonly IHistoryElementMapping iHistoryElementMapping = (IHistoryElementMapping)null;
        public IConfiguration Configuration { get; }
        private readonly ICostOfCapital_IValuation iCostOfCapital_IValuation = null;
        private readonly IInterest_IValuation iInterest_IValuation = null;
        public FindataController(
            IFindataRepository findataRepository,
            IHubContext<NotificationsHub> hubContext,
            ISynonymRepository synonymRepository,
            IFilingRepository filingRepository,
            IYearsRepository yearsRepository,
            IHistriocalTable histriocalTable,
            IEdgarDataRepository edgarDataRepository,
            IProcessedDataRepository processedDataRepository,
            FindataContext _context,
            IMapper mapper,
            ILineItemInfoRepository iLineItemInfoRepository,
            IConfiguration configuration,
            IInitialSetup_IValuation _iInitialSetup_IValuation,
            IIntegratedElementMaster _iIntegratedElementMaster,
            IMixedSubDatas _iMixedSubDatas,
            IMixedSubValues _iMixedSubValues,
            IHistoryElementMapping _iHistoryElementMapping,
            IIntegratedDatas _integratedDatas,
            IIntegratedValues _iIntegratedValues,
            IFilings _iFilings,
            IDatas _iDatas,
            IForcastRatioDatas _iForcastRatioDatas,
            IForcastRatioValues _iForcastRatioValues,
            IForcastRatio_ExplicitValues _iForcastRatio_ExplicitValues,
            IReorganizedDatas _iReorganizedDatas,
            IReorganizedValues _iReorganizedValues,
            IReorganized_ExplicitValues _iReorganized_ExplicitValues,
            IIVSensitivity _iIVSensitivity,
            IIVScenario _iIVScenario,
            IROICDatas _iROICDatas,
            IValuationDatas _iValuationDatas,
            IROICValues _iROICValues,
            IROIC_ExplicitValues _iROIC_ExplicitValues,
            IAssetsEquityDatas _iAssetsEquityDatas,
            IPayoutPolicy_IValuation _iPayoutPolicy_IValuation,
            IIntegrated_ExplicitValues _iIntegrated_ExplicitValues,
            ITaxRates_IValuation _iTaxRates_IValuation,
            ICostOfCapital_IValuation _iCostOfCapital_IValuation,
            IInterest_IValuation _iInterest_IValuation,
            ICategoryByInitialSetup _iCategoryByInitialSetup
        )
        {
            this.findataRepository = findataRepository;
            this.hubContext = hubContext;
            this.mapper = mapper;
            this.yearsRepository = yearsRepository;
            this.synonymRepository = synonymRepository;
            this.filingRepository = filingRepository;
            this._context = _context;
            this.histriocalTable = histriocalTable;
            this.edgarDataRepository = edgarDataRepository;
            this.processedDataRepository = processedDataRepository;
            this.iLineItemInfoRepository = iLineItemInfoRepository;
            iInitialSetup_IValuation = _iInitialSetup_IValuation;
            Configuration = configuration;
            iIntegratedElementMaster = _iIntegratedElementMaster;
            iMixedSubDatas = _iMixedSubDatas;
            iMixedSubValues = _iMixedSubValues;
            iHistoryElementMapping = _iHistoryElementMapping;
            iIntegratedDatas = _integratedDatas;
            iFilings = _iFilings;
            iDatas = _iDatas;
            iForcastRatioDatas = _iForcastRatioDatas;
            iForcastRatioValues = _iForcastRatioValues;
            iForcastRatio_ExplicitValues = _iForcastRatio_ExplicitValues;
            iReorganizedDatas = _iReorganizedDatas;
            iReorganizedValues = _iReorganizedValues;
            iReorganized_ExplicitValues = _iReorganized_ExplicitValues;
            iIVSensitivity = _iIVSensitivity;
            iIVScenario = _iIVScenario;
            iROICDatas = _iROICDatas;
            iValuationDatas = _iValuationDatas;
            iROICValues = _iROICValues;
            iROIC_ExplicitValues = _iROIC_ExplicitValues;
            iAssetsEquityDatas = _iAssetsEquityDatas;
            iPayoutPolicy_IValuation = _iPayoutPolicy_IValuation;
            iIntegratedValues = _iIntegratedValues;
            iIntegrated_ExplicitValues = _iIntegrated_ExplicitValues;
            iTaxRates_IValuation = _iTaxRates_IValuation;
            iCostOfCapital_IValuation = _iCostOfCapital_IValuation;
            iInterest_IValuation = _iInterest_IValuation;
            iCategoryByInitialSetup = _iCategoryByInitialSetup;
        }

        [HttpGet()]
        public ActionResult GetAllFindata()
        {
            IEnumerable<Findata> filings = findataRepository.AllIncluding();

            var data = filings
                .Select(mapper.Map<FindataViewModel>)
                .ToList();

            return Ok(data);
        }

        [HttpGet("{cik}")]
        public ActionResult GetFindata(string cik)
        {
            IEnumerable<Findata> filings = findataRepository.AllIncluding();

            var yrs = filings
                .Select(o => o.FilingDate)
                .Distinct()
                .ToArray();

            Array.Sort(yrs);
            Array.Reverse(yrs);

            var xbrlTags = filings
                .Select(o => (o.LineItem, o.ParentItem, o.StatementType))
                .Distinct()
                .ToArray();

            var tbl = new List<FinRow>();

            foreach (var tag in xbrlTags)
            {
                var f = filings
                    .Select(mapper.Map<FinCell>)
                    .Where(o => o.LineItem == tag.LineItem)
                    .Where(o => yrs.Contains(o.FilingDate))
                    .GroupBy(o => o.FilingDate)
                    .ToList();

                var finRow = new FinRow
                {
                    LineItem = tag.LineItem,
                    //FinCells =
                };

                tbl.Add(finRow);
            }

            return Ok(tbl);
        }

        [HttpPost]
        [Route("updateTempFiling")]
        public ActionResult UpdateTempfiling([FromBody] List<TempFiling> tempFiling)
        {
            var temfilings = findataRepository.FindBy(t => tempFiling.Select(m => m.Id).Contains(t.Id));
            var temList = temfilings.ToList();
            for (int i = 0; i < temList.Count(); i++)
            {
                temList[i].Category = tempFiling[i].Category;
                temList[i].FinField = tempFiling[i].LineItem;
            }
            findataRepository.UpdatedMany(temList);

            return Ok();
        }

        [HttpGet]
        [Route("processeddata")]
        public ActionResult ProcessedData()
        {
            var processedData = processedDataRepository.GetProcessedData().GroupBy(s => new { s.StatementType });
            var parentItem = filingRepository.FindBy(s => s.StatementType == "BALANCE_SHEET").Select(s => s.ParentItem).Distinct();
            return Ok(new { processedData, parentItem });
        }


        [HttpPost]
        [Route("historicaldata")]
        public ActionResult SaveHistoricalData([FromBody] List<HistoricalTableView> historicalTableList)
        {
            List<HistoricalTable> histTable = new List<HistoricalTable>();
            foreach (var data in historicalTableList)
            {
                var val = histriocalTable.GetSingle(s => s.StatementType == data.StatementType
                && s.LineItem == data.LineItem && s.FinField == data.FinField && s.Values == data.Values);
                if (val != null)
                {
                    val.Category = data.Category;
                    histriocalTable.Update(val);
                    histriocalTable.Commit();
                    histTable.Add(val);
                }
            }
            if (histTable.Count == 0)
            {
                SaveData(historicalTableList);
            }

            return Ok(new { Message = "Saved sucessfully" });
        }

        private void SaveData(List<HistoricalTableView> historicalTableList)
        {
            List<HistoricalTable> historicalTables = new List<HistoricalTable>();
            foreach (var data in historicalTableList)
            {
                HistoricalTable historicalTable = new HistoricalTable
                {
                    FinField = data.FinField,
                    Category = data.Category,
                    StatementType = data.StatementType,
                    LineItem = data.LineItem,
                    Values = data.Values,
                    Sequence = data.Sequence,
                    Cik = data.Cik,
                    IsParent = data.IsParent,
                    Years = data.Years,
                    ParentItem = data.ParentItem
                };
                historicalTables.Add(historicalTable);
            }

            histriocalTable.AddMany(historicalTables);
        }

        [HttpGet]
        [Route("historicaldata")]
        public ActionResult GetHistoricalData()
        {
            var histData = histriocalTable.AllIncluding().OrderBy(m => m.Sequence).GroupBy(s => s.StatementType);
            return Ok(histData);
        }

        [HttpPost]
        [Route("savefindata")]
        public ActionResult PostFinData([FromBody]List<FindataViewModel> finData)
        {
            if (!ModelState.IsValid) return BadRequest(new
            { messgae = "Invalid entry" });

            List<Findata> listFinData = new List<Findata>();

            foreach (var data in finData)
            {
                Findata finDataSave = new Findata
                {
                    FilingDate = data.filingDate,
                    Cik = data.cik,
                    LineItem = data.lineItem,
                    ParentItem = data.parentItem,
                    Value = data.value,
                    StatementType = data.statementType,
                    Category = data.category,
                    OtherTags = data.otherTags,
                    Sequence = Format(data.sequence),
                    Company = data.company,
                    FinField = data.finField

                };
                listFinData.Add(finDataSave);
            }
            findataRepository.AddMany(listFinData);
            return Ok();
        }

        static int Format(string str)
        {
            int val = 0;
            if (str == null || str == "")
            {
                val = 0;
            }
            else
            {
                val = Int32.Parse(str);
            }

            return val;
        }


        [HttpGet]
        [Route("edgarcat/{cik}/{startYear?}/{endYear?}")]
        public ActionResult EdgarViewByCategory(string cik, int? startYear = null, int? endYear = null)
        {
            RenderResult ed = new RenderResult();
            List<FilingsArray> lst = new List<FilingsArray>();

            var edgarData = edgarDataRepository.GetEdgarByCategory(cik, startYear, endYear).FirstOrDefault().EdgarViewByCategory;

            if (edgarData == null)
            {
                ed.StatusCode = 0;
                ed.Result = lst;
            }
            else
            {
                List<List<Filings>> jsonArr = JsonConvert.DeserializeObject<List<List<Filings>>>(edgarData);

                foreach (var json in jsonArr)
                {
                    var fa = new FilingsArray
                    {
                        CompanyName = json[0].CompanyName,
                        StatementType = json[0].StatementType,
                        Filings = json[0]
                    };

                    lst.Add(fa);
                }

                ed.StatusCode = 1;
                ed.Result = lst;
            }

            return Ok(ed);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="cik"></param>
        /// <param name="startYear"></param>
        /// <param name="endYear"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("edgarperc/{cik}/{startYear?}/{endYear?}")]
        public ActionResult EdgarPercentageView(string cik, int? startYear = null, int? endYear = null)
        {
            RenderResult ed = new RenderResult();
            List<FilingsArray> lst = new List<FilingsArray>();

            var edgarData = edgarDataRepository.GetEdgar(cik, startYear, endYear).FirstOrDefault().EdgarView;

            if (edgarData == null)
            {
                ed.StatusCode = 0;
                ed.Result = lst;
            }
            else
            {
                List<List<Filings>> jsonArr = JsonConvert.DeserializeObject<List<List<Filings>>>(edgarData);

                foreach (var json in jsonArr)
                {
                    var filings = json[0];
                    foreach (var d in filings.Datas)
                    {
                        List<Values> vList = new List<Values>();
                        Double prevVal = 0;

                        for (var i = 0; i < d.Values.Count; i++)
                        {
                            var v = d.Values[i];
                            var curVal = Convert.ToDouble(v.Value);

                            if (prevVal != 0)
                            {
                                var perc = Math.Round(((curVal - prevVal) / prevVal) * 100, 2);
                                d.Values[i].Value = perc.ToString() + "%";
                            }
                            else
                            {
                                d.Values[i].Value = "";
                            }
                            prevVal = curVal;
                        }
                    }

                    var fa = new FilingsArray
                    {
                        CompanyName = json[0].CompanyName,
                        StatementType = json[0].StatementType,
                        Filings = json[0]
                    };

                    lst.Add(fa);
                }

                ed.StatusCode = 1;
                ed.Result = lst;
            }

            return Ok(ed);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cik"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("edgar/{cik}/data/{forcedownload?}")]
        public ActionResult FetchEdgarData(string cik, bool?  forcedownload = false)
        {
            try
            {
                var cmd = Configuration.GetValue<string>("DE.Cmd");
                if (forcedownload == true)
                {
                    cmd += " -f -c";
                }
                else
                {
                    cmd += " -c";
                }
                var str = RunCmd(cmd, cik);
                return Ok(str);
            }
            catch (Exception ss)
            {
                return BadRequest(Convert.ToString(ss.Message));
            }
        }

        private String RunCmd(string cmd, string args)
        {
            var file = Configuration.GetValue<string>("DE.PythonPath");
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = file;
            start.Arguments = string.Format("{0} {1}", cmd, args);
            start.UseShellExecute = false;
            start.RedirectStandardOutput = true;
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    //string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd();
                    return result;
                }
            }
        }



        [HttpGet]
        [Route("TestPython")]
        public ActionResult TestPython()
        {
            try
            {
                var notePadPath =Configuration.GetValue<string>("NotePadPath");

                Process.Start(notePadPath);
                var cmd = Configuration.GetValue<string>("DE.HelloCmd");
                Console.WriteLine(cmd);
                var str = Python_run_cmd(cmd, "");
                str = str + " CMD :" + cmd;
                return Ok(str);
            }
            catch (Exception ss)
            {
                return BadRequest(Convert.ToString(ss.Message));
            }
        }

        private string Python_run_cmd(string cmd, string args)
        {
            var file = Configuration.GetValue<string>("DE.PythonPath");
            ProcessStartInfo start = new ProcessStartInfo();
            //start.FileName = "D:/python.exe";
            start.FileName = file;
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    result = result + " file:" + file;
                    return result;
                }
            }
        }


        #region Raw Historical 

        // Raw Historical get api
        [HttpGet]
        [Route("edgar/{cik}/{startYear?}/{endYear?}/{UserId}")]
        public ActionResult EdgarView(string cik, int? startYear = null, int? endYear = null, long? UserId = null)
        {
            RenderResult ed = new RenderResult();

            List<FilingsArray> lst = new List<FilingsArray>();

            try
            {
                var edgarData = edgarDataRepository.GetEdgar(cik, startYear, endYear).FirstOrDefault().EdgarView;

                if (edgarData == null)
                {
                    ed.StatusCode = 0;
                    ed.Result = lst;
                }
                else
                {
                    List<List<Filings>> jsonArr = JsonConvert.DeserializeObject<List<List<Filings>>>(edgarData);

                    foreach (var json in jsonArr)
                    {
                        try
                        {


                            var fa = new FilingsArray
                            {
                                CompanyName = json[0].CompanyName,
                                StatementType = json[0].StatementType,
                                Filings = json[0]
                            };

                            // test
                            // var test = json[0].Datas();
                            int MaxLength = 0;
                            List<Values> arrlist = new List<Values>();
                            List<Values> MaxValue = new List<Values>();
                            Values Val = new Values();
                            var Removedataslist = json[0].Datas.FindAll(x => (x.Values == null || x.Values.Count == 0) && x.IsParentItem !=true);
                            if (Removedataslist != null)
                            {
                                foreach (var dt in Removedataslist)
                                {
                                    json[0].Datas.Remove(dt);
                                }
                            }
                            foreach (var obj in json[0].Datas)
                            {
                                if (obj.Values != null && MaxLength < obj.Values.Count)
                                {
                                    MaxLength = obj.Values.Count;
                                    MaxValue = obj.Values;
                                }

                            }

                            if (json[0].StatementType == "INCOME")
                            {
                                string maxDate = MaxValue[MaxLength - 1].FilingDate;
                                if (maxDate != null && maxDate != "" && Convert.ToInt32(Convert.ToDateTime(maxDate).Year) < endYear)
                                {
                                    InitialSetup_IValuation initialSetupdata = iInitialSetup_IValuation.GetSingle(x => x.UserId == UserId && x.IsActive == true);
                                    if(initialSetupdata!=null)
                                    {
                                        initialSetupdata.YearTo = Convert.ToInt32(Convert.ToDateTime(maxDate).Year);
                                        iInitialSetup_IValuation.Update(initialSetupdata);
                                        iInitialSetup_IValuation.Commit();
                                        ed.ShowMsg = 1;
                                    }
                                }
                            }

                            int length = 0;
                            foreach (var obj1 in fa.Filings.Datas)
                            {

                                if (obj1.Values != null)
                                {
                                    length = obj1.Values.Count;
                                    if (length != MaxLength)
                                    {
                                        int k = 0;
                                        foreach (var item in MaxValue)
                                        {
                                            Val = new Values();
                                            Val.CElementName = null;
                                            Val.CLineItem = null;
                                            Val.Value = null;
                                            var Valueobj = obj1.Values.FirstOrDefault(x => Convert.ToDateTime(x.FilingDate) == Convert.ToDateTime(item.FilingDate));
                                            if (Valueobj == null)
                                            {
                                                Val.FilingDate = item.FilingDate;
                                                obj1.Values.Insert(k, Val);
                                            }
                                            ++k;
                                        }
                                    }
                                }
                                else
                                {
                                    arrlist = new List<Values>();
                                    obj1.Values = arrlist;
                                    foreach (var item1 in MaxValue)
                                    {
                                        Val = new Values();
                                        Val.CElementName = null;
                                        Val.CLineItem = null;
                                        Val.Value = null;
                                        Val.FilingDate = item1.FilingDate;
                                        obj1.Values.Add(Val);
                                    }
                                }

                            }
                            ///////////////////////////////////////
                            lst.Add(fa);
                        }
                        catch (Exception ss)
                        {

                        }
                    }

                    // 


                    ed.StatusCode = 1;
                    ed.Result = lst;
                }

                return Ok(ed);
            }
            catch (Exception ss)
            {
                return BadRequest(Convert.ToString(ss.Message));
            }
        }


        #endregion

        #region DataProcessing

        [HttpGet]
        [Route("EdgarViewDataProcessing/{UserId}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult EdgarViewDataProcessing(long UserId, string cik, int? startYear = null, int? endYear = null)
        {
            RenderResult renderResult = new RenderResult();
            List<FilingsArray> filingsArrayList = new List<FilingsArray>();
            try
            {


                ////Update InitialSetupID into Filings///
                long? InitialSetupID = null;
                List<CategoryByInitialSetup> categoryList = new List<CategoryByInitialSetup>();
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                if (InitialSetup_IValuationObj != null)
                {
                    InitialSetupID = InitialSetup_IValuationObj.Id;
                    categoryList = iCategoryByInitialSetup.FindBy(x => x.InitialSetupId == InitialSetupID).ToList();
                }
                if (InitialSetupID != null && InitialSetupID != 0)
                {
                    List<FilingsTable> FilingsListInitialSetup = new List<FilingsTable>();
                    FilingsListInitialSetup = iFilings.FindBy(x => x.CIK == cik).ToList();
                    if (FilingsListInitialSetup != null && FilingsListInitialSetup.Count > 0)
                    {
                        foreach (FilingsTable Ft in FilingsListInitialSetup)
                        {
                            Ft.InitialSetupId = InitialSetupID;
                        }
                        iFilings.UpdatedMany(FilingsListInitialSetup);
                        iFilings.Commit();
                    }

                }
                string edgarView = this.edgarDataRepository.GetEdgar(cik, startYear, endYear).FirstOrDefault<EdgarData>().EdgarView;
                if (edgarView == null)
                {
                    renderResult.StatusCode = 0;
                    renderResult.Result = filingsArrayList;
                    renderResult.InitialSetupId = InitialSetupID;
                }
                else
                {
                    foreach (List<Filings> filingsList in (List<List<Filings>>)JsonConvert.DeserializeObject<List<List<Filings>>>(edgarView))
                    {
                        FilingsArray filingsArray = new FilingsArray()
                        {
                            CompanyName = filingsList[0].CompanyName,
                            StatementType = filingsList[0].StatementType,
                            Filings = filingsList[0]
                        };

                        ////Remove All Null values
                        var Removedataslist = filingsList[0].Datas.FindAll(x => (x.Values == null || x.Values.Count == 0) && x.IsParentItem != true);
                        if (Removedataslist != null)
                        {
                            foreach (var dt in Removedataslist)
                            {
                                filingsList[0].Datas.Remove(dt);
                            }
                        }
                        ////////////////////////////////

                        int num = 0;
                        List<Values> valuesList1 = new List<Values>();
                        List<Values> valuesList2 = new List<Values>();
                        Values values1 = new Values();
                        foreach (Datas data in filingsList[0].Datas)
                        {
                            //  categoryList
                            if (categoryList != null && categoryList.Count > 0)
                            {
                                var assigncategory = categoryList.Find(x => x.DatasId == data.DataId);
                                if (assigncategory != null)
                                {
                                    data.Category = assigncategory.Category != null ? assigncategory.Category : data.Category;
                                }
                            }
                            if (data.Values != null && num < data.Values.Count)
                            {
                                num = data.Values.Count;
                                valuesList2 = data.Values;
                            }
                        }
                        List<MixedSubDatas> mixedSubDatasList = iMixedSubDatas.FindBy(x => x.InitialSetupId == InitialSetupID).ToList();
                        List<MixedSubValues> mixedSubValuesList = iMixedSubValues.FindBy(t => mixedSubDatasList.Any(m => m.Id == t.MixedSubDatasId)).ToList();
                        foreach (Datas data in filingsArray.Filings.Datas)
                        {

                            if (data.IsTally == true)
                            {
                                data.Category = "General";
                            }
                            Datas obj1 = data;
                            if (obj1.Values != null)
                            {
                                if (obj1.Values.Count != num)
                                {
                                    int index = 0;
                                    foreach (Values values2 in valuesList2)
                                    {
                                        Values item = values2;
                                        Values values3 = new Values();
                                        values3.CElementName = (string)null;
                                        values3.CLineItem = (string)null;
                                        values3.Value = (string)null;
                                        if (obj1.Values.FirstOrDefault(x => Convert.ToDateTime(x.FilingDate) == Convert.ToDateTime(item.FilingDate)) == null)
                                        {
                                            values3.FilingDate = item.FilingDate;
                                            obj1.Values.Insert(index, values3);
                                        }
                                        ++index;
                                    }
                                }
                            }
                            else
                            {
                                List<Values> valuesList3 = new List<Values>();
                                obj1.Values = valuesList3;
                                foreach (Values values2 in valuesList2)
                                    obj1.Values.Add(new Values()
                                    {
                                        CElementName = (string)null,
                                        CLineItem = (string)null,
                                        Value = (string)null,
                                        FilingDate = values2.FilingDate
                                    });
                            }

                            if (mixedSubDatasList != null && mixedSubDatasList.Count > 0)
                            {
                                List<MixedSubDatas> MixedSubDatas = InitialSetupID != null ? mixedSubDatasList.FindAll(x => x.DatasId == obj1.DataId && x.InitialSetupId == InitialSetupID).ToList() : null;
                                obj1.MixedSubDatas = MixedSubDatas;
                                if (InitialSetupID != null)
                                    foreach (MixedSubDatas mixedSubData in obj1.MixedSubDatas)
                                    {
                                        MixedSubDatas item = mixedSubData;
                                        List<MixedSubValues> mixedValuesbyDataId = mixedSubValuesList.FindAll(x => x.MixedSubDatasId == item.Id).OrderBy(x => x.FilingDate).ToList();
                                        item.MixedSubValues = mixedValuesbyDataId;
                                    }
                            }
                        }
                        filingsArrayList.Add(filingsArray);
                    }
                    renderResult.StatusCode = 1;
                    renderResult.InitialSetupId = InitialSetupID;
                    renderResult.categoryList = categoryList;
                    renderResult.Result = filingsArrayList;
                }
                return Ok(renderResult);
            }
            catch (Exception ex)
            {
                return (ActionResult)this.BadRequest((object)Convert.ToString(ex.Message));
            }
        }


        [HttpPost]
        [Route("assigncategory/{InitialSetupId}")]
        public ActionResult AssignCategory([FromBody] List<LineItemInfoViewModel> lineItemInfoViewModel, long? InitialSetupId)
        {
            try
            {
                /////Update SEQUENCE in Filing Table
                var initialSetup = iInitialSetup_IValuation.GetSingle(x => x.Id == InitialSetupId);
                List<FilingsTable> FilingsListSequence = new List<FilingsTable>();
                if (initialSetup != null && !string.IsNullOrEmpty(initialSetup.CIKNumber))
                {
                    FilingsListSequence = iFilings.FindBy(x => x.CIK == initialSetup.CIKNumber).ToList();

                    if (FilingsListSequence != null && FilingsListSequence.Count > 0)
                    {
                        foreach (FilingsTable Ft in FilingsListSequence)
                        {
                            if (Ft.StatementType == "INCOME")
                            {
                                Ft.Sequence = 1;
                            }
                            else if (Ft.StatementType == "BALANCE_SHEET")
                            {
                                Ft.Sequence = 2;
                            }
                            else if (Ft.StatementType == "CASH_FLOW")
                            {
                                Ft.Sequence = 3;
                            }
                            iFilings.Update(Ft);
                            iFilings.Commit();
                        }

                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    //   var temfilings = iLineItemInfoRepository.FindBy(t => lineItemInfoViewModel.Select(m => m.Id).Contains(t.Id));
                    // var temList = temfilings.ToList();
                    List<CategoryByInitialSetup> categoryList = new List<CategoryByInitialSetup>();
                    CategoryByInitialSetup category;
                    //InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == 8 && x.IsActive == true).OrderByDescending(x => x.Id).First();
                    try
                    {
                        foreach (LineItemInfoViewModel Datas in lineItemInfoViewModel)
                        {
                            category = new CategoryByInitialSetup();
                            category.DatasId = Datas.Id;
                            category.Category = Datas.Category;
                            category.InitialSetupId = initialSetup != null ? initialSetup.Id : 0;
                            categoryList.Add(category);

                            // check if id exist or not in SubDatasTable
                            List<MixedSubDatas> SubdatasList = iMixedSubDatas.FindBy(x => x.DatasId == Datas.Id && x.InitialSetupId == InitialSetupId).ToList();
                            if (SubdatasList != null && SubdatasList.Count > 0)
                            {
                                //delete all items of same DataId from MixedSubDatas and MixedSubvalues
                                foreach (MixedSubDatas subdataObj in SubdatasList)
                                {
                                    var mixedSubValues = iMixedSubValues.FindBy(x => x.MixedSubDatasId == subdataObj.Id).ToList();
                                    if (mixedSubValues != null && mixedSubValues.Count > 0)
                                    {
                                        // delete subValues                                        
                                        iMixedSubValues.DeleteMany(mixedSubValues);
                                    }
                                    iMixedSubValues.Commit();
                                }
                                //delete subdatas                               
                                iMixedSubDatas.DeleteMany(SubdatasList);
                                iMixedSubDatas.Commit();

                            }

                            //save to mixed SubDatas and MixedSubValues
                            if (Datas.MixedSubDatas != null && Datas.MixedSubDatas.Count > 0)
                            {
                                foreach (var mixedSubDataobj in Datas.MixedSubDatas)
                                {
                                    mixedSubDataobj.Id = 0;
                                    mixedSubDataobj.InitialSetupId = InitialSetupId;
                                    if (mixedSubDataobj.MixedSubValues != null && mixedSubDataobj.MixedSubValues.Count > 0)
                                        foreach (var values in mixedSubDataobj.MixedSubValues)
                                        {
                                            values.Id = 0;
                                        }
                                    iMixedSubDatas.Add(mixedSubDataobj);
                                    iMixedSubDatas.Commit();
                                }
                            }


                        }


                        //    for (int i = 0; i < lineItemInfoViewModel.Count(); i++)
                        //{
                        //    category = new CategoryByInitialSetup();
                        //   // temList[i].Category = lineItemInfoViewModel[i].Category;
                        //    // add or update data on category
                        //    category.DatasId = lineItemInfoViewModel[i].Id;
                        //    category.Category = lineItemInfoViewModel[i].Category;
                        //    category.InitialSetupId = initialSetup != null ? initialSetup.Id : 0;
                        //    categoryList.Add(category);

                        //    // check if id exist or not in SubDatasTable
                        //    List<MixedSubDatas> SubdatasList = iMixedSubDatas.FindBy(x => x.DatasId == lineItemInfoViewModel[i].Id && x.InitialSetupId == InitialSetupId).ToList();
                        //    if (SubdatasList != null && SubdatasList.Count > 0)
                        //    {
                        //        //delete all items of same DataId from MixedSubDatas and MixedSubvalues
                        //        foreach (MixedSubDatas subdataObj in SubdatasList)
                        //        {
                        //            var mixedSubValues = iMixedSubValues.FindBy(x => x.MixedSubDatasId == subdataObj.Id).ToList();
                        //            if (mixedSubValues != null && mixedSubValues.Count > 0)
                        //            {
                        //                // delete subValues
                        //                //iMixedSubValues.DeleteWhere(x => x.MixedSubDatasId == subdataObj.Id);
                        //                iMixedSubValues.DeleteMany(mixedSubValues);
                        //            }
                        //            iMixedSubValues.Commit();
                        //        }
                        //        //delete subdatas
                        //        //iMixedSubDatas.DeleteWhere(x => x.DatasId == temList[i].Id );
                        //        iMixedSubDatas.DeleteMany(SubdatasList);
                        //        iMixedSubDatas.Commit();

                        //    }
                        //    // add item
                        //    //if (lineItemInfoViewModel[i].MixedSubDatas != null && lineItemInfoViewModel[i].MixedSubDatas.Count > 0)
                        //    //{
                        //    foreach (var item in lineItemInfoViewModel)
                        //    {
                        //        List<MixedSubDatas> mixedSubDatasList = item.MixedSubDatas != null && item.MixedSubDatas.Count > 0 ? item.MixedSubDatas.FindAll(x => x.DatasId == category.DatasId).ToList() : null;
                        //        if (mixedSubDatasList != null && mixedSubDatasList.Count > 0)
                        //        {
                        //            foreach (var mixedSubDataobj in mixedSubDatasList)
                        //            {
                        //                mixedSubDataobj.Id = 0;
                        //                mixedSubDataobj.InitialSetupId = InitialSetupId;
                        //                if (mixedSubDataobj.MixedSubValues != null && mixedSubDataobj.MixedSubValues.Count > 0)
                        //                    foreach (var values in mixedSubDataobj.MixedSubValues)
                        //                    {
                        //                        values.Id = 0;
                        //                    }
                        //                iMixedSubDatas.Add(mixedSubDataobj);
                        //                iMixedSubDatas.Commit();
                        //            }
                        //            break;

                        //        }

                        //    }

                        // }
                        //}
                    }
                    catch (Exception ss)
                    {
                        return Ok("issue in save Mixed sub datas");
                    }

                    try
                    {
                        // save category
                        var tempCategory = initialSetup != null ? iCategoryByInitialSetup.FindBy(x => categoryList.Any(m => m.DatasId == x.DatasId) && x.InitialSetupId == initialSetup.Id).ToList() : null;
                        if (tempCategory != null && tempCategory.Count > 0)
                        {
                            iCategoryByInitialSetup.DeleteMany(tempCategory);
                        }
                        iCategoryByInitialSetup.AddMany(categoryList);
                        iCategoryByInitialSetup.Commit();
                        // iLineItemInfoRepository.UpdatedMany(temList);
                    }
                    catch (Exception ss)
                    {
                        return Ok("issue in save category by Initial Setup" + InitialSetupId);
                    }
                    return Ok("Updated succesfully");
                }
                else
                    return Ok("Initial Setup not exist for" + InitialSetupId);

            }
            catch (Exception ss) { return Ok("Error occured"); }
        }

        #endregion

        #region Integrated Financial Statement     

        //GET
        [HttpGet]
        [Route("GetIntegratedFinancialStatementData/{UserId}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult GetIntegratedFinancialStatementData(long UserId, string cik, int? startYear = null, int? endYear = null)
        {
            IntegratedResult integratedResult = new IntegratedResult();
            bool DepreciationFlag = false;
            string AdjustedMessage = "Depreciation";
            try
            {
                List<IntegratedFilingsViewModel> integratedFilingsList = new List<IntegratedFilingsViewModel>();
                List<IntegratedDatasViewModel> IntegratedDatasList = new List<IntegratedDatasViewModel>();
                IntegratedFilingsViewModel integratedFiling = new IntegratedFilingsViewModel();
                List<IntegratedDatas> tempintegratedDatasListObj = new List<IntegratedDatas>();
                IntegratedDatasViewModel integratedDatasVm = new IntegratedDatasViewModel();

                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();

                //check in the database if exist then get by DB else go with the flow
                List<IntegratedDatas> tblintegrateddatasListObj = InitialSetup_IValuationObj != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;

                if (tblintegrateddatasListObj != null && tblintegrateddatasListObj.Count > 0)
                {

                    //get all Historical Values
                    List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatasListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                    //get all Explicit Values 
                    List<Integrated_ExplicitValues> Integrated_explicitValuesAfterListObj = iIntegrated_ExplicitValues.FindBy(x => tblintegrateddatasListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                    List<FilingsTable> filingsList = new List<FilingsTable>();
                    filingsList = iFilings.FindBy(x => x.CIK == cik).OrderBy(x => x.Sequence).ToList();
                    //  filingsList = iFilings.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList();


                    //check depreciation Deducted

                    Datas Depreciation_datas = new Datas();
                    foreach (FilingsTable filingsTable in filingsList)
                    {
                        if (filingsTable.StatementType == "INCOME")
                        {

                            var incomeDepreciation_datas = iDatas.GetSingle(x => x.FilingId == filingsTable.Id && x.LineItem.Contains("Depreciation"));
                            if (incomeDepreciation_datas != null)
                                break;
                        }
                        else
                        if (filingsTable.StatementType == "CASH_FLOW")
                        {
                            var Depreciation = iDatas.GetSingle(x => x.FilingId == filingsTable.Id && x.LineItem.Contains("Depreciation"));
                            if (Depreciation != null)
                            {
                                DepreciationFlag = true;
                                // AdjustedMessage=  Depreciation.LineItem ;
                            }
                        }
                    }
                    foreach (var filing in filingsList)
                    {
                        IntegratedDatasList = new List<IntegratedDatasViewModel>();
                        tempintegratedDatasListObj = new List<IntegratedDatas>();

                        integratedFiling = new IntegratedFilingsViewModel();
                        integratedFiling.CompanyName = filing.CompanyName;
                        integratedFiling.ReportName = filing.ReportName;
                        integratedFiling.StatementType = filing.StatementType;
                        integratedFiling.Unit = filing.Unit;
                        integratedFiling.CIK = filing.CIK;
                        if (filing.StatementType == "INCOME")
                        {
                            // add Income items to datas here
                            tempintegratedDatasListObj = tblintegrateddatasListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement).ToList();
                        }
                        else if (filing.StatementType == "BALANCE_SHEET")
                        {
                            // add Balance items to datas here
                            tempintegratedDatasListObj = tblintegrateddatasListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet).ToList();
                        }
                        else
                        {
                            //Retained Earnings
                            integratedFiling.ReportName = "STATEMENT OF RETAINED EARNINGS";
                            integratedFiling.StatementType = "STATEMENT OF RETAINED EARNINGS";
                            tempintegratedDatasListObj = tblintegrateddatasListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.RetainedEarningsStatement).ToList();
                        }
                        if (tempintegratedDatasListObj != null && tempintegratedDatasListObj.Count > 0)
                        {
                            foreach (IntegratedDatas Incomeobj in tempintegratedDatasListObj)
                            {
                                integratedDatasVm = new IntegratedDatasViewModel();

                                integratedDatasVm = mapper.Map<IntegratedDatas, IntegratedDatasViewModel>(Incomeobj);

                                // for Historical Values
                                List<IntegratedValues> tempForcastValueList = IntegratedValuesListObj.FindAll(x => x.IntegratedDatasId == Incomeobj.Id).ToList();
                                //Incomeobj.ForcastRatioValues = tempForcastValueList;
                                integratedDatasVm.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                foreach (var obj in tempForcastValueList)
                                {
                                    IntegratedValuesViewModel tempValues = mapper.Map<IntegratedValues, IntegratedValuesViewModel>(obj);
                                    integratedDatasVm.IntegratedValuesVM.Add(tempValues);
                                }
                                // for Explicit Values
                                List<Integrated_ExplicitValues> tempForcast_ExplicitValueList = Integrated_explicitValuesAfterListObj.FindAll(x => x.IntegratedDatasId == Incomeobj.Id).ToList();
                                integratedDatasVm.Integrated_ExplicitValuesVM = new List<Integrated_ExplicitValuesViewModel>();
                                foreach (var obj in tempForcast_ExplicitValueList)
                                {
                                    Integrated_ExplicitValuesViewModel tempExplicitValues = mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(obj);
                                    integratedDatasVm.Integrated_ExplicitValuesVM.Add(tempExplicitValues);
                                }
                                IntegratedDatasList.Add(integratedDatasVm);
                            }
                            //IntegratedDatasList.Add();
                            integratedFiling.IntegratedDatasVM = IntegratedDatasList;
                            integratedFilingsList.Add(integratedFiling);
                        }
                    }
                }

                integratedResult.Result = integratedFilingsList;
                integratedResult.DepreciationFlag = DepreciationFlag;
                integratedResult.AdjustedMessage = AdjustedMessage;
                integratedResult.StatusCode = 1;
                return Ok(integratedResult);
            }
            catch (Exception ss)
            {
                integratedResult.StatusCode = 0;
                integratedResult.AdjustedMessage = AdjustedMessage;
                integratedResult.DepreciationFlag = DepreciationFlag;
                integratedResult.Message = Convert.ToString(ss.Message);
                return BadRequest(integratedResult);
            }

        }

        //SAVE
        [HttpGet]
        [Route("GetIntegratedFinancialHistoricalData/{UserId}/{InitialsetupId}/{StatementType}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult GetIntegratedFinancialHistoricalData(long UserId, long? InitialsetupId, string StatementType, string cik, int? startYear = null, int? endYear = null)
        {
            RenderResult renderResult = new RenderResult();
            List<FilingsArray> filingsArrayList = new List<FilingsArray>();
            try
            {
                long? InitialSetupId = null;
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.Id == InitialsetupId).OrderByDescending(x => x.Id).First();
                //InitialSetup_IValuation InitialSetup_IValuationbj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                if (InitialSetup_IValuationObj != null)
                {
                    InitialSetupId = InitialSetup_IValuationObj.Id;
                }

                List<IntegratedDatas> integratedDatasobj = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (integratedDatasobj != null && integratedDatasobj.Count > 0)
                {
                    //call delete api for every statement
                    int StatementTypeId = 0;
                    List<string> statementTypeList = StatementType.Split(',').ToList();
                    if (statementTypeList != null && statementTypeList.Count > 0)
                        foreach (var item in statementTypeList)
                        {
                            StatementTypeId = item.ToLower().Contains("income") ? 1 : item.ToLower().Contains("balance") ? 2 : 0;
                            bool flag = DeleteCalculatedDataIntegrated_ForcastRatio(UserId, InitialsetupId, StatementTypeId, cik, startYear, endYear);
                        }
                }
                else
                {
                    string CompanyName = "";
                    string edgarView = edgarDataRepository.GetEdgar(cik, startYear, endYear).FirstOrDefault<EdgarData>().EdgarView;
                    if (edgarView == null)
                    {
                        renderResult.StatusCode = 0;
                        renderResult.Result = filingsArrayList;
                    }
                    else
                    {
                        List<List<Filings>> filingsListList = (List<List<Filings>>)JsonConvert.DeserializeObject<List<List<Filings>>>(edgarView);

                        List<CategoryByInitialSetup> categoryByInitialSetups = InitialSetupId != null ? iCategoryByInitialSetup.FindBy(x => x.InitialSetupId == InitialSetupId).ToList() : null;


                        foreach (List<Filings> filingsList1 in filingsListList)
                        {
                            //Remove all Null Value
                            var Removedataslist = filingsList1[0].Datas.FindAll(x => x.Values == null || x.Values.Count == 0);
                            if (Removedataslist != null)
                            {
                                foreach (var dt in Removedataslist)
                                {
                                    filingsList1[0].Datas.Remove(dt);
                                }
                            }
                            //////////////////////////////

                            filingsList1[0].InitialSetupId = InitialSetupId;
                            FilingsArray filingsArray = new FilingsArray()
                            {
                                CompanyName = filingsList1[0].CompanyName,
                                StatementType = filingsList1[0].StatementType,
                                Filings = filingsList1[0]
                            };
                            CompanyName = filingsList1[0].CompanyName;
                            int num1 = 0;
                            List<Values> valuesList1 = new List<Values>();
                            List<Values> valuesList2 = new List<Values>();
                            Values values1 = new Values();


                            foreach (Datas data in filingsList1[0].Datas)
                            {
                                if (data.IsTally == true)
                                    data.Category = "General";
                                if (categoryByInitialSetups != null && categoryByInitialSetups.Count > 0)
                                {
                                    var assigncategory = categoryByInitialSetups.Find(x => x.DatasId == data.DataId);
                                    if (assigncategory != null)
                                    {
                                        data.Category = assigncategory.Category != null ? assigncategory.Category : data.Category;
                                    }
                                }
                                if (data.Values != null && num1 < data.Values.Count)
                                {
                                    num1 = data.Values.Count;
                                    valuesList2 = data.Values;
                                }
                            }


                            foreach (Datas data in filingsArray.Filings.Datas)
                            {
                                if (data.Values != null)
                                {
                                    if (data.Values.Count != num1)
                                    {
                                        int index = 0;
                                        foreach (Values values2 in valuesList2)
                                        {
                                            Values item = values2;
                                            Values values3 = new Values();
                                            values3.CElementName = (string)null;
                                            values3.CLineItem = (string)null;
                                            values3.Value = (string)null;
                                            if (data.Values.FirstOrDefault((x => Convert.ToDateTime(x.FilingDate) == Convert.ToDateTime(item.FilingDate))) == null)
                                            {
                                                values3.FilingDate = item.FilingDate;
                                                data.Values.Insert(index, values3);
                                            }
                                            ++index;
                                        }
                                    }
                                }
                                else
                                {
                                    List<Values> valuesList3 = new List<Values>();
                                    data.Values = valuesList3;
                                    foreach (Values values2 in valuesList2)
                                        data.Values.Add(new Values()
                                        {
                                            CElementName = (string)null,
                                            CLineItem = (string)null,
                                            Value = (string)null,
                                            FilingDate = values2.FilingDate
                                        });
                                }
                            }


                            filingsArrayList.Add(filingsArray);
                            if (filingsList1[0].StatementType == "INCOME")
                            {
                                Datas datas1 = new Datas();
                                List<Datas> DataProcessing_list = filingsList1[0].Datas.OrderBy(x => x.Sequence).ToList();
                                Datas MaxValues_data = DataProcessing_list.First<Datas>();
                                List<Datas> Integrated_datasList = new List<Datas>();
                                long gross_Seq = 0;
                                bool depreFlag = false;
                                bool amortizationFlag = false;

                                Datas Depreciation_datas = new Datas();
                                Datas Amortization_datas = new Datas();
                                foreach (List<Filings> filingsList2 in filingsListList)
                                {
                                    if (filingsList2[0].StatementType == "INCOME")
                                    {
                                        var incomeDepreciation_datas = filingsList2[0].Datas.Find(x => x.LineItem.Contains("Depreciation"));
                                        //Depreciation_datas
                                        if (incomeDepreciation_datas != null)
                                        {
                                            Depreciation_datas = incomeDepreciation_datas;
                                            depreFlag = true;
                                            break;
                                        }
                                    }
                                    else
                                    if (filingsList2[0].StatementType == "CASH_FLOW")
                                        Depreciation_datas = filingsList2[0].Datas.Find(x => x.LineItem.Contains("Depreciation"));
                                }
                                if (Depreciation_datas != null)
                                {
                                    //check if Depreciation exist in mixed Datas or not
                                    MixedSubDatas mixedSubDatas = iMixedSubDatas.GetSingle(x => x.DatasId == Depreciation_datas.DataId && x.InitialSetupId == InitialSetupId && x.Category == "Operating");
                                    if (mixedSubDatas != null)
                                    {
                                        List<MixedSubValues> Temp_mixedSubValuesList = new List<MixedSubValues>();
                                        List<MixedSubValues> mixedSubValuesList = new List<MixedSubValues>();
                                        Temp_mixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == mixedSubDatas.Id).ToList();
                                        MixedSubValues tmpMixedSubValues;
                                        foreach (Values obj in MaxValues_data.Values)
                                        {
                                            tmpMixedSubValues = new MixedSubValues();
                                            tmpMixedSubValues = Temp_mixedSubValuesList != null && Temp_mixedSubValuesList.Count > 0 ? Temp_mixedSubValuesList.FirstOrDefault(x => x.FilingDate == obj.FilingDate) : null;
                                            if (tmpMixedSubValues != null)
                                            {
                                                mixedSubValuesList.Add(tmpMixedSubValues);
                                            }
                                        }
                                        if (mixedSubValuesList != null && mixedSubValuesList.Count > 0)
                                        {
                                            Depreciation_datas = mapper.Map<MixedSubDatas, Datas>(mixedSubDatas);
                                            Depreciation_datas.Values = new List<Values>();
                                            foreach (var mixedValues in mixedSubDatas.MixedSubValues)
                                            {
                                                Values mappedValue = mapper.Map<MixedSubValues, Values>(mixedValues);
                                                tmpMixedSubValues = new MixedSubValues();
                                                tmpMixedSubValues = mixedSubValuesList != null && mixedSubValuesList.Count > 0 ? mixedSubValuesList.FirstOrDefault(x => x.FilingDate == mixedValues.FilingDate) : null;
                                                if (tmpMixedSubValues != null)
                                                {
                                                    Depreciation_datas.Values.Add(mappedValue);
                                                }

                                            }

                                        }
                                    }
                                }

                                //find aamortization
                                foreach (List<Filings> filingsList2 in filingsListList)
                                {
                                    if (filingsList2[0].StatementType == "INCOME")
                                    {
                                        var incomeAmortization_datas = filingsList2[0].Datas.Find(x => x.LineItem.ToLower().Contains("amortization"));
                                        //Amortization_datas
                                        if (incomeAmortization_datas != null)
                                        {
                                            Amortization_datas = incomeAmortization_datas;
                                            amortizationFlag = true;
                                            break;
                                        }
                                    }
                                    else
                                    if (filingsList2[0].StatementType == "CASH_FLOW")
                                        Amortization_datas = filingsList2[0].Datas.Find(x => x.LineItem.ToLower().Contains("amortization"));
                                }
                                if (Amortization_datas != null)
                                {
                                    //check if Depreciation exist in mixed Datas or not
                                    MixedSubDatas mixedSubDatas = iMixedSubDatas.GetSingle(x => x.DatasId == Amortization_datas.DataId && x.InitialSetupId == InitialSetupId && x.Category == "Non-Operating");
                                    if (mixedSubDatas != null)
                                    {
                                        List<MixedSubValues> Temp_mixedSubValuesList = new List<MixedSubValues>();
                                        List<MixedSubValues> mixedSubValuesList = new List<MixedSubValues>();
                                        Temp_mixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == mixedSubDatas.Id).ToList();
                                        MixedSubValues tmpMixedSubValues;
                                        foreach (Values obj in MaxValues_data.Values)
                                        {
                                            tmpMixedSubValues = new MixedSubValues();
                                            tmpMixedSubValues = Temp_mixedSubValuesList != null && Temp_mixedSubValuesList.Count > 0 ? Temp_mixedSubValuesList.FirstOrDefault(x => x.FilingDate == obj.FilingDate) : null;
                                            if (tmpMixedSubValues != null)
                                            {
                                                mixedSubValuesList.Add(tmpMixedSubValues);
                                            }
                                        }
                                        if (mixedSubValuesList != null && mixedSubValuesList.Count > 0)
                                        {
                                            Amortization_datas = mapper.Map<MixedSubDatas, Datas>(mixedSubDatas);
                                            Amortization_datas.Values = new List<Values>();
                                            foreach (var mixedValues in mixedSubDatas.MixedSubValues)
                                            {
                                                Values mappedValue = mapper.Map<MixedSubValues, Values>(mixedValues);
                                                tmpMixedSubValues = new MixedSubValues();
                                                tmpMixedSubValues = mixedSubValuesList != null && mixedSubValuesList.Count > 0 ? mixedSubValuesList.FirstOrDefault(x => x.FilingDate == mixedValues.FilingDate) : null;
                                                if (tmpMixedSubValues != null)
                                                {
                                                    Amortization_datas.Values.Add(mappedValue);
                                                }
                                            }

                                        }
                                    }
                                }


                                Datas revenue_integratedDatas = new Datas();
                                Datas costofSales_integratedDatas = new Datas();

                                //find revenue
                                string revenuesynonyms = "Net Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, net";
                                string Costofsalesynonyms = "Cost of sales%COGS%Cost of Goods Sold%Cost of Revenue%Cost of Products Sold%Total cost of revenue%Total cost of revenues%Cost of products sold, excluding amortization of intangible assets%Costs of goods sold%Cost of equipment and services revenues%Cost of revenues%Cost of revenue (COR)";
                                bool revenueflag = false;
                                bool costofsalesflag = false;
                                List<string> synonyms = revenuesynonyms.Split('%').ToList(); //convert comma seperated values to list

                                int mulBy = -1;
                                foreach (Datas datas4 in DataProcessing_list)
                                {
                                    if (datas4.IsParentItem != true)
                                    {


                                        if (datas4.LineItem.Contains("Gross"))
                                        {
                                            gross_Seq = datas4.Sequence;
                                            foreach (Values obj in datas4.Values)
                                            {
                                                //get sum of revenue and COGS
                                                Values revenue = revenue_integratedDatas != null && revenue_integratedDatas.Values != null && revenue_integratedDatas.Values.Count > 0 ? revenue_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                Values coGS = costofSales_integratedDatas != null && costofSales_integratedDatas.Values != null && costofSales_integratedDatas.Values.Count > 0 ? costofSales_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                double calculatedgross = 0;

                                                calculatedgross = (revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) + (coGS != null && !string.IsNullOrEmpty(coGS.Value) ? Convert.ToDouble(coGS.Value) : 0);
                                                double num2 = calculatedgross != 0 ? calculatedgross : (obj.Value != null ? Convert.ToDouble(obj.Value) : 0.0);
                                                obj.Value = Convert.ToString(num2);
                                            }
                                            Integrated_datasList.Add(datas4);
                                            break;
                                        }
                                        else if (costofsalesflag == true)
                                        {
                                            //add Gross Margin
                                            gross_Seq = datas4.Sequence;
                                            ////////////
                                            Datas Gross_datas = new Datas();
                                            Gross_datas.LineItem = "Gross Margin";
                                            Gross_datas.IsTally = true;
                                            //Gross_datas.Sequence = (Integrated_datasList.Count + 1);
                                            Gross_datas.Sequence = gross_Seq;
                                            Gross_datas.Category = (string)null;
                                            Gross_datas.IsParentItem = false;
                                            Gross_datas.Values = new List<Values>();


                                            foreach (Values obj in MaxValues_data.Values)
                                            {

                                                Values valueObj = new Values();
                                                //get sum of revenue and COGS
                                                Values revenue = revenue_integratedDatas != null && revenue_integratedDatas.Values != null && revenue_integratedDatas.Values.Count > 0 ? revenue_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                Values coGS = costofSales_integratedDatas != null && costofSales_integratedDatas.Values != null && costofSales_integratedDatas.Values.Count > 0 ? costofSales_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                double calculatedgross = 0;

                                                calculatedgross = (revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) + (coGS != null && !string.IsNullOrEmpty(coGS.Value) ? Convert.ToDouble(coGS.Value) : 0);
                                                double num2 = calculatedgross != 0 ? calculatedgross : (obj.Value != null ? Convert.ToDouble(obj.Value) : 0.0);
                                                obj.Value = Convert.ToString(num2);
                                                valueObj.FilingDate = obj.FilingDate;
                                                valueObj.Value = Convert.ToString(num2);
                                                Gross_datas.Values.Add(valueObj);
                                            }
                                            Integrated_datasList.Add(Gross_datas);
                                            break;
                                        }


                                        if (revenueflag == true)
                                        {
                                            if (costofsalesflag == false)
                                                foreach (var syn in synonyms)
                                                {
                                                    if (datas4.LineItem.ToUpper() == syn.ToUpper())
                                                    {
                                                        costofsalesflag = true;
                                                        break;
                                                    }
                                                }

                                            if (datas4.Values != null && datas4.Values.Count > 0)
                                            {
                                                if (costofsalesflag == true && depreFlag == false)
                                                {
                                                    foreach (var item in datas4.Values)
                                                    {
                                                        Values depreciationValue = Depreciation_datas != null && Depreciation_datas.Values != null && Depreciation_datas.Values.Count > 0 ? Depreciation_datas.Values.Find(x => x.FilingDate == item.FilingDate) : null;
                                                        item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * (Convert.ToDouble(item.Value) - (depreciationValue != null && !string.IsNullOrEmpty(depreciationValue.Value) ? Convert.ToDouble(depreciationValue.Value) : 0))) : null;
                                                    }
                                                    costofSales_integratedDatas = datas4;
                                                }
                                                else
                                                {
                                                    foreach (var item in datas4.Values)
                                                    {
                                                        item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                                    }
                                                }
                                            }



                                        }

                                        Integrated_datasList.Add(datas4);

                                        if (revenueflag == false)
                                            foreach (var syn in synonyms)
                                            {
                                                if (datas4.LineItem.ToUpper() == syn.ToUpper())
                                                {

                                                    // mulBy = -1;
                                                    revenueflag = true;

                                                    revenue_integratedDatas = datas4;
                                                    // change revenue synonyms to cost of sales synonym
                                                    synonyms = new List<string>();
                                                    synonyms = Costofsalesynonyms.Split('%').ToList(); // convert comma seperated values to list
                                                    break;
                                                }
                                            }



                                    }

                                }

                                //if (categoryByInitialSetups != null && categoryByInitialSetups.Count > 0)
                                //{
                                //    var list = categoryByInitialSetups.FindAll(x => x.Category == "Operating").ToList();
                                //}

                                foreach (Datas datas4 in DataProcessing_list.Where(x => x.Sequence >= gross_Seq).ToList().FindAll(x => x.Category == "Operating" && !x.LineItem.ToLower().Contains("depreciation") && !x.LineItem.ToLower().Contains("amortization")).OrderBy(x => x.Sequence).ToList())
                                {
                                    if (datas4.Values != null && datas4.Values.Count > 0)
                                        foreach (var item in datas4.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                    //var checkcategory = categoryByInitialSetups.Find(x => x.DatasId == datas4.DataId);
                                    Integrated_datasList.Add(datas4);
                                }


                                // Find Total Mixed category
                                List<Datas> MixedList = DataProcessing_list.FindAll(x => x.Category == "Mixed").ToList();


                                // Find Total operating and NonOperating Mixed category
                                List<MixedSubDatas> MixedOperatingList = new List<MixedSubDatas>();
                                List<MixedSubDatas> MixedNonOperatingList = new List<MixedSubDatas>();

                                foreach (Datas dt in MixedList)
                                {
                                    var MixedSubdataList = iMixedSubDatas.FindBy(x => x.DatasId == dt.DataId && x.InitialSetupId == InitialSetupId && !x.LineItem.ToLower().Contains("depreciation") && !x.LineItem.ToLower().Contains("amortization")).ToList();
                                    if (MixedSubdataList != null && MixedSubdataList.Count > 0)
                                    {
                                        //MixedSubValues values = new MixedSubValues();
                                        foreach (var item in MixedSubdataList)
                                        {
                                            var MixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == item.Id).ToList();
                                            item.MixedSubValues = new List<MixedSubValues>();
                                            item.MixedSubValues = MixedSubValuesList != null && MixedSubValuesList.Count > 0 ? MixedSubValuesList : new List<MixedSubValues>();
                                            if (item.Category == "Operating")
                                                MixedOperatingList.Add(item);
                                            else
                                                MixedNonOperatingList.Add(item);
                                        }
                                    }
                                }

                                //// Add Mixed Operating in Integrated_datasList
                                Datas Moperating_datas = new Datas();
                                foreach (MixedSubDatas dt in MixedOperatingList)
                                {
                                    Moperating_datas = new Datas();
                                    Moperating_datas.LineItem = dt.LineItem;
                                    Moperating_datas.IsTally = dt.IsTally;
                                    Moperating_datas.Sequence = (Integrated_datasList.Count + 1);
                                    Moperating_datas.Category = dt.Category;
                                    Moperating_datas.IsParentItem = false;
                                    Moperating_datas.Values = new List<Values>();
                                    foreach (MixedSubValues val in dt.MixedSubValues)
                                    {
                                        Values MoperatingValues = new Values();
                                        MoperatingValues.FilingDate = val.FilingDate;
                                        // MoperatingValues.Value = val.Value;
                                        MoperatingValues.Value = !string.IsNullOrEmpty(val.Value) ? Convert.ToString(mulBy * Convert.ToDouble(val.Value)) : null;
                                        Moperating_datas.Values.Add(MoperatingValues);
                                    }
                                    Integrated_datasList.Add(Moperating_datas);
                                }
                                ////////////
                                Datas EBITDA_datas = new Datas();
                                EBITDA_datas.LineItem = "EBITDA";
                                EBITDA_datas.IsTally = true;
                                EBITDA_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBITDA_datas.Category = (string)null;
                                EBITDA_datas.IsParentItem = false;
                                EBITDA_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    double num2 = 0.0;
                                    Values values3 = new Values();
                                    foreach (Datas datas4 in Integrated_datasList.FindAll(x => x.Sequence >= gross_Seq).ToList())
                                    {
                                        Values values4 = datas4.Values.Find(x => x.FilingDate == obj.FilingDate);
                                        num2 = num2 + (values4 != null && !string.IsNullOrEmpty(values4.Value) ? Convert.ToDouble(values4.Value) : 0);
                                    }
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2);
                                    EBITDA_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBITDA_datas);

                                //bind depreciation
                                if (Depreciation_datas != null)
                                {
                                    if (Depreciation_datas.Values != null && Depreciation_datas.Values.Count > 0)
                                        foreach (var item in Depreciation_datas.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                    Integrated_datasList.Add(Depreciation_datas);

                                }


                                //bind EBITA
                                Datas EBITA_datas = new Datas();
                                EBITA_datas.LineItem = "EBITA";
                                EBITA_datas.IsTally = true;
                                EBITA_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBITA_datas.Category = (string)null;
                                EBITA_datas.IsParentItem = false;
                                EBITA_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    Values values3 = new Values();
                                    Values values4 = EBITDA_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values Depreciation_values = Depreciation_datas != null && Depreciation_datas.Values != null ? Depreciation_datas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (Depreciation_values == null || Depreciation_values.Value == null ? 0.0 : Convert.ToDouble(Depreciation_values.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    EBITA_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBITA_datas);



                                //calculate amortization
                                if (Amortization_datas != null)
                                {
                                    if (Amortization_datas.Values != null && Amortization_datas.Values.Count > 0)
                                        foreach (var item in Amortization_datas.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                    Integrated_datasList.Add(Amortization_datas);

                                }

                                //Datas Amortization_datas = filingsList1[0].Datas.Find(x => x.LineItem.Contains("Amortization"));
                                //if (Amortization_datas != null)
                                //{
                                //    if (Amortization_datas.Values != null && Amortization_datas.Values.Count > 0)
                                //        foreach (var item in Amortization_datas.Values)
                                //        {
                                //            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                //        }
                                //    Integrated_datasList.Add(Amortization_datas);
                                //}




                                //calculate EBIT
                                Datas EBIT_datas = new Datas();
                                EBIT_datas.LineItem = "EBIT";
                                EBIT_datas.IsTally = true;
                                EBIT_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBIT_datas.Category = (string)null;
                                EBIT_datas.IsParentItem = false;
                                EBIT_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    Values values3 = new Values();
                                    Values values4 = EBITA_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values values5 = Amortization_datas?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    EBIT_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBIT_datas);


                                // all the Non -operating item of Raw Historical and Mixed (Non-Operating Part)
                                List<Datas> NonOperatingItemList = filingsList1[0].Datas.FindAll(x => !x.LineItem.ToLower().Contains("depreciation") && !x.LineItem.ToLower().Contains("amortization") && (x.Category == "Non-Operating" || x.Category == "Financing")).OrderBy(x => x.Sequence).ToList();
                                foreach (Datas datas4 in NonOperatingItemList)
                                {
                                    if (!datas4.LineItem.Contains("Amortization") && !datas4.LineItem.Contains("Extraordinary"))
                                    {

                                        if (!datas4.LineItem.ToLower().Contains("Gains") || !datas4.LineItem.ToLower().Contains("income"))
                                        {
                                            if (datas4.Values != null && datas4.Values.Count > 0)
                                                foreach (var item in datas4.Values)
                                                {
                                                    item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                                }
                                        }
                                        Integrated_datasList.Add(datas4);

                                    }
                                }


                                //// Add Mixed Non Operating in Integrated_datasList
                                Datas MNonoperating_datas = new Datas();
                                foreach (MixedSubDatas dt in MixedNonOperatingList)
                                {
                                    MNonoperating_datas = new Datas();
                                    MNonoperating_datas.LineItem = dt.LineItem;
                                    MNonoperating_datas.IsTally = dt.IsTally;
                                    MNonoperating_datas.Sequence = (Integrated_datasList.Count + 1);
                                    MNonoperating_datas.Category = dt.Category;
                                    MNonoperating_datas.IsParentItem = false;
                                    MNonoperating_datas.Values = new List<Values>();
                                    foreach (MixedSubValues val in dt.MixedSubValues)
                                    {
                                        Values MNonoperatingValues = new Values();
                                        MNonoperatingValues.FilingDate = val.FilingDate;
                                        //  MNonoperatingValues.Value = val.Value;
                                        MNonoperatingValues.Value = !string.IsNullOrEmpty(val.Value) ? Convert.ToString(mulBy * Convert.ToDouble(val.Value)) : null;
                                        MNonoperating_datas.Values.Add(MNonoperatingValues);
                                    }
                                    Integrated_datasList.Add(MNonoperating_datas);
                                }
                                ////////////


                                Datas EBT_datas = new Datas();
                                EBT_datas.LineItem = "EBT";
                                EBT_datas.IsTally = true;
                                EBT_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBT_datas.Category = (string)null;
                                EBT_datas.IsParentItem = false;
                                EBT_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    double num2 = 0.0;
                                    Values values3 = new Values();
                                    NonOperatingItemList.RemoveAll(x =>
                                    {
                                        if (!x.LineItem.Contains("Amortization"))
                                            return x.LineItem.Contains("Extraordinary");
                                        return true;
                                    });
                                    foreach (Datas datas4 in NonOperatingItemList)
                                    {
                                        Values values4 = datas4.Values.Find(x => x.FilingDate == obj.FilingDate);
                                        num2 += values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value);
                                    }
                                    Values values5 = EBIT_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num3 = num2 + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(Convert.ToString(num3));
                                    EBT_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBT_datas);


                                //Provision of Taxes
                                Datas datas11 = new Datas();
                                Datas datas12 = filingsList1[0].Datas.Find(x => x.LineItem.Contains("Provision"));
                                if (datas12 != null)
                                {
                                    if (datas12.Values != null && datas12.Values.Count > 0)
                                        foreach (var item in datas12.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                }
                                Integrated_datasList.Add(datas12);

                                // NET INCOME before extraordinary items
                                Datas NetIncomeBefore_datas = new Datas();
                                NetIncomeBefore_datas.LineItem = "NET INCOME before extraordinary items";
                                NetIncomeBefore_datas.IsTally = true;
                                NetIncomeBefore_datas.Sequence = (Integrated_datasList.Count + 1);
                                NetIncomeBefore_datas.Category = (string)null;
                                NetIncomeBefore_datas.IsParentItem = false;
                                NetIncomeBefore_datas.Values = new List<Values>();
                                foreach (Values values2 in MaxValues_data.Values)
                                {
                                    Values obj = values2;
                                    Values values3 = new Values();
                                    Values values4 = EBT_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values values5 = datas12?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    NetIncomeBefore_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(NetIncomeBefore_datas);
                                Datas datas14 = new Datas();
                                Datas datas15 = filingsList1[0].Datas.Find(x => x.LineItem.Contains("Extraordinary"));
                                if (datas15 != null)
                                    Integrated_datasList.Add(datas15);
                                Datas NetIncomeAfter_datas = new Datas();
                                NetIncomeAfter_datas.LineItem = "NET INCOME after extraordinary items";
                                NetIncomeAfter_datas.IsTally = true;
                                NetIncomeAfter_datas.Sequence = (Integrated_datasList.Count + 1);
                                NetIncomeAfter_datas.Category = (string)null;
                                NetIncomeAfter_datas.IsParentItem = false;
                                NetIncomeAfter_datas.Values = new List<Values>();
                                foreach (Values values2 in MaxValues_data.Values)
                                {
                                    Values obj = values2;
                                    Values values3 = new Values();
                                    Values values4 = NetIncomeBefore_datas?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values values5 = datas15?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    NetIncomeAfter_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(NetIncomeAfter_datas);
                                filingsList1[0].Datas = Integrated_datasList;

                                // Save Income Statement data in IntegratedDatas and Values
                                var IntegratedDatasIncomChk = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == 1).ToList();
                                if (IntegratedDatasIncomChk == null || IntegratedDatasIncomChk.Count == 0) ///////If data is not avlbl in IntegratedData save then only.
                                {
                                    foreach (var item in Integrated_datasList)
                                    {
                                        if (item != null && !string.IsNullOrEmpty(item.LineItem) && item.IsParentItem != true)
                                        {

                                            IntegratedDatas integratedDatasObj = new IntegratedDatas();
                                            integratedDatasObj.Id = 0;
                                            integratedDatasObj.Category = item.Category;
                                            integratedDatasObj.Sequence = item.Sequence;
                                            integratedDatasObj.LineItem = item.LineItem;
                                            integratedDatasObj.IsTally = item.IsTally;
                                            integratedDatasObj.IsParentItem = item.IsParentItem != null ? item.IsParentItem : false;
                                            integratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                            integratedDatasObj.IntegratedValues = new List<IntegratedValues>();

                                            foreach (var valueobj in item.Values)
                                            {
                                                IntegratedValues obj = new IntegratedValues();
                                                obj.Id = 0;
                                                obj.FilingDate = valueobj.FilingDate;
                                                obj.Value = valueobj.Value;
                                                DateTime Dt = new DateTime();
                                                Dt = Convert.ToDateTime(valueobj.FilingDate);
                                                obj.Year = Convert.ToString(Dt.Year);
                                                integratedDatasObj.IntegratedValues.Add(obj);
                                            }
                                            integratedDatasObj.InitialSetupId = InitialSetupId == 0 ? null : InitialSetupId;
                                            iIntegratedDatas.Add(integratedDatasObj);
                                            iIntegratedDatas.Commit();
                                        }
                                    }
                                }
                            }
                            else if (filingsList1[0].StatementType == "BALANCE_SHEET")
                            {
                                Datas datas1 = new Datas();
                                List<Datas> DataProcessing_list = filingsList1[0].Datas.OrderBy(x => x.Sequence).ToList();
                                Datas MaxValues_data = DataProcessing_list.First<Datas>();
                                List<Datas> Integrated_datasList = new List<Datas>();
                                // Find Total Mixed category
                                List<Datas> MixedList = DataProcessing_list.FindAll(x => x.Category == "Mixed").ToList();
                                foreach (Datas dt in DataProcessing_list)
                                {
                                    if (dt.Category != "Mixed" || dt.IsParentItem == true)
                                    {
                                        Integrated_datasList.Add(dt);
                                    }
                                    else
                                    {
                                        foreach (Datas mixedDT in MixedList)
                                        {
                                            if (mixedDT.DataId == dt.DataId)
                                            {
                                                var MixedSubdataList = iMixedSubDatas.FindBy(x => x.DatasId == dt.DataId && x.InitialSetupId == InitialSetupId).ToList();
                                                if (MixedSubdataList != null && MixedSubdataList.Count > 0)
                                                {
                                                    foreach (var item in MixedSubdataList)
                                                    {
                                                        var MixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == item.Id).ToList();
                                                        item.MixedSubValues = new List<MixedSubValues>();
                                                        item.MixedSubValues = MixedSubValuesList != null && MixedSubValuesList.Count > 0 ? MixedSubValuesList : new List<MixedSubValues>();

                                                    }
                                                }

                                                Datas Balance_datas = new Datas();
                                                foreach (MixedSubDatas msd in MixedSubdataList)
                                                {
                                                    Balance_datas = new Datas();
                                                    Balance_datas.LineItem = msd.LineItem;
                                                    Balance_datas.IsTally = msd.IsTally;
                                                    Balance_datas.Sequence = (Integrated_datasList.Count + 1);
                                                    Balance_datas.Category = msd.Category;
                                                    Balance_datas.IsParentItem = false;
                                                    Balance_datas.Values = new List<Values>();
                                                    foreach (MixedSubValues val in msd.MixedSubValues)
                                                    {
                                                        Values MNonoperatingValues = new Values();
                                                        MNonoperatingValues.FilingDate = val.FilingDate;
                                                        MNonoperatingValues.Value = val.Value;
                                                        Balance_datas.Values.Add(MNonoperatingValues);
                                                    }
                                                    Integrated_datasList.Add(Balance_datas);
                                                }
                                            }
                                        }
                                    }
                                }
                                filingsList1[0].Datas = Integrated_datasList;
                                var IntegratedDatasBalanceChk = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == 2).ToList();
                                // Save BalanceSheet data in IntegratedDatas and Values
                                if (IntegratedDatasBalanceChk == null || IntegratedDatasBalanceChk.Count == 0)
                                {
                                    foreach (var item in Integrated_datasList)
                                    {
                                        IntegratedDatas integratedDatasObj = new IntegratedDatas();
                                        integratedDatasObj.Id = 0;
                                        integratedDatasObj.Category = item.Category;
                                        integratedDatasObj.Sequence = item.Sequence;
                                        integratedDatasObj.LineItem = item.LineItem;
                                        integratedDatasObj.IsTally = item.IsTally;
                                        integratedDatasObj.IsParentItem = item.IsParentItem != null ? item.IsParentItem : false;
                                        integratedDatasObj.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                        integratedDatasObj.IntegratedValues = new List<IntegratedValues>();

                                        foreach (var valueobj in item.Values)
                                        {
                                            IntegratedValues obj = new IntegratedValues();
                                            obj.Id = 0;
                                            obj.FilingDate = valueobj.FilingDate;
                                            obj.Value = valueobj.Value;
                                            DateTime Dt = new DateTime();
                                            Dt = Convert.ToDateTime(valueobj.FilingDate);
                                            obj.Year = Convert.ToString(Dt.Year);
                                            integratedDatasObj.IntegratedValues.Add(obj);
                                        }
                                        integratedDatasObj.InitialSetupId = InitialSetupId == 0 ? null : InitialSetupId;
                                        iIntegratedDatas.Add(integratedDatasObj);
                                        iIntegratedDatas.Commit();
                                    }
                                }
                            }
                            else if (filingsList1[0].StatementType == "CASH_FLOW")
                            {
                            }
                        }
                        ///////////////////////Statement of Retained Earnings///////////////////////
                        int YearCount = Convert.ToInt32(endYear) - Convert.ToInt32(startYear) + 1;
                        int StYear = Convert.ToInt32(startYear);
                        Filings FObj = new Filings();
                        List<Datas> DatasRE = new List<Datas>();
                        FObj.CompanyName = CompanyName;
                        FObj.StatementType = "STATEMENT OF RETAINED EARNINGS";
                        FObj.InitialSetupId = InitialSetupId;
                        FObj.ReportName = "STATEMENT OF RETAINED EARNINGS";
                        FObj.Unit = "";

                        Datas DObj = new Datas();
                        DObj.LineItem = "RETAINED EARNINGS (BEGINNING YEAR)";
                        DObj.Sequence = 1;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = false;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        DObj = new Datas();
                        DObj.LineItem = "Net Income";
                        DObj.Sequence = 2;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = false;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        DObj = new Datas();
                        DObj.LineItem = "Dividends Paid";
                        DObj.Sequence = 3;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = false;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        DObj = new Datas();
                        DObj.LineItem = "RETAINED EARNINGS (END YEAR)";
                        DObj.Sequence = 4;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = true;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        FObj.Datas = DatasRE;
                        List<Filings> FilingsRE = new List<Filings>();
                        FilingsRE.Add(FObj);


                        FilingsArray filingsArrayRE = new FilingsArray()
                        {
                            CompanyName = FilingsRE[0].CompanyName,
                            StatementType = "STATEMENT OF RETAINED EARNINGS",
                            Filings = FilingsRE[0]
                        };
                        filingsArrayList.Add(filingsArrayRE);
                        ////////////////////////////////////////////////////////////////////////////


                        /////////////////////////SAVE Retained Earnings/////////////////////////////
                        var IntegratedDatasREChk = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == (int)StatementTypeEnum.RetainedEarningsStatement).ToList();
                        if (IntegratedDatasREChk == null || IntegratedDatasREChk.Count == 0)
                        {
                            foreach (var item in DatasRE)
                            {
                                IntegratedDatas integratedDatasObj = new IntegratedDatas();
                                integratedDatasObj.Id = 0;
                                integratedDatasObj.Category = item.Category;
                                integratedDatasObj.Sequence = item.Sequence;
                                integratedDatasObj.LineItem = item.LineItem;
                                integratedDatasObj.IsTally = item.IsTally;
                                integratedDatasObj.IsParentItem = item.IsParentItem != null ? item.IsParentItem : false;
                                integratedDatasObj.StatementTypeId = (int)StatementTypeEnum.RetainedEarningsStatement;
                                integratedDatasObj.IntegratedValues = new List<IntegratedValues>();
                                foreach (var valueobj in item.Values)
                                {
                                    IntegratedValues obj = new IntegratedValues();
                                    obj.Id = 0;
                                    obj.FilingDate = valueobj.FilingDate;
                                    obj.Value = valueobj.Value;
                                    DateTime Dt = new DateTime();
                                    Dt = Convert.ToDateTime(valueobj.FilingDate);
                                    obj.Year = Convert.ToString(Dt.Year);
                                    integratedDatasObj.IntegratedValues.Add(obj);
                                }
                                //integratedDatasObj.InitialSetupId = item.InitialSetupId != 0 ? Convert.ToInt64(item.InitialSetupId) : 0;
                                integratedDatasObj.InitialSetupId = InitialSetupId == 0 ? null : InitialSetupId;
                                iIntegratedDatas.Add(integratedDatasObj);
                                iIntegratedDatas.Commit();
                            }
                        }

                        ////////////////////////////////////////////////////////////////////////////
                        renderResult.StatusCode = 1;
                        renderResult.Result = filingsArrayList;
                    }
                }
                return Ok(renderResult);

            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }


        // this example for Income Statement
        [HttpGet]
        [Route("DeleteCalculatedDataIntegrated_ForcastRatio/{UserId}/{InitialsetupId}/{cik}/{startYear?}/{endYear?}")]
        public bool DeleteCalculatedDataIntegrated_ForcastRatio(long UserId, long? InitialsetupId, int StatementTypeId, string cik, int? startYear = null, int? endYear = null)
        {
            bool flag = false;
            try
            {
                // get current initial Setup
                //InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.Id == InitialsetupId).OrderByDescending(x => x.Id).First();

                //temporarily for Income statement Only
                if (StatementTypeId == (int)StatementTypeEnum.IncomeStatement || StatementTypeId == (int)StatementTypeEnum.BalanceSheet)
                {
                    // delete value and Explicit Values from Integrated Financial Statement
                    List<IntegratedDatas> integratedDatasList = InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.Id != 0 ? iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.StatementTypeId == StatementTypeId).OrderBy(x => x.Id).ToList() : null;

                    if (integratedDatasList != null && integratedDatasList.Count > 0)
                    {
                        // get all values of Integrated          
                        var AllIntegratedValuesList = iIntegratedValues.FindBy(t => integratedDatasList.Any(m => m.Id == t.IntegratedDatasId)).ToList();
                        if (AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0)
                        {
                            iIntegratedValues.DeleteMany(AllIntegratedValuesList);
                            iIntegratedValues.Commit();
                        }

                        // get all Explicit values of Integrated              
                        var AllIntegrated_explicitValuesList = iIntegrated_ExplicitValues.FindBy(t => integratedDatasList.Any(m => m.Id == t.IntegratedDatasId)).ToList();
                        if (AllIntegrated_explicitValuesList != null && AllIntegrated_explicitValuesList.Count > 0)
                        {
                            iIntegrated_ExplicitValues.DeleteMany(AllIntegrated_explicitValuesList);
                            iIntegrated_ExplicitValues.Commit();
                        }

                        //get Forcast Ratio datas by InitialSetupId
                        List<ForcastRatioDatas> forcastRatioDatasList = InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.Id != 0 ? iForcastRatioDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.StatementTypeId == StatementTypeId).ToList() : null;

                        if (forcastRatioDatasList != null && forcastRatioDatasList.Count > 0)
                        {
                            // delete Value from History Forcast Ratio 
                            var AllForcastRatioValuesList = iForcastRatioValues.FindBy(t => forcastRatioDatasList.Any(m => m.Id == t.ForcastRatioDatasId)).ToList();
                            if (AllForcastRatioValuesList != null && AllForcastRatioValuesList.Count > 0)
                            {
                                iForcastRatioValues.DeleteMany(AllForcastRatioValuesList);
                                iForcastRatioValues.Commit();
                            }
                        }

                        // delete explicit Value where is editable =false testing remainingedgar
                        //var AllForcastRatio_explicitValuesList = iForcastRatio_ExplicitValues.FindBy(t => forcastRatioDatasList.Any(m => m.Id == t.ForcastRatioDatasId && m.IsExplicit_editable == false)).ToList();
                        //if (AllForcastRatio_explicitValuesList != null && AllForcastRatio_explicitValuesList.Count > 0)
                        //{
                        //    iForcastRatio_ExplicitValues.DeleteMany(AllForcastRatio_explicitValuesList);
                        //    iForcastRatio_ExplicitValues.Commit();
                        //}

                        long? InitialSetupId = null;
                        // to save Values in Integrated 
                        List<Datas> currentStatmentListDatas = new List<Datas>();

                        string edgarView = this.edgarDataRepository.GetEdgar(cik, startYear, endYear).FirstOrDefault<EdgarData>().EdgarView;

                        // // get dumy value for value Integrated

                        Integrated_ExplicitValues explicitValue;
                        List<Integrated_ExplicitValues> dumyexplicitValuesList = new List<Integrated_ExplicitValues>();
                        List<IntegratedValues> dumyValuesList = new List<IntegratedValues>();
                        bool grossflag = false;
                        long KeyId = 0;
                        List<IntegratedDatas> tillGrossMargin = new List<IntegratedDatas>();
                        // calculate Integrated Values
                        List<IntegratedValues> integratedValuesList;
                        IntegratedValues integratedValues;
                        List<IntegratedDatasViewModel> integratedDatasVMList = new List<IntegratedDatasViewModel>();
                        IntegratedDatasViewModel integratedDatasVM;
                        IntegratedValuesViewModel integratedValuesVM;
                        List<IntegratedDatasViewModel> tillDatas;
                        IntegratedDatas revenue_integratedDatas = new IntegratedDatas();
                        IntegratedDatas costofSales_integratedDatas = new IntegratedDatas();

                        //find revenue
                        string revenuesynonyms = "Net Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, net";
                        string Costofsalesynonyms = "Cost of sales%COGS%Cost of Goods Sold%Cost of Revenue%Cost of Products Sold%Total cost of revenue%Total cost of revenues%Cost of products sold, excluding amortization of intangible assets%Costs of goods sold%Cost of equipment and services revenues%Cost of revenues%Cost of revenue (COR)";
                        List<string> synonyms = revenuesynonyms.Split('%').ToList(); //convert comma seperated values to list

                        bool revenueflag = false;
                        bool costofsalesflag = false;
                        Datas Depreciation_datas = new Datas();
                        Datas Amortization_datas = new Datas();

                        if (!string.IsNullOrEmpty(edgarView))
                        {
                            List<List<Filings>> filingsListList = (List<List<Filings>>)JsonConvert.DeserializeObject<List<List<Filings>>>(edgarView);

                            InitialSetupId = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.Id : InitialSetupId;

                            foreach (List<Filings> filingsList1 in filingsListList)
                            {
                                filingsList1[0].InitialSetupId = InitialSetupId;
                                FilingsArray filingsArray = new FilingsArray()
                                {
                                    CompanyName = filingsList1[0].CompanyName,
                                    StatementType = filingsList1[0].StatementType,
                                    Filings = filingsList1[0]
                                };
                                if (StatementTypeId == (int)StatementTypeEnum.IncomeStatement && filingsList1[0].StatementType == "INCOME")
                                {
                                    currentStatmentListDatas = filingsList1[0].Datas;
                                    break;
                                }
                                else if (StatementTypeId == (int)StatementTypeEnum.BalanceSheet && filingsList1[0].StatementType == "BALANCE_SHEET")
                                {
                                    currentStatmentListDatas = filingsList1[0].Datas;
                                    break;
                                }
                            }
                            if (InitialSetup_IValuationObj != null)
                            {
                                IntegratedValues integratedvalue;
                                int startyear = Convert.ToInt32(InitialSetup_IValuationObj.YearFrom);
                                for (int i = startyear; i <= InitialSetup_IValuationObj.YearTo; i++)
                                {
                                    integratedvalue = new IntegratedValues();
                                    integratedvalue.Year = Convert.ToString(startyear);
                                    integratedvalue.Value = "";
                                    dumyValuesList.Add(integratedvalue);
                                    startyear = startyear + 1;
                                }
                                int year = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);

                                for (int i = 1; i <= InitialSetup_IValuationObj.ExplicitYearCount + 1; i++)
                                {
                                    explicitValue = new Integrated_ExplicitValues();
                                    year = year + 1;
                                    explicitValue.Year = Convert.ToString(year);
                                    explicitValue.Value = "";
                                    dumyexplicitValuesList.Add(explicitValue);
                                }
                            }

                            bool depreFlag = false;

                            //// find Depreciation from Cash Flow Statement
                            foreach (List<Filings> filingsList2 in filingsListList)
                            {
                                if (filingsList2[0].StatementType == "INCOME")
                                {
                                    var incomeDepreciation_datas = filingsList2[0].Datas.Find(x => x.LineItem.Contains("Depreciation"));
                                    //Depreciation_datas
                                    if (incomeDepreciation_datas != null)
                                    {
                                        Depreciation_datas = incomeDepreciation_datas;
                                        depreFlag = true;
                                        break;
                                    }
                                }
                                else
                                if (filingsList2[0].StatementType == "CASH_FLOW")
                                    Depreciation_datas = filingsList2[0].Datas.Find(x => x.LineItem.Contains("Depreciation"));
                            }
                            if (Depreciation_datas != null)
                            {
                                //check if Depreciation exist in mixed Datas or not
                                MixedSubDatas mixedSubDatas = iMixedSubDatas.GetSingle(x => x.DatasId == Depreciation_datas.DataId && x.InitialSetupId == InitialSetupId && x.Category == "Operating");
                                if (mixedSubDatas != null)
                                {
                                    List<MixedSubValues> mixedSubValuesList = new List<MixedSubValues>();
                                    mixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == mixedSubDatas.Id).ToList();
                                    if (mixedSubValuesList != null && mixedSubValuesList.Count > 0)
                                    {
                                        Depreciation_datas = mapper.Map<MixedSubDatas, Datas>(mixedSubDatas);
                                        Depreciation_datas.Values = new List<Values>();
                                        foreach (var mixedValues in mixedSubDatas.MixedSubValues)
                                        {
                                            Values mappedValue = mapper.Map<MixedSubValues, Values>(mixedValues);
                                            Depreciation_datas.Values.Add(mappedValue);
                                        }

                                    }
                                }
                            }



                            //// find amortization from Cash Flow Statement
                            foreach (List<Filings> filingsList2 in filingsListList)
                            {
                                if (filingsList2[0].StatementType == "INCOME")
                                {
                                    var incomeAmortization_datas = filingsList2[0].Datas.Find(x => x.LineItem.ToLower().Contains("amortization"));
                                    //Amortization_datas
                                    if (incomeAmortization_datas != null)
                                    {
                                        Amortization_datas = incomeAmortization_datas;
                                        //depreFlag = true;
                                        break;
                                    }
                                }
                                else
                                if (filingsList2[0].StatementType == "CASH_FLOW")
                                    Amortization_datas = filingsList2[0].Datas.Find(x => x.LineItem.ToLower().Contains("amortization"));
                            }
                            if (Amortization_datas != null)
                            {
                                //check if Depreciation exist in mixed Datas or not
                                MixedSubDatas mixedSubDatas = iMixedSubDatas.GetSingle(x => x.DatasId == Amortization_datas.DataId && x.InitialSetupId == InitialSetupId && x.Category == "Non-Operating");
                                if (mixedSubDatas != null)
                                {
                                    List<MixedSubValues> mixedSubValuesList = new List<MixedSubValues>();
                                    mixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == mixedSubDatas.Id).ToList();
                                    if (mixedSubValuesList != null && mixedSubValuesList.Count > 0)
                                    {
                                        Amortization_datas = mapper.Map<MixedSubDatas, Datas>(mixedSubDatas);
                                        Amortization_datas.Values = new List<Values>();
                                        foreach (var mixedValues in mixedSubDatas.MixedSubValues)
                                        {
                                            Values mappedValue = mapper.Map<MixedSubValues, Values>(mixedValues);
                                            Amortization_datas.Values.Add(mappedValue);
                                        }

                                    }
                                }
                            }



                            //// find Depreciation from Cash Flow Statement
                            //foreach (List<Filings> filingsList2 in filingsListList)
                            //{
                            //    if (filingsList2[0].StatementType == "CASH_FLOW")
                            //        Depreciation_datas = filingsList2[0].Datas.Find(x => x.LineItem.ToLower().Contains("depreciation"));
                            //}


                            #region save Integrated Values for Income Statement
                            if (StatementTypeId == (int)StatementTypeEnum.IncomeStatement)
                            {

                                // to save Integrated Values in DataBase
                                foreach (IntegratedDatas integratedDatasObj in integratedDatasList)
                                {

                                    #region  //items before Gross margin Start 

                                    if (integratedDatasObj.LineItem.ToUpper().Contains("GROSS"))
                                    {
                                        KeyId = integratedDatasObj.Id;
                                        grossflag = true;
                                        int mulBy = 1;
                                        // save all the Values till GROSS margin                              
                                        foreach (IntegratedDatas obj in tillGrossMargin)
                                        {


                                            integratedDatasVM = new IntegratedDatasViewModel();
                                            integratedDatasVM = mapper.Map<IntegratedDatas, IntegratedDatasViewModel>(obj);
                                            integratedValuesList = new List<IntegratedValues>();

                                            // get the Data from Datas by Line item
                                            Datas MatchedDatas = currentStatmentListDatas.Find(x => x.LineItem == obj.LineItem);
                                            if (MatchedDatas != null && MatchedDatas.Values != null && MatchedDatas.Values.Count > 0)
                                            {
                                                if (revenueflag == true)
                                                {
                                                    if (costofsalesflag == false)
                                                        foreach (var syn in synonyms)
                                                        {
                                                            if (obj.LineItem.ToUpper() == syn.ToUpper())
                                                            {
                                                                costofsalesflag = true;

                                                                break;
                                                            }
                                                        }
                                                }

                                                integratedDatasVM.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    integratedValuesVM = new IntegratedValuesViewModel();
                                                    integratedValues = new IntegratedValues();
                                                    // match value for same year 
                                                    Values tempValue = MatchedDatas.Values.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    integratedValues.Id = 0;
                                                    integratedValues.Year = valueobj.Year;
                                                    integratedValues.IntegratedDatasId = obj.Id;
                                                    if (costofsalesflag == true && depreFlag == false)
                                                    {
                                                        if (Depreciation_datas != null && Depreciation_datas.Values != null && Depreciation_datas.Values.Count > 0)
                                                        {
                                                            Values depreciationValue = Depreciation_datas != null && Depreciation_datas.Values != null && Depreciation_datas.Values.Count > 0 ? Depreciation_datas.Values.Find(x => x.FilingDate.Contains(valueobj.Year)) : null;

                                                            integratedValues.Value = tempValue != null ? Convert.ToString(mulBy * (Convert.ToDouble(tempValue.Value) - (depreciationValue != null && !string.IsNullOrEmpty(depreciationValue.Value) ? Convert.ToDouble(depreciationValue.Value) : 0))) : null;
                                                        }
                                                        else
                                                            integratedValues.Value = tempValue != null ? Convert.ToString(mulBy * Convert.ToDouble(tempValue.Value)) : null;
                                                    }
                                                    else
                                                    {
                                                        integratedValues.Value = tempValue != null ? Convert.ToString(mulBy * Convert.ToDouble(tempValue.Value)) : null;
                                                    }

                                                    integratedValuesList.Add(integratedValues);

                                                    //add value to VM 
                                                    integratedDatasVM.IntegratedValuesVM.Add(mapper.Map<IntegratedValues, IntegratedValuesViewModel>(integratedValues));
                                                }
                                                iIntegratedValues.AddMany(integratedValuesList);
                                                iIntegratedValues.Commit();

                                                // add vm to list
                                                integratedDatasVMList.Add(integratedDatasVM);

                                                if (revenueflag == false)
                                                    foreach (var syn in synonyms)
                                                    {
                                                        if (obj.LineItem.ToUpper() == syn.ToUpper())
                                                        {
                                                            mulBy = -1;
                                                            revenueflag = true;
                                                            revenue_integratedDatas = obj;
                                                            revenue_integratedDatas.IntegratedValues = new List<IntegratedValues>();
                                                            revenue_integratedDatas.IntegratedValues = integratedValuesList;
                                                            // change revenue synonyms to cost of sales synonym
                                                            synonyms = new List<string>();
                                                            synonyms = Costofsalesynonyms.Split('%').ToList(); // convert comma seperated values to list
                                                            break;
                                                        }
                                                    }
                                                else if (costofsalesflag == true)
                                                {
                                                    costofSales_integratedDatas = obj;
                                                    costofSales_integratedDatas.IntegratedValues = new List<IntegratedValues>();
                                                    costofSales_integratedDatas.IntegratedValues = integratedValuesList;
                                                }

                                            }
                                        }
                                    }
                                    #endregion  //items before Gross margin end

                                    if (grossflag == false)
                                    {
                                        tillGrossMargin.Add(integratedDatasObj);
                                    } // for all the item start from Gross Magin to end
                                    else if (KeyId != 0)
                                    {
                                        integratedDatasVM = new IntegratedDatasViewModel();
                                        integratedDatasVM = mapper.Map<IntegratedDatas, IntegratedDatasViewModel>(integratedDatasObj);
                                        integratedValuesList = new List<IntegratedValues>();

                                        //items below Gross Margin
                                        if (integratedDatasObj.LineItem.ToUpper().Contains("GROSS"))
                                        {
                                            // get the Data from Datas by Line item
                                            //Datas MatchedDatas = currentStatmentListDatas.Find(x => x.LineItem == integratedDatasObj.LineItem);
                                            // if (MatchedDatas != null && MatchedDatas.Values != null && MatchedDatas.Values.Count > 0)
                                            // {
                                            integratedDatasVM.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                            foreach (IntegratedValues valueobj in dumyValuesList)
                                            {
                                                integratedValuesVM = new IntegratedValuesViewModel();
                                                integratedValues = new IntegratedValues();
                                                // match Gross Margin value for same year 
                                                //Values tempValue = MatchedDatas.Values.Find(x => x.FilingDate.Contains(valueobj.Year));

                                                //match revenue value for same year 
                                                IntegratedValues revenueValue = revenue_integratedDatas != null && revenue_integratedDatas.IntegratedValues != null && revenue_integratedDatas.integrated_ExplicitValues.Count > 0 ? revenue_integratedDatas.IntegratedValues.Find(x => x.Year == valueobj.Year) : null;
                                                //match Cost of sales value for same year 
                                                IntegratedValues costofsalesValue = costofSales_integratedDatas != null && costofSales_integratedDatas.IntegratedValues != null && costofSales_integratedDatas.integrated_ExplicitValues.Count > 0 ? costofSales_integratedDatas.IntegratedValues.Find(x => x.Year == valueobj.Year) : null;


                                                integratedValues.Id = 0;
                                                integratedValues.Year = valueobj.Year;
                                                integratedValues.IntegratedDatasId = integratedDatasObj.Id;
                                                double value = 0;

                                                value = ((revenueValue != null && !string.IsNullOrEmpty(revenueValue.Value) ? Convert.ToDouble(revenueValue.Value) : 0) + (costofsalesValue != null && !string.IsNullOrEmpty(costofsalesValue.Value) ? Convert.ToDouble(costofsalesValue.Value) : 0));
                                                //integratedValues.Value = tempValue != null ? tempValue.Value : null;

                                                integratedValues.Value = value.ToString("0.");

                                                integratedValuesList.Add(integratedValues);

                                                //add to VM                                            
                                                integratedDatasVM.IntegratedValuesVM.Add(mapper.Map<IntegratedValues, IntegratedValuesViewModel>(integratedValues));
                                            }
                                            iIntegratedValues.AddMany(integratedValuesList);
                                            iIntegratedValues.Commit();
                                            // }
                                        }
                                        else if ((integratedDatasObj.LineItem == "EBITDA") || (integratedDatasObj.LineItem == "EBITA") || (integratedDatasObj.LineItem == "EBIT") || (integratedDatasObj.LineItem == "EBT") || integratedDatasObj.LineItem == "NET INCOME before extraordinary items" || integratedDatasObj.LineItem == "NET INCOME after extraordinary items")
                                        {
                                            tillDatas = new List<IntegratedDatasViewModel>();
                                            tillDatas = integratedDatasVMList.FindAll(x => x.Id >= KeyId).ToList();
                                            KeyId = integratedDatasObj.Id;
                                            integratedDatasVM.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                            foreach (IntegratedValues valueobj in dumyValuesList)
                                            {
                                                integratedValuesVM = new IntegratedValuesViewModel();
                                                integratedValues = new IntegratedValues();
                                                integratedValues.Id = 0;
                                                integratedValues.Year = valueobj.Year;
                                                integratedValues.IntegratedDatasId = integratedDatasObj.Id;
                                                double value = 0;
                                                foreach (IntegratedDatasViewModel obj in tillDatas)
                                                {
                                                    IntegratedValuesViewModel valuesVM = obj.IntegratedValuesVM != null && obj.IntegratedValuesVM.Count > 0 ? obj.IntegratedValuesVM.Find(x => x.Year == valueobj.Year) : null;
                                                    value = value + (valuesVM != null && !string.IsNullOrEmpty(valuesVM.Value) ? Convert.ToDouble(valuesVM.Value) : 0);
                                                }
                                                integratedValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                integratedValuesList.Add(integratedValues);

                                                //add to VM                                            
                                                integratedDatasVM.IntegratedValuesVM.Add(mapper.Map<IntegratedValues, IntegratedValuesViewModel>(integratedValues));
                                            }
                                            iIntegratedValues.AddMany(integratedValuesList);
                                            iIntegratedValues.Commit();

                                        }
                                        else
                                        {
                                            int MulBy = 1;

                                            if ((integratedDatasObj.Category == "Non-Operating" || integratedDatasObj.Category == "Financing"  ) && (integratedDatasObj.LineItem.ToLower().Contains("Gains") || integratedDatasObj.LineItem.ToLower().Contains("income")))
                                            {
                                                MulBy = -1;
                                            }
                                            // get the Data from Datas by Line item
                                            Datas MatchedDatas = currentStatmentListDatas.Find(x => x.LineItem == integratedDatasObj.LineItem);
                                            if (MatchedDatas != null && MatchedDatas.Values != null && MatchedDatas.Values.Count > 0)
                                            {
                                                integratedDatasVM.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    integratedValuesVM = new IntegratedValuesViewModel();
                                                    integratedValues = new IntegratedValues();
                                                    // match value for same year 
                                                    Values tempValue = MatchedDatas.Values.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    integratedValues.Id = 0;
                                                    integratedValues.Year = valueobj.Year;
                                                    integratedValues.IntegratedDatasId = integratedDatasObj.Id;

                                                    integratedValues.Value = tempValue != null ? Convert.ToString(-1 * Convert.ToDouble(tempValue.Value) * MulBy) : null;
                                                    integratedValuesList.Add(integratedValues);

                                                    //add to VM                                            
                                                    integratedDatasVM.IntegratedValuesVM.Add(mapper.Map<IntegratedValues, IntegratedValuesViewModel>(integratedValues));
                                                }
                                                iIntegratedValues.AddMany(integratedValuesList);
                                                iIntegratedValues.Commit();
                                            }
                                            else if (integratedDatasObj.LineItem.ToLower().Contains("depreciation") && integratedDatasObj.Category == "Operating")
                                            {

                                                integratedDatasVM.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    integratedValuesVM = new IntegratedValuesViewModel();
                                                    integratedValues = new IntegratedValues();
                                                    // match value for same year 
                                                    Values tempValue = Depreciation_datas.Values.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    integratedValues.Id = 0;
                                                    integratedValues.Year = valueobj.Year;
                                                    integratedValues.IntegratedDatasId = integratedDatasObj.Id;

                                                    integratedValues.Value = tempValue != null ? Convert.ToString(-1 * Convert.ToDouble(tempValue.Value) * MulBy) : null;
                                                    integratedValuesList.Add(integratedValues);

                                                    //add to VM                                            
                                                    integratedDatasVM.IntegratedValuesVM.Add(mapper.Map<IntegratedValues, IntegratedValuesViewModel>(integratedValues));
                                                }
                                                iIntegratedValues.AddMany(integratedValuesList);
                                                iIntegratedValues.Commit();
                                            }
                                            else if (integratedDatasObj.LineItem.ToLower().Contains("amortization") && integratedDatasObj.Category == "Non-Operating")
                                            {

                                                integratedDatasVM.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    integratedValuesVM = new IntegratedValuesViewModel();
                                                    integratedValues = new IntegratedValues();
                                                    // match value for same year 
                                                    Values tempValue = Amortization_datas.Values.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    integratedValues.Id = 0;
                                                    integratedValues.Year = valueobj.Year;
                                                    integratedValues.IntegratedDatasId = integratedDatasObj.Id;

                                                    integratedValues.Value = tempValue != null ? Convert.ToString(-1 * Convert.ToDouble(tempValue.Value) * MulBy) : null;
                                                    integratedValuesList.Add(integratedValues);

                                                    //add to VM                                            
                                                    integratedDatasVM.IntegratedValuesVM.Add(mapper.Map<IntegratedValues, IntegratedValuesViewModel>(integratedValues));
                                                }
                                                iIntegratedValues.AddMany(integratedValuesList);
                                                iIntegratedValues.Commit();
                                            }

                                        }

                                        // add vm to list
                                        integratedDatasVMList.Add(integratedDatasVM);
                                    }
                                }


                                if (forcastRatioDatasList != null && forcastRatioDatasList.Count > 0)
                                {
                                    // to save Forcast Ratio Historical Values
                                    #region Save Forcast Ratio Historical
                                    List<ForcastRatioDatas> forcastRatioDatas = new List<ForcastRatioDatas>();
                                    bool forcastRevenue = false;
                                    List<ForcastRatioDatas> forcastratiotillrevenueDatas = new List<ForcastRatioDatas>();
                                    List<ForcastRatioValues> forcastRatioValuesList;
                                    ForcastRatioValues forcastratioValues;
                                    foreach (ForcastRatioDatas forcastRatioObj in forcastRatioDatasList)
                                    {
                                        if (forcastRevenue == false)
                                        {
                                            forcastratiotillrevenueDatas.Add(forcastRatioObj);
                                            // bind Lineitems till revenue then set forcastRevenue to true when Revenue found

                                            if (forcastRatioObj.LineItem == revenue_integratedDatas.LineItem + " YoY %")
                                                forcastRevenue = true;
                                            if (forcastRevenue == true)
                                            {
                                                foreach (ForcastRatioDatas forcastdatas in forcastratiotillrevenueDatas)
                                                {
                                                    IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.LineItem + " YoY %" == forcastdatas.LineItem);
                                                    if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                                    {
                                                        forcastRatioValuesList = new List<ForcastRatioValues>();
                                                        foreach (var obj in dumyValuesList)
                                                        {
                                                            forcastratioValues = new ForcastRatioValues();
                                                            forcastratioValues.Id = 0;
                                                            forcastratioValues.ForcastRatioDatasId = forcastdatas.Id;
                                                            forcastratioValues.Year = obj.Year;
                                                            double value = 0;

                                                            var prevValue = MatchedDatas.IntegratedValues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(obj.Year) - 1));
                                                            var currentValue = MatchedDatas.IntegratedValues.Find(x => x.Year == obj.Year);

                                                            value = prevValue != null && !string.IsNullOrEmpty(prevValue.Value) && prevValue.Value != "0" ? (((currentValue != null && !string.IsNullOrEmpty(currentValue.Value) ? Convert.ToDouble(currentValue.Value) : 0) - (prevValue != null && !string.IsNullOrEmpty(prevValue.Value) ? Convert.ToDouble(prevValue.Value) : 0)) / Convert.ToDouble(prevValue.Value)) * 100 : 0;

                                                            forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                            forcastRatioValuesList.Add(forcastratioValues);
                                                        }
                                                        // add to DB
                                                        iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                        iForcastRatioValues.Commit();

                                                    }
                                                }
                                                forcastratiotillrevenueDatas = new List<ForcastRatioDatas>();
                                            }
                                        }
                                        else
                                        {
                                            // for all the items except revenue and its childs
                                            if (forcastRatioObj.LineItem.Contains(" YoY %"))
                                            {
                                                IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.LineItem + " YoY %" == forcastRatioObj.LineItem);
                                                if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                                {
                                                    forcastRatioValuesList = new List<ForcastRatioValues>();
                                                    foreach (var obj in dumyValuesList)
                                                    {
                                                        forcastratioValues = new ForcastRatioValues();
                                                        forcastratioValues.Id = 0;
                                                        forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                        forcastratioValues.Year = obj.Year;
                                                        double value = 0;

                                                        var prevValue = MatchedDatas.IntegratedValues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(obj.Year) - 1));
                                                        var currentValue = MatchedDatas.IntegratedValues.Find(x => x.Year == obj.Year);
                                                        value = prevValue != null && !string.IsNullOrEmpty(prevValue.Value) && prevValue.Value != "0" ? (((currentValue != null && !string.IsNullOrEmpty(currentValue.Value) ? Convert.ToDouble(currentValue.Value) : 0) - (prevValue != null && !string.IsNullOrEmpty(prevValue.Value) ? Convert.ToDouble(prevValue.Value) : 0)) / Convert.ToDouble(prevValue.Value)) * 100 : 0;

                                                        forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        forcastRatioValuesList.Add(forcastratioValues);
                                                    }
                                                    // add to DB
                                                    iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                    iForcastRatioValues.Commit();
                                                }
                                            }
                                            else if (forcastRatioObj.LineItem.ToUpper().Contains("GROSS"))
                                            {
                                                // 100- % of COGS    
                                                // already calculated in case of Integrated costofSales_integratedDatas
                                                if (costofSales_integratedDatas != null && costofSales_integratedDatas.IntegratedValues != null && costofSales_integratedDatas.IntegratedValues.Count > 0)
                                                {
                                                    forcastRatioValuesList = new List<ForcastRatioValues>();
                                                    foreach (var obj in dumyValuesList)
                                                    {
                                                        forcastratioValues = new ForcastRatioValues();
                                                        forcastratioValues.Id = 0;
                                                        forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                        forcastratioValues.Year = obj.Year;
                                                        double value = 0;

                                                        var costofSalesValue = costofSales_integratedDatas.IntegratedValues.Find(x => x.Year == obj.Year);

                                                        value = 100 - ((costofSalesValue != null && !string.IsNullOrEmpty(costofSalesValue.Value) ? Convert.ToDouble(costofSalesValue.Value) : 0) * 100);

                                                        forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        forcastRatioValuesList.Add(forcastratioValues);
                                                    }
                                                    // add to DB
                                                    iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                    iForcastRatioValues.Commit();
                                                }

                                            }
                                            else if (forcastRatioObj.LineItem.Contains(" Margin %"))
                                            {
                                                IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.LineItem + " Margin %" == forcastRatioObj.LineItem);
                                                if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                                {
                                                    forcastRatioValuesList = new List<ForcastRatioValues>();
                                                    foreach (var obj in dumyValuesList)
                                                    {
                                                        forcastratioValues = new ForcastRatioValues();
                                                        forcastratioValues.Id = 0;
                                                        forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                        forcastratioValues.Year = obj.Year;
                                                        double value = 0;

                                                        var currentValue = MatchedDatas.IntegratedValues.Find(x => x.Year == obj.Year);
                                                        var revenueValue = revenue_integratedDatas != null && revenue_integratedDatas.IntegratedValues != null && revenue_integratedDatas.IntegratedValues.Count > 0 ? revenue_integratedDatas.IntegratedValues.Find(x => x.Year == obj.Year) : null;


                                                        value = revenueValue != null && !string.IsNullOrEmpty(revenueValue.Value) && revenueValue.Value != "0" ? ((currentValue != null && !string.IsNullOrEmpty(currentValue.Value) ? Convert.ToDouble(currentValue.Value) : 0) / Convert.ToDouble(revenueValue.Value)) * 100 : 0;

                                                        forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        forcastRatioValuesList.Add(forcastratioValues);
                                                    }
                                                    // add to DB
                                                    iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                    iForcastRatioValues.Commit();
                                                }
                                            }
                                            else if ((forcastRatioObj.LineItem.Contains(" % of Sales")))
                                            {
                                                IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.LineItem + " % of Sales" == forcastRatioObj.LineItem);
                                                if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                                {
                                                    forcastRatioValuesList = new List<ForcastRatioValues>();
                                                    foreach (var obj in dumyValuesList)
                                                    {
                                                        forcastratioValues = new ForcastRatioValues();
                                                        forcastratioValues.Id = 0;
                                                        forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                        forcastratioValues.Year = obj.Year;
                                                        double value = 0;

                                                        var currentValue = MatchedDatas.IntegratedValues.Find(x => x.Year == obj.Year);
                                                        var revenueValue = revenue_integratedDatas != null && revenue_integratedDatas.IntegratedValues != null && revenue_integratedDatas.IntegratedValues.Count > 0 ? revenue_integratedDatas.IntegratedValues.Find(x => x.Year == obj.Year) : null;

                                                        value = revenueValue != null && !string.IsNullOrEmpty(revenueValue.Value) && revenueValue.Value != "0" ? ((currentValue != null && !string.IsNullOrEmpty(currentValue.Value) ? Convert.ToDouble(currentValue.Value) : 0) / Convert.ToDouble(revenueValue.Value)) * 100 : 0;
                                                        value = -1 * value;
                                                        forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        forcastRatioValuesList.Add(forcastratioValues);
                                                    }
                                                    // add to DB
                                                    iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                    iForcastRatioValues.Commit();
                                                }
                                            }
                                            else if (forcastRatioObj.LineItem.ToUpper().Contains("DEPRECIATION"))
                                            {
                                                IntegratedDatas PropertyDatas = iIntegratedDatas.GetSingle(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && (x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())));
                                                List<IntegratedValues> PropertyValuesList = PropertyDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == PropertyDatas.Id).ToList() : null;

                                                IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.LineItem + " % of Net PP&E" == forcastRatioObj.LineItem);
                                                if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                                {
                                                    forcastRatioValuesList = new List<ForcastRatioValues>();
                                                    foreach (var obj in dumyValuesList)
                                                    {
                                                        forcastratioValues = new ForcastRatioValues();
                                                        forcastratioValues.Id = 0;
                                                        forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                        forcastratioValues.Year = obj.Year;
                                                        double value = 0;

                                                        var prevPropertyValue = PropertyValuesList != null && PropertyValuesList.Count > 0 ? PropertyValuesList.Find(x => x.Year == Convert.ToString(Convert.ToInt32(obj.Year) - 1)) : null;
                                                        var depreciation = MatchedDatas.IntegratedValues.Find(x => x.Year == obj.Year);


                                                        value = prevPropertyValue != null && !string.IsNullOrEmpty(prevPropertyValue.Value) && prevPropertyValue.Value != "0" ? ((depreciation != null && !string.IsNullOrEmpty(depreciation.Value) && depreciation.Value != "0" ? Convert.ToDouble(depreciation.Value) : 0) / Convert.ToDouble(prevPropertyValue.Value)) * 100 : 0;
                                                        value = -1 * value;
                                                        forcastratioValues.Value = prevPropertyValue != null ? Convert.ToString(Convert.ToDouble(value.ToString("0.##"))) : null;
                                                        forcastRatioValuesList.Add(forcastratioValues);
                                                    }
                                                    // add to DB
                                                    iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                    iForcastRatioValues.Commit();
                                                }

                                            }
                                            else if (forcastRatioObj.LineItem.ToUpper().Contains("AMORTIZATION"))

                                            {
                                                IntegratedDatas IntangibleDatas = iIntegratedDatas.GetSingle(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && (x.LineItem.ToLower().Contains(("Intangible Assets, Net").ToLower()) || x.LineItem.ToLower().Contains(("Trademarks").ToLower()) || x.LineItem.ToLower().Contains(("Purchased Intangible Assets").ToLower()) || x.LineItem.ToLower().Contains(("Purchased Intangible Assets").ToLower()) || x.LineItem.ToLower().Contains(("Other Intangible Assets").ToLower()) || x.LineItem.ToLower().Contains(("Intangible").ToLower()) || x.LineItem.ToLower().Contains(("Purchased and Other Intangibles").ToLower())));
                                                List<IntegratedValues> IntangibleValuesList = IntangibleDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == IntangibleDatas.Id).ToList() : null;

                                                IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.LineItem + " % of Net Intengible assets" == forcastRatioObj.LineItem);
                                                if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                                {
                                                    forcastRatioValuesList = new List<ForcastRatioValues>();
                                                    foreach (var obj in dumyValuesList)
                                                    {
                                                        forcastratioValues = new ForcastRatioValues();
                                                        forcastratioValues.Id = 0;
                                                        forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                        forcastratioValues.Year = obj.Year;
                                                        double value = 0;

                                                        var Intangible = IntangibleValuesList != null && IntangibleValuesList.Count > 0 ? IntangibleValuesList.Find(x => x.Year == Convert.ToString(Convert.ToInt32(obj.Year) - 1)) : null;
                                                        var amortization = MatchedDatas.IntegratedValues.Find(x => x.Year == obj.Year);


                                                        value = Intangible != null && !string.IsNullOrEmpty(Intangible.Value) && Intangible.Value != "0" ? ((amortization != null && !string.IsNullOrEmpty(amortization.Value) && amortization.Value != "0" ? Convert.ToDouble(amortization.Value) : 0) / Convert.ToDouble(Intangible.Value)) * 100 : 0;
                                                        value = -1 * value;
                                                        forcastratioValues.Value = Intangible != null ? Convert.ToString(Convert.ToDouble(value.ToString("0.##"))) : null;
                                                        forcastRatioValuesList.Add(forcastratioValues);
                                                    }
                                                    // add to DB
                                                    iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                    iForcastRatioValues.Commit();
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region // save  Integrated Explicit Value    
                                    var AllForcastRatio_explicitValuesList = iForcastRatio_ExplicitValues.FindBy(t => forcastRatioDatasList.Any(m => m.Id == t.ForcastRatioDatasId)).ToList();
                                    List<Integrated_ExplicitValues> calculatedExplicitValuesList;
                                    Integrated_ExplicitValues calculatedExplicitValues;

                                    foreach (IntegratedDatas integratedDatasObj in integratedDatasList)
                                    {
                                        if (integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id) != null)
                                            integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM = new List<Integrated_ExplicitValuesViewModel>();
                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();


                                        if (integratedDatasObj.Id <= revenue_integratedDatas.Id)
                                        {
                                            //calculate Revenue
                                            // find Forcast by IntegratedId
                                            ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.IntegratedDatasId == integratedDatasObj.Id);
                                            //save forcast ratio
                                            ForcastRatioDatas forcastrevenue = new ForcastRatioDatas();
                                            List<ForcastRatio_ExplicitValues> Revenue_ForcastExplicitList = new List<ForcastRatio_ExplicitValues>();
                                            forcastrevenue = iForcastRatioDatas.GetSingle(x => x.IntegratedDatasId == revenue_integratedDatas.Id);
                                            Revenue_ForcastExplicitList = forcastrevenue != null ? iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastrevenue.Id).ToList() : null;
                                            foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                            {
                                                //( Prev Year Value either Historical or Explicit )*( 1+'Hist Analysis &Forecast Ratios Sales Growth)
                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                double value = 0;
                                                // for Value
                                                var prevValue = calculatedExplicitValuesList != null && calculatedExplicitValuesList.Count > 0 ? calculatedExplicitValuesList.Find(x => x.Year.Contains(Convert.ToString(Convert.ToInt32(calculatedExplicitValues.Year) - 1))) : null;
                                                ForcastRatio_ExplicitValues forcastExplicitValue = AllForcastRatio_explicitValuesList != null && AllForcastRatio_explicitValuesList.Count > 0 ? AllForcastRatio_explicitValuesList.Find(x => x.ForcastRatioDatasId == forcasttempObj.Id && x.Year == calculatedExplicitValues.Year) : null;

                                                if (revenue_integratedDatas.Id == integratedDatasObj.Id && string.IsNullOrEmpty(forcastExplicitValue.Value))
                                                {
                                                    //special case for Revenue if revenue is null

                                                    double ForcastrevenueValue = 0;
                                                    //datasObj.integrated_ExplicitValues.Add();
                                                    List<IntegratedDatas> IntegratedTillRevenue = integratedDatasList.FindAll(x => x.Id <= revenue_integratedDatas.Id).ToList();
                                                    foreach (var tillObj in IntegratedTillRevenue)
                                                    {
                                                        Integrated_ExplicitValues item = tillObj.integrated_ExplicitValues != null && tillObj.integrated_ExplicitValues.Count > 0 ? tillObj.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;
                                                        ForcastrevenueValue = ForcastrevenueValue + (item != null && !string.IsNullOrEmpty(item.Value) ? Convert.ToDouble(item.Value) : 0);
                                                    }
                                                    value = ForcastrevenueValue;
                                                    if (prevValue != null)
                                                    {
                                                        ForcastrevenueValue = prevValue.Value != null ? (ForcastrevenueValue - Convert.ToDouble(prevValue.Value)) / (Convert.ToDouble(prevValue.Value)) * 100 : 0;
                                                    }
                                                    else
                                                    {
                                                        IntegratedValuesViewModel integratedval = integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).IntegratedValuesVM != null && integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).IntegratedValuesVM.Count > 0 ? integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).IntegratedValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;


                                                        ForcastrevenueValue = integratedval != null && !string.IsNullOrEmpty(integratedval.Value) && integratedval.Value != "0" ? (ForcastrevenueValue - Convert.ToDouble(integratedval.Value)) / (Convert.ToDouble(integratedval.Value)) * 100 : 0;
                                                    }

                                                    //save forcast revenue
                                                    ForcastRatio_ExplicitValues ForcastexplicitValue = Revenue_ForcastExplicitList.Find(x => x.Year == explicitvalue.Year);
                                                    if (ForcastexplicitValue != null)
                                                    {
                                                        ForcastexplicitValue.Value = Convert.ToString(Convert.ToDouble(ForcastrevenueValue.ToString("0."))); ;
                                                        iForcastRatio_ExplicitValues.Update
                                                            (ForcastexplicitValue);
                                                        iForcastRatio_ExplicitValues.Commit();
                                                    }
                                                }
                                                else
                                                {
                                                    if (prevValue != null)
                                                    {
                                                        value = prevValue.Value != null ? ((Convert.ToDouble(prevValue.Value)) * (1 + (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100)) : 0;
                                                        calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                    }
                                                    else
                                                    {
                                                        IntegratedValuesViewModel integratedval = integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).IntegratedValuesVM != null && integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).IntegratedValuesVM.Count > 0 ? integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).IntegratedValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                        value = integratedval != null && !string.IsNullOrEmpty(integratedval.Value) ? (Convert.ToDouble(integratedval.Value)) * (1 + (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100) : 0;
                                                        calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                    }

                                                }
                                                // add to explicit values
                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                //
                                                integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                            }
                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                            iIntegrated_ExplicitValues.Commit();
                                            if (integratedDatasObj.Id == revenue_integratedDatas.Id)
                                            {
                                                revenue_integratedDatas.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                revenue_integratedDatas.integrated_ExplicitValues = calculatedExplicitValuesList;
                                            }
                                        }//revenue end
                                        else if (integratedDatasObj.Id <= costofSales_integratedDatas.Id)
                                        {
                                            // calculate COGS  
                                            // find Forcast by IntegratedId
                                            ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.IntegratedDatasId == integratedDatasObj.Id);
                                            //for save Forcast COGS
                                            ForcastRatioDatas forcastCOGS = new ForcastRatioDatas();
                                            List<ForcastRatio_ExplicitValues> COGS_ForcastExplicitList = new List<ForcastRatio_ExplicitValues>();
                                            forcastCOGS = iForcastRatioDatas.GetSingle(x => x.IntegratedDatasId == costofSales_integratedDatas.Id);
                                            COGS_ForcastExplicitList = forcastCOGS != null ? iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastCOGS.Id).ToList() : null;
                                            foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                            {
                                                ///=(Net Sales of Same Year*'Hist Analysis &Forecast Ratios 'Cost of Sales)
                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                double value = 0;
                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                // for Value
                                                ForcastRatio_ExplicitValues forcastExplicitValue = AllForcastRatio_explicitValuesList != null && AllForcastRatio_explicitValuesList.Count > 0 ? AllForcastRatio_explicitValuesList.Find(x => x.ForcastRatioDatasId == forcasttempObj.Id && x.Year == calculatedExplicitValues.Year) : null;

                                                Integrated_ExplicitValues explicitRevenueValue = revenue_integratedDatas.integrated_ExplicitValues != null && revenue_integratedDatas.integrated_ExplicitValues.Count > 0 ? revenue_integratedDatas.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                if (integratedDatasObj.Id == costofSales_integratedDatas.Id && string.IsNullOrEmpty(forcastExplicitValue.Value))
                                                {
                                                    //special case for Revenue if revenue is null

                                                    double ForcastCOGSValue = 0;
                                                    //datasObj.integrated_ExplicitValues.Add();
                                                    List<IntegratedDatas> IntegratedTillCOGS = integratedDatasList.FindAll(x => x.Id <= revenue_integratedDatas.Id).ToList();
                                                    foreach (var tillObj in IntegratedTillCOGS)
                                                    {
                                                        Integrated_ExplicitValues item = tillObj.integrated_ExplicitValues != null && tillObj.integrated_ExplicitValues.Count > 0 ? tillObj.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;
                                                        ForcastCOGSValue = ForcastCOGSValue + (item != null && !string.IsNullOrEmpty(item.Value) ? Convert.ToDouble(item.Value) : 0);
                                                    }
                                                    //value=value-depreciation
                                                    value = ForcastCOGSValue;
                                                    ForcastCOGSValue = explicitRevenueValue.Value != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) && explicitRevenueValue.Value != "0" ? (ForcastCOGSValue) / (Convert.ToDouble(explicitRevenueValue.Value)) * 100 : 0;

                                                    //save forcast ratio
                                                    ForcastRatio_ExplicitValues ForcastexplicitValue = COGS_ForcastExplicitList != null && COGS_ForcastExplicitList.Count > 0 ? COGS_ForcastExplicitList.Find(x => x.Year == explicitvalue.Year) : null;
                                                    if (ForcastexplicitValue != null)
                                                    {
                                                        ForcastexplicitValue.Value = Convert.ToString(Convert.ToDouble(ForcastCOGSValue.ToString("0."))); ;
                                                        iForcastRatio_ExplicitValues.Update
                                                            (ForcastexplicitValue);
                                                        iForcastRatio_ExplicitValues.Commit();
                                                    }
                                                }
                                                else
                                                {
                                                    value = explicitRevenueValue.Value != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) ? ((Convert.ToDouble(explicitRevenueValue.Value)) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100 : 0;
                                                    value = -1 * value;
                                                }

                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));


                                                // add to explicit values
                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                //
                                                integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                            }
                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                            iIntegrated_ExplicitValues.Commit();
                                            if (integratedDatasObj.Id == costofSales_integratedDatas.Id)
                                            {
                                                costofSales_integratedDatas.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                costofSales_integratedDatas.integrated_ExplicitValues = calculatedExplicitValuesList;
                                            }
                                        }
                                        else
                                        {
                                            //all items other than  revenue
                                            if (integratedDatasObj.LineItem.ToUpper().Contains("GROSS"))
                                            {
                                                KeyId = integratedDatasObj.Id;
                                                //calculate Revenue
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    //( Prev Year Value either Historical or Explicit )*( 1+'Hist Analysis &Forecast Ratios Sales Growth)
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for Value

                                                    Integrated_ExplicitValues explicitRevenueValue = revenue_integratedDatas.integrated_ExplicitValues != null && revenue_integratedDatas.integrated_ExplicitValues.Count > 0 ? revenue_integratedDatas.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                    Integrated_ExplicitValues explicitCOGSValue = costofSales_integratedDatas.integrated_ExplicitValues != null && costofSales_integratedDatas.integrated_ExplicitValues.Count > 0 ? costofSales_integratedDatas.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                    double value = (explicitRevenueValue != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) ? Convert.ToDouble(explicitRevenueValue.Value) : 0) +
                                                         (explicitCOGSValue != null && !string.IsNullOrEmpty(explicitCOGSValue.Value) ? Convert.ToDouble(explicitCOGSValue.Value) : 0);
                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                    // add to explicit values
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    //
                                                    integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                            }
                                            else if ((integratedDatasObj.LineItem == "EBITDA") || (integratedDatasObj.LineItem == "EBITA") || (integratedDatasObj.LineItem == "EBIT") || (integratedDatasObj.LineItem == "EBT") || integratedDatasObj.LineItem == "NET INCOME before extraordinary items" || integratedDatasObj.LineItem == "NET INCOME after extraordinary items")
                                            {
                                                tillDatas = new List<IntegratedDatasViewModel>();
                                                tillDatas = KeyId != 0 ? integratedDatasVMList.FindAll(x => x.Id >= KeyId).ToList() : null;
                                                KeyId = integratedDatasObj.Id;
                                                //calculate Explicit Value
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for Value

                                                    Integrated_ExplicitValues explicitRevenueValue = revenue_integratedDatas.integrated_ExplicitValues != null && revenue_integratedDatas.integrated_ExplicitValues.Count > 0 ? revenue_integratedDatas.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                    Integrated_ExplicitValues explicitCOGSValue = costofSales_integratedDatas.integrated_ExplicitValues != null && costofSales_integratedDatas.integrated_ExplicitValues.Count > 0 ? costofSales_integratedDatas.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                    double value = 0;
                                                    foreach (IntegratedDatasViewModel obj in tillDatas)
                                                    {
                                                        Integrated_ExplicitValuesViewModel EXpvaluesVM = obj.Integrated_ExplicitValuesVM != null && obj.Integrated_ExplicitValuesVM.Count > 0 ? obj.Integrated_ExplicitValuesVM.Find(x => x.Year == explicitvalue.Year) : null;
                                                        value = value + (EXpvaluesVM != null && !string.IsNullOrEmpty(EXpvaluesVM.Value) ? Convert.ToDouble(EXpvaluesVM.Value) : 0);
                                                    }
                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                    // add to explicit values
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    //
                                                    integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();

                                            }
                                            else if (integratedDatasObj.LineItem.ToUpper().Contains("DEPRECIATION"))
                                            {
                                                int first = 0;
                                                IntegratedDatas PropertyDatas = iIntegratedDatas.GetSingle(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && (x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())));
                                                List<Integrated_ExplicitValues> propertyExpValuesList = PropertyDatas != null && PropertyDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == PropertyDatas.Id).ToList() : null;
                                                // find Forcast by IntegratedId
                                                ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.IntegratedDatasId == integratedDatasObj.Id);

                                                int i = 1;
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    ///=(Net Sales of Same Year*'Hist Analysis &Forecast Ratios 'Cost of Sales)
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    //calculate Depreciation
                                                    double value = 0;

                                                    ForcastRatio_ExplicitValues forcastExplicitValue = AllForcastRatio_explicitValuesList != null && AllForcastRatio_explicitValuesList.Count > 0 ? AllForcastRatio_explicitValuesList.Find(x => x.ForcastRatioDatasId == forcasttempObj.Id && x.Year == calculatedExplicitValues.Year) : null;

                                                    Integrated_ExplicitValues PropertyExplicitValue = propertyExpValuesList != null && propertyExpValuesList.Count > 0 ? propertyExpValuesList.Find(x => x.IntegratedDatasId == PropertyDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;


                                                    if (i == 1)
                                                    {

                                                        IntegratedValues propertyValue = PropertyDatas != null ? iIntegratedValues.GetSingle(x => x.IntegratedDatasId == PropertyDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;

                                                        value = ((propertyValue != null && !string.IsNullOrEmpty(propertyValue.Value) ? Convert.ToDouble(propertyValue.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                    }
                                                    else
                                                    {
                                                        value = ((PropertyExplicitValue != null && !string.IsNullOrEmpty(PropertyExplicitValue.Value) ? Convert.ToDouble(PropertyExplicitValue.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;
                                                    }
                                                    value = -1 * value;
                                                    calculatedExplicitValues.Value = value.ToString("0.");

                                                    // add to explicit values
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    //
                                                    integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                            }
                                            else if (integratedDatasObj.LineItem.ToUpper().Contains("AMORTIZATION") || integratedDatasObj.LineItem.ToUpper().Contains("EXTRAORDINARY ITEMS") || integratedDatasObj.LineItem.ToUpper().Contains("RESTRUCTURING"))
                                            {
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    ///=(Net Sales of Same Year*'Hist Analysis &Forecast Ratios 'Cost of Sales)
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;

                                                    // add to explicit values
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    //
                                                    integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                            }
                                            else if (integratedDatasObj.LineItem.ToUpper().Contains("PROVISION"))
                                            {
                                                // find Forcast by IntegratedId
                                                IntegratedDatasViewModel forcasttempObj = integratedDatasVMList.Find(x => x.LineItem == "EBT");
                                                TaxRates_IValuation tblTaxRatesObj = new TaxRates_IValuation();
                                                tblTaxRatesObj = iTaxRates_IValuation.GetSingle(x => x.InitialSetupId == InitialSetupId);

                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    ///=(Net Sales of Same Year*'Hist Analysis &Forecast Ratios 'Cost of Sales)
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for Value
                                                    ForcastRatio_ExplicitValues EBTExplicitValue = AllForcastRatio_explicitValuesList != null && AllForcastRatio_explicitValuesList.Count > 0 && forcasttempObj != null ? AllForcastRatio_explicitValuesList.Find(x => x.ForcastRatioDatasId == forcasttempObj.Id && x.Year == calculatedExplicitValues.Year) : null;

                                                    double value = ((tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) * (EBTExplicitValue != null && !string.IsNullOrEmpty(EBTExplicitValue.Value) ? Convert.ToDouble(EBTExplicitValue.Value) : 0)) / 100;

                                                    value = -1 * value;

                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));


                                                    // add to explicit values
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    //
                                                    integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                            }
                                            else if (integratedDatasObj.Category == "Operating")
                                            {
                                                // calculate Operating Explicit Values     
                                                // find Forcast by IntegratedId
                                                ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.IntegratedDatasId == integratedDatasObj.Id);

                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    ///=(Net Sales of Same Year*'Hist Analysis &Forecast Ratios 'Cost of Sales)
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for Value
                                                    ForcastRatio_ExplicitValues forcastExplicitValue = AllForcastRatio_explicitValuesList != null && AllForcastRatio_explicitValuesList.Count > 0 ? AllForcastRatio_explicitValuesList.Find(x => x.ForcastRatioDatasId == forcasttempObj.Id && x.Year == calculatedExplicitValues.Year) : null;

                                                    Integrated_ExplicitValues explicitRevenueValue = revenue_integratedDatas.integrated_ExplicitValues != null && revenue_integratedDatas.integrated_ExplicitValues.Count > 0 ? revenue_integratedDatas.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;


                                                    double value = explicitRevenueValue.Value != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) ? (Convert.ToDouble(explicitRevenueValue.Value)) * ((forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100) : 0;
                                                    value = -1 * value;
                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));


                                                    // add to explicit values
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    //
                                                    integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                            }
                                            else if (integratedDatasObj.Category == "Non-Operating"  || integratedDatasObj.Category == "Financing")
                                            {
                                                if (integratedDatasObj.LineItem.ToLower().Contains("Interest Income"))
                                                {
                                                    //write code to calculate Interest Income
                                                    CostOfCapital_IValuation costofCapital = InitialSetupId != null ? iCostOfCapital_IValuation.GetSingle(x => x.InitialSetupId == InitialSetupId) : null;
                                                    List<IntegratedDatas> DebtDatasList = new List<IntegratedDatas>();
                                                    DebtDatasList = InitialSetupId != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && x.LineItem.ToLower().Contains("debt")).ToList() : null;
                                                    List<IntegratedValues> DebtvaluesList = new List<IntegratedValues>();
                                                    DebtvaluesList = iIntegratedValues.FindBy(x => DebtDatasList.Any(m => m.Id == x.IntegratedDatasId) && x.Year == Convert.ToString(Convert.ToInt32(dumyexplicitValuesList.First().Year) - 1)).ToList();

                                                    //all year values are  same so we will calculate only once


                                                    double sumofdebtlastyear = 0;
                                                    double value = 0;

                                                    foreach (var debt in DebtvaluesList)
                                                    {
                                                        sumofdebtlastyear = sumofdebtlastyear + (!string.IsNullOrEmpty(debt.Value) ? Convert.ToDouble(debt.Value) : 0);
                                                    }
                                                    value = sumofdebtlastyear * (costofCapital != null && costofCapital.CostOfDebt != null ? Convert.ToDouble(costofCapital.CostOfDebt) / 100 : 0);


                                                    foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                    {
                                                        ///=('Hist Analysis &Forecast Ratios 'same line item)
                                                        calculatedExplicitValues = new Integrated_ExplicitValues();
                                                        calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;

                                                        calculatedExplicitValues.Year = explicitvalue.Year;
                                                        calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                        calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                        //
                                                        integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));


                                                    }

                                                }
                                                else if (integratedDatasObj.LineItem.ToLower().Contains("Interest Expense") || integratedDatasObj.LineItem.ToLower().Contains("Interest and Debt Expense") || integratedDatasObj.LineItem.ToLower().Contains("Interest and Other Expense"))
                                                {
                                                    //write code to calculate Interest Expense
                                                    CostOfCapital_IValuation costofCapital = InitialSetupId != null ? iCostOfCapital_IValuation.GetSingle(x => x.InitialSetupId == InitialSetupId) : null;
                                                    ForcastRatioDatas forcastRatioCashNcash = new ForcastRatioDatas();
                                                    List<ForcastRatio_ExplicitValues> cahnCashExplicitValuesList = new List<ForcastRatio_ExplicitValues>();
                                                    forcastRatioCashNcash = iForcastRatioDatas.GetSingle(x => (x.LineItem.ToLower().Contains("Cash and cash Equivalents") || x.LineItem.ToLower().Contains("Cash and Equivalents")) && x.InitialSetupId == InitialSetupId && x.Category == "Operating");
                                                    if (forcastRatioCashNcash != null)
                                                    {
                                                        cahnCashExplicitValuesList = iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastRatioCashNcash.Id).ToList();
                                                    }
                                                    else
                                                    {
                                                        //find by excess cash
                                                        // cahnCashExplicitValuesList = iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastRatioCashNcash.Id).ToList();
                                                    }
                                                    foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                    {
                                                        ///=('Hist Analysis &Forecast Ratios 'same line item)
                                                        calculatedExplicitValues = new Integrated_ExplicitValues();
                                                        calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                        calculatedExplicitValues.Year = explicitvalue.Year;
                                                        double value = 0;
                                                        // for Value
                                                        value = (costofCapital != null && costofCapital.RiskFreeRate != null ? Convert.ToDouble(costofCapital.RiskFreeRate) / 100 : 0) * (explicitvalue != null && !string.IsNullOrEmpty(explicitvalue.Value) ? Convert.ToDouble(explicitvalue.Value) : 0);
                                                        // add to explicit values
                                                        calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                        calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                        //
                                                        integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));



                                                    }


                                                }
                                                else
                                                {
                                                    //default for all the Non Operating items
                                                    // find Forcast by IntegratedId
                                                    ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.IntegratedDatasId == integratedDatasObj.Id);
                                                    foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                    {
                                                        ///=('Hist Analysis &Forecast Ratios 'same line item)
                                                        calculatedExplicitValues = new Integrated_ExplicitValues();
                                                        calculatedExplicitValues.IntegratedDatasId = integratedDatasObj.Id;
                                                        calculatedExplicitValues.Year = explicitvalue.Year;
                                                        double value = 0;

                                                        // add to explicit values
                                                        calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                        calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                        //
                                                        integratedDatasVMList.FirstOrDefault(x => x.Id == integratedDatasObj.Id).Integrated_ExplicitValuesVM.Add(mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(calculatedExplicitValues));
                                                    }
                                                }


                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                            }

                                        }
                                    }

                                    #endregion
                                }

                                #region Payout Policy ForcastRatio Historical

                                // get Value for PayoutPolicy
                                List<ForcastRatioDatas> DividendList = new List<ForcastRatioDatas>();
                                DividendList = iForcastRatioDatas.FindBy(x => x.StatementTypeId == (int)StatementTypeEnum.PayoutPolicyForcast && x.LineItem == "Dividend Payout Ratio %").OrderBy(x => x.Sequence).ToList();
                                if (DividendList != null && DividendList.Count > 0)
                                {
                                    var DividendForcastRatioValuesList = iForcastRatioValues.FindBy(t => DividendList.Any(m => m.Id == t.ForcastRatioDatasId)).ToList();
                                    if (DividendForcastRatioValuesList != null && DividendForcastRatioValuesList.Count > 0)
                                    {
                                        // update only two Values
                                        //"Dividend Payout Ratio %"
                                        IntegratedDatas incomeafter_Incoomestmt = iIntegratedDatas.GetSingle(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement && x.LineItem == "NET INCOME after extraordinary items" && x.InitialSetupId == InitialSetupId);
                                        List<IntegratedValues> incomeafter_ValuesList = incomeafter_Incoomestmt != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == incomeafter_Incoomestmt.Id).ToList() : null;
                                        List<PayoutPolicy_IValuation> payoutList = new List<PayoutPolicy_IValuation>();
                                        payoutList = iPayoutPolicy_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                                        int i = 1;
                                        if (incomeafter_ValuesList != null && incomeafter_ValuesList.Count > 0)
                                            foreach (var item in DividendList)
                                            {
                                                ForcastRatioValues forcastRatioValues;
                                                List<ForcastRatioValues> forcastRatioValuesList = new List<ForcastRatioValues>();

                                                if (i == 1)
                                                {
                                                    //find Total Ongoing Dividend Payout - Annual                                                
                                                    //calculate Dividend Payout Ratio % of Ongoing Dividends
                                                    foreach (var incomeafteritem in incomeafter_ValuesList)
                                                    {
                                                        forcastRatioValues = new ForcastRatioValues();
                                                        forcastRatioValues.Year = incomeafteritem.Year;
                                                        forcastRatioValues.Id = 0;
                                                        forcastRatioValues.ForcastRatioDatasId = item.Id;
                                                        double value = 0;
                                                        //calculate value
                                                        //find same year value of total ongoing && incomeafter
                                                        var toalValue = payoutList != null && payoutList.Count > 0 ? payoutList.Find(x => x.Year == Convert.ToInt32(incomeafteritem.Year)) : null;
                                                        var incomeafterValue = incomeafter_ValuesList != null && incomeafter_ValuesList.Count > 0 ? incomeafter_ValuesList.Find(x => x.Year == incomeafteritem.Year) : null;

                                                        value = incomeafterValue != null && !string.IsNullOrEmpty(incomeafterValue.Value) && incomeafterValue.Value != "0" ? ((toalValue != null && !string.IsNullOrEmpty(toalValue.TotalAnnualDividendPayout) ? Convert.ToDouble(toalValue.TotalAnnualDividendPayout) : 0) / Convert.ToDouble(incomeafterValue.Value)) : 0;

                                                        forcastRatioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        forcastRatioValuesList.Add(forcastRatioValues);
                                                    }


                                                    i = 2;
                                                }
                                                else
                                                {
                                                    //calculate Dividend Payout Ratio % of One Time Dividend
                                                    foreach (var incomeafteritem in incomeafter_ValuesList)
                                                    {
                                                        forcastRatioValues = new ForcastRatioValues();
                                                        forcastRatioValues.Year = incomeafteritem.Year;
                                                        forcastRatioValues.Id = 0;
                                                        forcastRatioValues.ForcastRatioDatasId = item.Id;
                                                        double value = 0;
                                                        //calculate value
                                                        //find same year value of total ongoing && incomeafter
                                                        var toalValue = payoutList != null && payoutList.Count > 0 ? payoutList.Find(x => x.Year == Convert.ToInt32(incomeafteritem.Year)) : null;
                                                        var incomeafterValue = incomeafter_ValuesList != null && incomeafter_ValuesList.Count > 0 ? incomeafter_ValuesList.Find(x => x.Year == incomeafteritem.Year) : null;

                                                        value = incomeafterValue != null && !string.IsNullOrEmpty(incomeafterValue.Value) && incomeafterValue.Value != "0" ? ((toalValue != null && !string.IsNullOrEmpty(toalValue.OneTimeDividendPayout) ? Convert.ToDouble(toalValue.OneTimeDividendPayout) : 0) / Convert.ToDouble(incomeafterValue.Value)) : 0;

                                                        forcastRatioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        forcastRatioValuesList.Add(forcastRatioValues);
                                                    }

                                                }

                                                // (delete and add new ) or update 
                                                iForcastRatioValues.DeleteMany(DividendForcastRatioValuesList);
                                                iForcastRatioValues.Commit();

                                                //add new 
                                                iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                iForcastRatioValues.Commit();

                                            }
                                    }
                                }

                                #endregion



                                #region Retained Earning Statement


                                // get Retained Earing Values
                                //IntegratedDatas retained_BeginningDatas = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "RETAINED EARNINGS (BEGINNING YEAR)");
                                //IntegratedDatas retained_NetIncome = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "Net Income");
                                //IntegratedDatas retained_Dividendpaid = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "Dividends Paid");
                                //IntegratedDatas retained_EndYearDatas = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "RETAINED EARNINGS (END YEAR)");
                                //// retained earning or its synonyms
                                //IntegratedDatas retained_Earning_BalanceSheet = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem.ToUpper() == "RETAINED EARNINGS" || x.LineItem.ToLower() == "accumulated deficit");
                                //IntegratedDatas NetIncomeAfter_IncomeStatement = iIntegratedDatas.GetSingle(x => x.InitialSetupId == initialSetupId && x.LineItem == "NET INCOME after extraordinary items");
                                //// for dividend 
                                //ForcastRatioFilingsViewModel ForcastRatioFilingsPPObj = null;
                                //if (ForcastRatioFilingsvmList.Exists(x => x.StatementType == "PAYOUT POLIOCY FORECAST"))
                                //{
                                //    ForcastRatioFilingsPPObj = ForcastRatioFilingsvmList.Find(x => x.StatementType == "PAYOUT POLIOCY FORECAST");
                                //}

                                //List<ForcastRatioDatasViewModel> forcast_Totat_OngoingDividendListVm = ForcastRatioFilingsPPObj != null ? ForcastRatioFilingsPPObj.ForcastRatioDatasVM.FindAll(x => x.LineItem.ToUpper().Contains("TOTAL ONGOING DIVIDEND PAYOUT")) : null;
                                //List<ForcastRatioDatasViewModel> OneTimeDividendListVM = ForcastRatioFilingsPPObj != null ? ForcastRatioFilingsPPObj.ForcastRatioDatasVM.FindAll(x => x.LineItem.ToUpper().Contains("ONE TIME DIVIDEND PAYOUT")) : null;
                                //List<ForcastRatioDatasViewModel> DividendPayoutratioListVM = ForcastRatioFilingsPPObj != null ? ForcastRatioFilingsPPObj.ForcastRatioDatasVM.FindAll(x => x.LineItem.ToUpper().Contains("DIVIDEND PAYOUT RATIO")) : null;
                                ////List<Integrated_ExplicitValues>  calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                //ForcastRatioDatasViewModel forcast_Totat_OngoingDividendVm = forcast_Totat_OngoingDividendListVm != null ? forcast_Totat_OngoingDividendListVm.OrderByDescending(x => x.Sequence).First() : null;
                                //ForcastRatioDatasViewModel OneTimeDividendVM = OneTimeDividendListVM != null ? OneTimeDividendListVM.OrderByDescending(x => x.Sequence).First() : null;

                                //ForcastRatioDatasViewModel DividendPayoutratioVM = DividendPayoutratioListVM != null ? DividendPayoutratioListVM.OrderBy(x => x.Sequence).First() : null;

                                //List<Integrated_ExplicitValues> NetIncomeAfter_ExplicitValuesList = NetIncomeAfter_IncomeStatement != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == NetIncomeAfter_IncomeStatement.Id).ToList() : null;
                                //List<IntegratedValues> retained_Earning_BalanceValuesListObj = retained_Earning_BalanceSheet != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == retained_Earning_BalanceSheet.Id).ToList() : null;

                                //if (retained_BeginningDatas != null)
                                //{
                                //    int i = 1;
                                //    foreach (Integrated_ExplicitValues expValue in explicitValuesList)
                                //    {
                                //        try
                                //        {
                                //            calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();

                                //            // beginning year
                                //            Integrated_ExplicitValues beginningYear_Explicit = new Integrated_ExplicitValues();
                                //            beginningYear_Explicit.Year = expValue.Year;
                                //            beginningYear_Explicit.Id = expValue.Id;
                                //            beginningYear_Explicit.IntegratedDatasId = retained_BeginningDatas.Id;
                                //            double value = 0;
                                //            if (i == 1)
                                //            {
                                //                //calculate for 1st explicit year
                                //                var PrevYearValue = retained_Earning_BalanceValuesListObj != null ? retained_Earning_BalanceValuesListObj.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                //                value = PrevYearValue != null && !string.IsNullOrEmpty(PrevYearValue.Value) ? Convert.ToDouble(PrevYearValue.Value) : 0;
                                //                beginningYear_Explicit.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                //                calculatedExplicitValuesList.Add(beginningYear_Explicit);
                                //            }
                                //            else
                                //            {
                                //                // get prev year value of Retained Earning  End Year
                                //                Integrated_ExplicitValues integratedExplicitValue = retained_EndYearDatas != null ? iIntegrated_ExplicitValues.GetSingle(x => x.IntegratedDatasId == retained_EndYearDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                //                //calculate for other than 1st explicit year
                                //                beginningYear_Explicit.Value = integratedExplicitValue != null && !string.IsNullOrEmpty(integratedExplicitValue.Value) ? integratedExplicitValue.Value : null;
                                //                calculatedExplicitValuesList.Add(beginningYear_Explicit);
                                //            }
                                //            //Net income
                                //            Integrated_ExplicitValues NetIncome_ExplicitValue = new Integrated_ExplicitValues();
                                //            NetIncome_ExplicitValue.Year = expValue.Year;
                                //            NetIncome_ExplicitValue.Id = expValue.Id;
                                //            NetIncome_ExplicitValue.IntegratedDatasId = retained_NetIncome.Id;

                                //            Integrated_ExplicitValues IncomeAfter = NetIncomeAfter_ExplicitValuesList != null && NetIncomeAfter_ExplicitValuesList.Count > 0 ? NetIncomeAfter_ExplicitValuesList.Find(x => x.Year == expValue.Year) : null;
                                //            NetIncome_ExplicitValue.Value = IncomeAfter != null && !string.IsNullOrEmpty(IncomeAfter.Value) ? IncomeAfter.Value : null;
                                //            calculatedExplicitValuesList.Add(NetIncome_ExplicitValue);

                                //            // Dividend paid                                                
                                //            Integrated_ExplicitValues Dividend_ExplicitValue = new Integrated_ExplicitValues();
                                //            Dividend_ExplicitValue.Year = expValue.Year;
                                //            Dividend_ExplicitValue.Id = expValue.Id;
                                //            Dividend_ExplicitValue.IntegratedDatasId = retained_Dividendpaid.Id;
                                //            double dividendValue = 0;
                                //            //value
                                //            if (i == 1)
                                //            {
                                //                // Total Ongoing Dividend Payout -Annual + One Time Dividend Payout
                                //                ForcastRatioValuesViewModel Total_Ongoing = forcast_Totat_OngoingDividendVm != null && forcast_Totat_OngoingDividendVm.ForcastRatioValuesVM != null && forcast_Totat_OngoingDividendVm.ForcastRatioValuesVM.Count > 0 ? forcast_Totat_OngoingDividendVm.ForcastRatioValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                //                ForcastRatioValuesViewModel one_TimeDividend = OneTimeDividendVM != null && OneTimeDividendVM.ForcastRatioValuesVM != null && OneTimeDividendVM.ForcastRatioValuesVM.Count > 0 ? OneTimeDividendVM.ForcastRatioValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                //                dividendValue = (Total_Ongoing != null && !string.IsNullOrEmpty(Total_Ongoing.Value) ? Convert.ToDouble(Total_Ongoing.Value) : 0) +
                                //                   (one_TimeDividend != null && !string.IsNullOrEmpty(one_TimeDividend.Value) ? Convert.ToDouble(one_TimeDividend.Value) : 0);
                                //                Dividend_ExplicitValue.Value = Convert.ToString(Convert.ToDouble(dividendValue.ToString("0.")));
                                //                i = 2;
                                //            }
                                //            else
                                //            {
                                //                // Total Ongoing Dividend Payout -Annual + One Time Dividend Payout
                                //                ForcastRatio_ExplicitValuesViewModel DividendPayout = DividendPayoutratioVM != null && DividendPayoutratioVM.ForcastRatio_ExplicitValuesVM != null && DividendPayoutratioVM.ForcastRatio_ExplicitValuesVM.Count > 0 ? DividendPayoutratioVM.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                //                Integrated_ExplicitValues NetIncomeAfter = NetIncomeAfter_ExplicitValuesList != null && NetIncomeAfter_ExplicitValuesList.Count > 0 ? NetIncomeAfter_ExplicitValuesList.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;

                                //                // ForcastRatio_ExplicitValuesViewModel Total_Ongoing = forcast_Totat_OngoingDividendVm != null && forcast_Totat_OngoingDividendVm.ForcastRatio_ExplicitValuesVM != null && forcast_Totat_OngoingDividendVm.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcast_Totat_OngoingDividendVm.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                //                ForcastRatio_ExplicitValuesViewModel one_TimeDividend = OneTimeDividendVM != null && OneTimeDividendVM.ForcastRatio_ExplicitValuesVM != null && OneTimeDividendVM.ForcastRatio_ExplicitValuesVM.Count > 0 ? OneTimeDividendVM.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                //                dividendValue = ((DividendPayout != null && !string.IsNullOrEmpty(DividendPayout.Value) ? Convert.ToDouble(DividendPayout.Value) / 100 : 0) * (NetIncomeAfter != null && !string.IsNullOrEmpty(NetIncomeAfter.Value) ? Convert.ToDouble(NetIncomeAfter.Value) : 0)) +
                                //                   (one_TimeDividend != null && !string.IsNullOrEmpty(one_TimeDividend.Value) ? Convert.ToDouble(one_TimeDividend.Value) : 0);
                                //                Dividend_ExplicitValue.Value = Convert.ToString(Convert.ToDouble(dividendValue.ToString("0.")));

                                //            }
                                //            calculatedExplicitValuesList.Add(Dividend_ExplicitValue);

                                //            //  Retained Earning  End Year                                            
                                //            Integrated_ExplicitValues RetainedEndYear_ExplicitValue = new Integrated_ExplicitValues();
                                //            RetainedEndYear_ExplicitValue.Year = expValue.Year;
                                //            RetainedEndYear_ExplicitValue.Id = expValue.Id;
                                //            RetainedEndYear_ExplicitValue.IntegratedDatasId = retained_EndYearDatas.Id;
                                //            double endYear_Value = 0;
                                //            //value
                                //            foreach (var item in calculatedExplicitValuesList)
                                //            {
                                //                endYear_Value = endYear_Value + (item != null && (!string.IsNullOrEmpty(item.Value)) ? Convert.ToDouble(item.Value) : 0);
                                //            }
                                //            RetainedEndYear_ExplicitValue.Value = Convert.ToString(Convert.ToDouble(endYear_Value.ToString("0.")));
                                //            calculatedExplicitValuesList.Add(RetainedEndYear_ExplicitValue);

                                //            // add to database
                                //            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                //            iIntegrated_ExplicitValues.Commit();
                                //        }
                                //        catch (Exception ss)
                                //        {
                                //            return BadRequest(new { message = "Issue occured in Retained Earning Calculations " + "for year " + expValue.Year + ForcastRatioFilingsObj.StatementType, status = 400, result = false });

                                //        }
                                //    }
                                //}
                                #endregion

                                #region Reorganized delete and Recalculate
                                SaveReorganizedData(InitialSetup_IValuationObj.UserId, InitialSetup_IValuationObj.CIKNumber, InitialSetup_IValuationObj.YearFrom, InitialSetup_IValuationObj.YearTo);

                                #endregion


                            }
                            #endregion
                            else if (StatementTypeId == (int)StatementTypeEnum.BalanceSheet)
                            {
                                // code for balance sheet
                                // to save Integrated Values in DataBase for Balance Sheet
                                foreach (IntegratedDatas integratedDatasObj in integratedDatasList)
                                {
                                    integratedValuesList = new List<IntegratedValues>();
                                    integratedDatasObj.IntegratedValues = new List<IntegratedValues>();
                                    // get the Data from Datas by Line item
                                    Datas MatchedDatas = currentStatmentListDatas.Find(x => x.LineItem == integratedDatasObj.LineItem);
                                    if (MatchedDatas != null && MatchedDatas.Values != null && MatchedDatas.Values.Count > 0)
                                    {
                                        foreach (IntegratedValues valueobj in dumyValuesList)
                                        {
                                            integratedValuesVM = new IntegratedValuesViewModel();
                                            integratedValues = new IntegratedValues();
                                            // match value for same year 
                                            Values tempValue = MatchedDatas.Values.Find(x => x.FilingDate.Contains(valueobj.Year));
                                            integratedValues.Id = 0;
                                            integratedValues.Year = valueobj.Year;
                                            integratedValues.IntegratedDatasId = integratedDatasObj.Id;
                                            integratedValues.Value = tempValue != null ? tempValue.Value : null;
                                            integratedValuesList.Add(integratedValues);
                                        }
                                        iIntegratedValues.AddMany(integratedValuesList);
                                        iIntegratedValues.Commit();
                                        integratedDatasObj.IntegratedValues = integratedValuesList;
                                    }
                                }


                                // save Forcastratio Historical Data for Balance Sheet
                                revenue_integratedDatas = iIntegratedDatas.GetSingle(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement && (x.LineItem.ToLower().Contains(("Net Sales").ToLower()) || x.LineItem.ToLower().Contains(("Net Revenue").ToLower()) || x.LineItem.ToLower().Contains(("Revenue").ToLower()) || x.LineItem.ToLower().Contains(("Total Revenues").ToLower()) || x.LineItem.ToLower().Contains(("Sales").ToLower()) || x.LineItem.ToLower().Contains(("Total Net Revenue").ToLower()) || x.LineItem.ToLower().Contains(("Total revenue").ToLower()) || x.LineItem.ToLower().Contains(("Total net sales").ToLower()) || x.LineItem.ToLower().Contains(("Sales to customers").ToLower())));
                                //"Net Sales,Net Revenue,Revenue,Total Revenues,Sales,Total Net Revenue,Total revenue,Total net sales,Sales to customers";

                                costofSales_integratedDatas = iIntegratedDatas.GetSingle(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement && (x.LineItem.ToLower().Contains(("Cost of sales").ToLower()) || x.LineItem.ToLower().Contains(("COGS").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Goods Sold").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Revenue").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Products Sold").ToLower()) || x.LineItem.ToLower().Contains(("in case of multilple revenue instances").ToLower()) || x.LineItem.ToLower().Contains(("Total cost of revenue").ToLower()) || x.LineItem.ToLower().Contains(("Cost of " + @"""Revenue Type""" + " - in case of multilple revenue instances").ToLower())));

                                //"Cost of sales,COGS,Cost of Goods Sold,Cost of Revenue,Cost of Products Sold, Cost of " + @"""Revenue Type""" + " - in case of multilple revenue instances,Total cost of revenue";

                                List<IntegratedValues> revenue_CoGSValuesList = iIntegratedValues.FindBy(x => x.IntegratedDatasId == revenue_integratedDatas.Id || x.IntegratedDatasId == costofSales_integratedDatas.Id).ToList();

                                // to save Forcast Ratio Historical Values
                                if (forcastRatioDatasList != null && forcastRatioDatasList.Count > 0)
                                {
                                    // to save Forcast Ratio Historical Values
                                    List<ForcastRatioDatas> forcastRatioDatas = new List<ForcastRatioDatas>();
                                    List<ForcastRatioDatas> forcastratiotillrevenueDatas = new List<ForcastRatioDatas>();
                                    List<ForcastRatioValues> forcastRatioValuesList;
                                    ForcastRatioValues forcastratioValues;
                                    foreach (ForcastRatioDatas forcastRatioObj in forcastRatioDatasList)
                                    {
                                        forcastRatioValuesList = new List<ForcastRatioValues>();
                                        if (forcastRatioObj.LineItem.Contains("Cash and Cash Equivalents") || forcastRatioObj.LineItem.Contains("Cash and Equivalents"))
                                        {
                                            IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.Id == forcastRatioObj.IntegratedDatasId);
                                            if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                            {
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    forcastratioValues = new ForcastRatioValues();
                                                    // match value for same year 
                                                    IntegratedValues tempValue = MatchedDatas.IntegratedValues.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    forcastratioValues.Id = 0;
                                                    forcastratioValues.Year = valueobj.Year;
                                                    forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                    forcastratioValues.Value = tempValue != null ? tempValue.Value : null;
                                                    forcastRatioValuesList.Add(forcastratioValues);
                                                }
                                                iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                iForcastRatioValues.Commit();
                                            }
                                            else
                                            {
                                                //Calculate by Excess cash & Operating Cash
                                                IntegratedDatas ExcessCashDatas = integratedDatasList.Find(x => x.LineItem.Contains("(Excess Cash)"));
                                                IntegratedDatas OpaeratingCashDatas = integratedDatasList.Find(x => x.LineItem.Contains("(Operating Cash)"));
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    forcastratioValues = new ForcastRatioValues();
                                                    // match value for same year 
                                                    IntegratedValues ExcessValue = ExcessCashDatas != null && ExcessCashDatas.IntegratedValues != null && ExcessCashDatas.IntegratedValues.Count > 0 ? ExcessCashDatas.IntegratedValues.Find(x => x.Year == (valueobj.Year)) : null;
                                                    IntegratedValues OperatingValue = OpaeratingCashDatas != null && OpaeratingCashDatas.IntegratedValues != null && OpaeratingCashDatas.IntegratedValues.Count > 0 ? OpaeratingCashDatas.IntegratedValues.Find(x => x.Year == (valueobj.Year)) : null;
                                                    forcastratioValues.Id = 0;
                                                    forcastratioValues.Year = valueobj.Year;
                                                    forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                    double value = 0;
                                                    value = (ExcessValue != null && !string.IsNullOrEmpty(ExcessValue.Value) ? Convert.ToDouble(ExcessValue.Value) : 0) + (OperatingValue != null && !string.IsNullOrEmpty(OperatingValue.Value) ? Convert.ToDouble(OperatingValue.Value) : 0);
                                                    forcastratioValues.Value = value.ToString("0.");
                                                    forcastRatioValuesList.Add(forcastratioValues);
                                                }
                                                iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                iForcastRatioValues.Commit();
                                            }

                                        }
                                        else
                                        if (forcastRatioObj.LineItem.Contains("Operating Cash") || forcastRatioObj.LineItem.Contains("Excess Cash") || forcastRatioObj.LineItem.ToUpper().Contains("CURRENT LIABILITIES") || forcastRatioObj.LineItem.ToUpper().Contains("CURRENT LIABILITY") || forcastRatioObj.LineItem.ToUpper().Contains("TOTAL LIABILITY") || forcastRatioObj.LineItem.ToUpper().Contains("TOTAL LIABILITIES") || forcastRatioObj.LineItem.ToUpper().Contains("TOTAL STOCKHOLDER") || forcastRatioObj.LineItem.ToUpper().Contains("TOTAL EQUITY") || forcastRatioObj.LineItem.ToUpper().Contains("TEMPORATY EQUITY AND STOCKHOLDER") || forcastRatioObj.LineItem.ToUpper().Contains("TOTAL LIABILITIES AND STOCKHOLDER"))
                                        {
                                            IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.Id == forcastRatioObj.IntegratedDatasId);
                                            if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                            {
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    forcastratioValues = new ForcastRatioValues();
                                                    // match value for same year 
                                                    IntegratedValues tempValue = MatchedDatas.IntegratedValues.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    forcastratioValues.Id = 0;
                                                    forcastratioValues.Year = valueobj.Year;
                                                    forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                    forcastratioValues.Value = tempValue != null ? tempValue.Value : null;
                                                    forcastRatioValuesList.Add(forcastratioValues);
                                                }
                                                iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                iForcastRatioValues.Commit();
                                            }
                                        }
                                        else if (forcastRatioObj.LineItem.Contains("Cash Needed for Operations (Working Capital)") || forcastRatioObj.IsParentItem == true)
                                        {
                                            foreach (IntegratedValues valueobj in dumyValuesList)
                                            {
                                                forcastratioValues = new ForcastRatioValues();
                                                forcastratioValues.Id = 0;
                                                forcastratioValues.Year = valueobj.Year;
                                                forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                forcastratioValues.Value = valueobj.Value;
                                                forcastRatioValuesList.Add(forcastratioValues);
                                            }
                                            iForcastRatioValues.AddMany(forcastRatioValuesList);
                                            iForcastRatioValues.Commit();
                                        }
                                        else if (forcastRatioObj.LineItem.Contains(" % of Sales"))
                                        {
                                            IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.Id == forcastRatioObj.IntegratedDatasId);
                                            if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                            {
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    forcastratioValues = new ForcastRatioValues();
                                                    // match value for same year 
                                                    IntegratedValues currentValue = MatchedDatas.IntegratedValues.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    forcastratioValues.Id = 0;
                                                    forcastratioValues.Year = valueobj.Year;
                                                    forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                    double value = 0;
                                                    var revenueValue = revenue_CoGSValuesList != null && revenue_CoGSValuesList.Count > 0 ? revenue_CoGSValuesList.Find(x => x.Year == valueobj.Year && x.IntegratedDatasId == revenue_integratedDatas.Id) : null;


                                                    value = revenueValue != null && !string.IsNullOrEmpty(revenueValue.Value) && revenueValue.Value != "0" ? ((currentValue != null && !string.IsNullOrEmpty(currentValue.Value) ? Convert.ToDouble(currentValue.Value) : 0) / Convert.ToDouble(revenueValue.Value)) * 100 : 0;

                                                    forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                    forcastRatioValuesList.Add(forcastratioValues);
                                                }
                                                iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                iForcastRatioValues.Commit();
                                            }

                                        }
                                        else if (forcastRatioObj.LineItem.Contains(" % of COGS"))
                                        {
                                            IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.Id == forcastRatioObj.IntegratedDatasId);
                                            if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                            {
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    forcastratioValues = new ForcastRatioValues();
                                                    // match value for same year 
                                                    IntegratedValues currentValue = MatchedDatas.IntegratedValues.Find(x => x.FilingDate.Contains(valueobj.Year));
                                                    forcastratioValues.Id = 0;
                                                    forcastratioValues.Year = valueobj.Year;
                                                    forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                    double value = 0;
                                                    var costofSalesValue = revenue_CoGSValuesList != null && revenue_CoGSValuesList.Count > 0 ? revenue_CoGSValuesList.Find(x => x.Year == valueobj.Year && x.IntegratedDatasId == costofSales_integratedDatas.Id) : null;

                                                    value = costofSalesValue != null && !string.IsNullOrEmpty(costofSalesValue.Value) && costofSalesValue.Value != "0" ? ((currentValue != null && !string.IsNullOrEmpty(currentValue.Value) ? Convert.ToDouble(currentValue.Value) : 0) / Convert.ToDouble(costofSalesValue.Value)) * 100 : 0;
                                                    value = -1 * value;
                                                    forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                    forcastRatioValuesList.Add(forcastratioValues);
                                                }
                                                iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                iForcastRatioValues.Commit();
                                            }
                                        }
                                        else if (forcastRatioObj.LineItem.ToUpper().Contains(" YoY %"))
                                        {
                                            IntegratedDatas MatchedDatas = integratedDatasList.Find(x => x.Id == forcastRatioObj.IntegratedDatasId);
                                            if (MatchedDatas != null && MatchedDatas.IntegratedValues != null && MatchedDatas.IntegratedValues.Count > 0)
                                            {
                                                foreach (IntegratedValues valueobj in dumyValuesList)
                                                {
                                                    forcastratioValues = new ForcastRatioValues();
                                                    forcastratioValues.Id = 0;
                                                    forcastratioValues.Year = valueobj.Year;
                                                    forcastratioValues.ForcastRatioDatasId = forcastRatioObj.Id;
                                                    double value = 0;

                                                    var prevValue = MatchedDatas.IntegratedValues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(valueobj.Year) - 1));
                                                    var currentValue = MatchedDatas.IntegratedValues.Find(x => x.Year == valueobj.Year);
                                                    value = prevValue != null && !string.IsNullOrEmpty(prevValue.Value) && prevValue.Value != "0" ? (((currentValue != null && !string.IsNullOrEmpty(currentValue.Value) ? Convert.ToDouble(currentValue.Value) : 0) - (prevValue != null && !string.IsNullOrEmpty(prevValue.Value) ? Convert.ToDouble(prevValue.Value) : 0)) / Convert.ToDouble(prevValue.Value)) * 100 : 0;

                                                    forcastratioValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                    forcastRatioValuesList.Add(forcastratioValues);
                                                }
                                                iForcastRatioValues.AddMany(forcastRatioValuesList);
                                                iForcastRatioValues.Commit();
                                            }
                                        }


                                    }
                                    // }

                                    IntegratedDatas integratedDatas_StandardObj;
                                    List<IntegratedDatas> integratedDatas_StandardList = new List<IntegratedDatas>();
                                    List<Integrated_ExplicitValues> calculatedExplicitValuesList;
                                    Integrated_ExplicitValues calculatedExplicitValues;
                                    List<ForcastRatio_ExplicitValues> ForcastRatio_ExplicitValuesList = new List<ForcastRatio_ExplicitValues>();
                                    ForcastRatio_ExplicitValuesList = iForcastRatio_ExplicitValues.FindBy(t => forcastRatioDatasList.Any(m => m.Id == t.ForcastRatioDatasId)).ToList();


                                    List<Integrated_ExplicitValues> revenueExplicitValuesList = new List<Integrated_ExplicitValues>();
                                    revenueExplicitValuesList = revenue_integratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == revenue_integratedDatas.Id).ToList() : null;
                                    List<Integrated_ExplicitValues> costofSales_ExplicitValuesList = new List<Integrated_ExplicitValues>();
                                    costofSales_ExplicitValuesList = costofSales_integratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == costofSales_integratedDatas.Id).ToList() : null;

                                    // save Integrated Explicit Data for Balance Sheet
                                    foreach (IntegratedDatas datasObj in integratedDatasList)
                                    {
                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                        integratedDatas_StandardObj = new IntegratedDatas();
                                        ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.IntegratedDatasId == datasObj.Id);

                                        if (datasObj.IsParentItem == true)
                                        {
                                            foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                            {
                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                calculatedExplicitValues.Value = null;
                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                            }
                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                            iIntegrated_ExplicitValues.Commit();
                                        }
                                        else
                                        {
                                            //Cash and Cash Equivalents
                                            if (datasObj.LineItem.ToUpper().Contains("CASH AND CASH EQUIVALENTS") || datasObj.LineItem.ToUpper().Contains("CASH AND EQUIVALENTS"))
                                            {
                                                ForcastRatioDatas forcasttempObj1 = forcastRatioDatasList.Find(x => x.LineItem.ToUpper() == "EXCESS CASH");
                                                ForcastRatioDatas forcasttempObj2 = forcastRatioDatasList.Find(x => x.LineItem.ToUpper() == "OPERATING CASH" || x.LineItem.ToUpper() == "CASH NEEDED FOR OPERATIONS (WORKING CAPITAL)");

                                                ForcastRatioDatas cashnCash = iForcastRatioDatas.GetSingle(x => (x.LineItem.ToUpper().Contains("CASH AND CASH EQUIVALENTS") || x.LineItem.ToUpper().Contains("CASH AND EQUIVALENTS")) && x.InitialSetupId == InitialSetupId);

                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                List<ForcastRatio_ExplicitValues> cashnCash_ExplicitValuesList = new List<ForcastRatio_ExplicitValues>();
                                                ForcastRatio_ExplicitValues cashNCash_Explicit;
                                                if (cashnCash != null)
                                                {
                                                    foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                    {
                                                        cashNCash_Explicit = new ForcastRatio_ExplicitValues();
                                                        calculatedExplicitValues = new Integrated_ExplicitValues();
                                                        calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                        cashNCash_Explicit.ForcastRatioDatasId = cashnCash.Id;
                                                        calculatedExplicitValues.Year = explicitvalue.Year;
                                                        cashNCash_Explicit.Year = explicitvalue.Year;
                                                        double value = 0;
                                                        ForcastRatio_ExplicitValues forcastExplicitValue1 = forcasttempObj1 != null && ForcastRatio_ExplicitValuesList != null && ForcastRatio_ExplicitValuesList.Count > 0 ? ForcastRatio_ExplicitValuesList.Find(x => x.Year == calculatedExplicitValues.Year && x.ForcastRatioDatasId == forcasttempObj1.Id) : null;
                                                        ForcastRatio_ExplicitValues forcastExplicitValue2 = forcasttempObj2 != null && ForcastRatio_ExplicitValuesList != null && ForcastRatio_ExplicitValuesList.Count > 0 ? ForcastRatio_ExplicitValuesList.Find(x => x.Year == calculatedExplicitValues.Year && x.ForcastRatioDatasId == forcasttempObj2.Id) : null;
                                                        value = (forcastExplicitValue1 != null && !string.IsNullOrEmpty(forcastExplicitValue1.Value) ? Convert.ToDouble(forcastExplicitValue1.Value) : 0) + (forcastExplicitValue2 != null && !string.IsNullOrEmpty(forcastExplicitValue2.Value) ? Convert.ToDouble(forcastExplicitValue2.Value) : 0);

                                                        calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                        cashnCash_ExplicitValuesList.Add(cashNCash_Explicit);
                                                        integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                    }

                                                    iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                    iIntegrated_ExplicitValues.Commit();
                                                    integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    // forcast Cash n Cash Equi

                                                    iForcastRatio_ExplicitValues.DeleteWhere(x => x.ForcastRatioDatasId == cashnCash.Id);
                                                    iForcastRatio_ExplicitValues.Commit();
                                                    iForcastRatio_ExplicitValues.AddMany(cashnCash_ExplicitValuesList);
                                                    iForcastRatio_ExplicitValues.Commit();
                                                }
                                            }
                                            else if (datasObj.LineItem.ToUpper().Contains("EXCESS CASH") || datasObj.LineItem.ToUpper().Contains("OPERATING CASH") || datasObj.LineItem.ToUpper().Contains("CASH NEEDED FOR OPERATION"))
                                            {
                                                //ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.LineItem == datasObj.LineItem);
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    ForcastRatio_ExplicitValues forcastExplicitValue = ForcastRatio_ExplicitValuesList != null && ForcastRatio_ExplicitValuesList.Count > 0 ? ForcastRatio_ExplicitValuesList.Find(x => x.Year == calculatedExplicitValues.Year && x.ForcastRatioDatasId == forcasttempObj.Id) : null;
                                                    calculatedExplicitValues.Value = forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? forcastExplicitValue.Value : null;
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            //NET RECEIVABLE, OTHER CURRENT ASSETS, 
                                            else if (((datasObj.LineItem.Contains("NET RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("ACCOUNTS RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("TRADE ACCOUNTS RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("TRADE RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("ACCOUNTS RECEIVABLE-TRADE") || datasObj.LineItem.ToUpper().Contains("OTHER CURRENT ASSETS") || datasObj.LineItem.ToUpper().Contains("PP&E") || datasObj.LineItem.ToUpper().Contains("PROPERTY AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY, PLANT AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY PLANT AND EQUIPMENT"))) || (datasObj.LineItem.ToUpper().Contains("PP&E") || datasObj.LineItem.ToUpper().Contains("PROPERTY AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY, PLANT AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY PLANT AND EQUIPMENT")))
                                            {
                                                //ForcastRatioDatas forcasttempObj = forcastRatioDatasList.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                // revenue_integratedDatas
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value
                                                    double value = 0;
                                                    Integrated_ExplicitValues revenue = revenueExplicitValuesList != null && revenueExplicitValuesList.Count > 0 ? revenueExplicitValuesList.Find(x => x.Year == explicitvalue.Year) : null;

                                                    ForcastRatio_ExplicitValues forcastExplicitValue = ForcastRatio_ExplicitValuesList != null && ForcastRatio_ExplicitValuesList.Count > 0 ? ForcastRatio_ExplicitValuesList.Find(x => x.Year == calculatedExplicitValues.Year && x.ForcastRatioDatasId == forcasttempObj.Id) : null;

                                                    value = ((revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            //INVENTORY, 
                                            else if ((datasObj.LineItem.Contains("INVENTORY") || datasObj.LineItem.ToUpper().Contains("INVENTORIES"))
                                                || (datasObj.LineItem.Contains("ACCOUNTS PAYABLE") || datasObj.LineItem.ToUpper().Contains("PAYABLE") || datasObj.LineItem.ToUpper().Contains("TRADE PAYABLE") || datasObj.LineItem.ToUpper().Contains("TRADE ACCOUNTS PAYABLE")))
                                            {

                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value
                                                    double value = 0;
                                                    Integrated_ExplicitValues COGS = costofSales_ExplicitValuesList != null && costofSales_ExplicitValuesList.Count > 0 ? costofSales_ExplicitValuesList.Find(x => x.Year == explicitvalue.Year) : null;

                                                    ForcastRatio_ExplicitValues forcastExplicitValue = ForcastRatio_ExplicitValuesList != null && ForcastRatio_ExplicitValuesList.Count > 0 ? ForcastRatio_ExplicitValuesList.Find(x => x.Year == calculatedExplicitValues.Year && x.ForcastRatioDatasId == forcasttempObj.Id) : null;

                                                    value = ((COGS != null && !string.IsNullOrEmpty(COGS.Value) ? Convert.ToDouble(COGS.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            //Short-Term Investments, Trading Assets, Assets Held for Sale
                                            else if ((datasObj.LineItem.Contains("INVESTMENT") || datasObj.LineItem.ToUpper().Contains("TRADING ASSETS") || datasObj.LineItem.ToUpper().Contains("ASSETS HELD FOR SALE")
                                                || (datasObj.LineItem.Contains("GOOD WILL") || datasObj.LineItem.ToUpper().Contains("GOODWILL") || datasObj.LineItem.ToUpper().Contains("NET INTANGIBLE ASSETS") || datasObj.LineItem.ToUpper().Contains("MARKETABLE EQUITY SECURITIES") || datasObj.LineItem.ToUpper().Contains("MARKETABLE SECURITIES") || datasObj.LineItem.ToUpper().Contains("LONG-TERM MARKETABLE INVESTMENT") || datasObj.LineItem.ToUpper().Contains("OTHER LONG-TERM INVESTMENT") || datasObj.LineItem.ToUpper().Contains("OTHER INVESTMENT") || datasObj.LineItem.ToUpper().Contains("LONG-TERM INVESTMENT") || datasObj.LineItem.ToUpper().Contains("INVESTMENT AND SUNDRY ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER LONG-TERM ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER NON-CURRENT ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER NONCURRENT ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER ASSETS")))
                                                || (datasObj.LineItem.Contains("SHORT-TERM DEBT") || datasObj.LineItem.ToUpper().Contains("CURRENT DEBT") || datasObj.LineItem.ToUpper().Contains("SHORT-TERM BORROWING"))
                                                || (datasObj.LineItem.ToUpper().Contains("DEFERRED REVENUE") || datasObj.LineItem.ToUpper().Contains("DEFERRED INCOME") || datasObj.LineItem.ToUpper().Contains("UNEARNED REVENUE") || datasObj.LineItem.ToUpper().Contains("ACCRUED EXPENSES") || datasObj.LineItem.ToUpper().Contains("ACCRUED SALARIES") || datasObj.LineItem.ToUpper().Contains("ACCRUED COMPENSATION") || datasObj.LineItem.ToUpper().Contains("COMPENSATION AND BENEFIT") || datasObj.LineItem.ToUpper().Contains("ACCRUED PAYROLL AND RELATED") || datasObj.LineItem.ToUpper().Contains("ACCRUED PAYROLL AND OTHER BENEFITS RELATED LIABILITIES") || datasObj.LineItem.ToUpper().Contains("OTHER ACCRUED LIABILITIES") || datasObj.LineItem.ToUpper().Contains("ACCRUED LIABILITIES"))
                                                || (datasObj.LineItem.Contains("TEMPORARY EQUITY") || datasObj.LineItem.Contains("PAID-IN CAPITAL") || datasObj.LineItem.Contains("PAID IN CAPITAL") || datasObj.LineItem.Contains("CAPITAL IN EXCESS OF PER VALUE") || datasObj.LineItem.Contains("ACCUMULATED OTHER COMPREHENSIVE INCOME") || datasObj.LineItem.Contains("ACCUMULATED OTHER COMPREHENSIVE LOSS"))
                                                || (datasObj.LineItem.Contains("LONG-TERM DEBT") || datasObj.LineItem.ToUpper().Contains("NONCURRENT DEBT") || datasObj.LineItem.ToUpper().Contains("NON-CURRENT DEBT") || datasObj.LineItem.ToUpper().Contains("LONG-TERM BORROWING") || datasObj.LineItem.ToUpper().Contains("DEFERRED TAXES") || datasObj.LineItem.ToUpper().Contains("DEFERRED INCOME TAXES") || datasObj.LineItem.ToUpper().Contains("TAXE LOSS CARRY-FORWARD") || datasObj.LineItem.ToUpper().Contains("DEFERRED TAXE ASSETS") || datasObj.LineItem.ToUpper().Contains("NET OPERATING LOSS") || datasObj.LineItem.Contains("LONG-TERM DEFERRED INCOME TAXE") || datasObj.LineItem.Contains("NOLS") || datasObj.LineItem.Contains("OTHER LONG-TERM LIABILITIES") || datasObj.LineItem.Contains("OTHER NON-CURRENT LIABILITIES") || datasObj.LineItem.Contains("OTHER NONCURRENT LIABILITIES") || datasObj.LineItem.Contains("OTHER LIABILITIES") || datasObj.LineItem.Contains("OTHER LONG-TERM OBLIGATIONS") || datasObj.LineItem.Contains("LONG-TERM OTHER LIABILITIES")))
                                            {
                                                //get all Explicit Values  of income
                                                List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => x.IntegratedDatasId == datasObj.Id).ToList();
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value                                
                                                    Integrated_ExplicitValues prevValue = calculatedExplicitValuesList != null && calculatedExplicitValuesList.Count > 0 ? calculatedExplicitValuesList.Find(x => x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                    if (prevValue != null)
                                                    {
                                                        calculatedExplicitValues.Value = prevValue.Value;
                                                    }
                                                    else
                                                    {
                                                        IntegratedValues integratedHistValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                        calculatedExplicitValues.Value = integratedHistValues != null ? integratedHistValues.Value : null;

                                                    }
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            //TOTAL CURRENT ASSETS
                                            else if (datasObj.LineItem.ToUpper().Contains("TOTAL CURRENT ASSETS"))
                                            {
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value  
                                                    double value = 0;

                                                    foreach (var item in integratedDatas_StandardList)
                                                    {
                                                        if (item.LineItem.ToUpper() != "CASH AND CASH EQUIVALENTS" && item.LineItem.ToUpper() != "CASH AND EQUIVALENTS" && item.integrated_ExplicitValues != null)
                                                        {
                                                            Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                            value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                        }
                                                    }

                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }

                                            //TOTAL ASSETS
                                            else if (datasObj.LineItem.ToUpper().Contains("TOTAL ASSETS"))
                                            {

                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value  
                                                    double value = 0;

                                                    foreach (var item in integratedDatas_StandardList)
                                                    {
                                                        if (item.LineItem.ToUpper() != "CASH AND CASH EQUIVALENTS" && item.LineItem.ToUpper() != "CASH AND EQUIVALENTS" && (item.LineItem.ToUpper() != "TOTAL CURRENT ASSETS") && item.integrated_ExplicitValues != null)
                                                        {
                                                            Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                            value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                        }
                                                    }

                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            //CURRENT LIABILITIES
                                            else if (datasObj.LineItem.ToUpper().Contains("CURRENT LIABILITIES") || datasObj.LineItem.ToUpper().Contains("CURRENT LIABILITY"))
                                            {
                                                // sum of all the values after Total Assets
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value
                                                    double value = 0;
                                                    bool assetsFlag = false;
                                                    foreach (var item in integratedDatas_StandardList)
                                                    {

                                                        if (assetsFlag == true && item.integrated_ExplicitValues != null && item.integrated_ExplicitValues.Count > 0)
                                                        {
                                                            Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                            value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                        }
                                                        if (item.LineItem.ToUpper() == "TOTAL ASSETS")
                                                            assetsFlag = true;
                                                    }

                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);

                                            }


                                            //TOTAL LIABILITIES
                                            else if (datasObj.LineItem.ToUpper().Contains("TOTAL LIABILITIES") || datasObj.LineItem.ToUpper().Contains("TOTAL LIABILITY"))
                                            {
                                                // sum of all the values after Total Assets
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value
                                                    double value = 0;
                                                    bool assetsFlag = false;
                                                    foreach (var item in integratedDatas_StandardList)
                                                    {
                                                        if (item.LineItem.ToUpper() == "CURRENT LIABILITIES")
                                                            assetsFlag = true;
                                                        if (assetsFlag == true && item.integrated_ExplicitValues != null && item.integrated_ExplicitValues.Count > 0)
                                                        {
                                                            Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                            value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                        }
                                                    }
                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            // Retained Earnings
                                            else if (datasObj.LineItem.ToUpper().Contains("RETAINED EARNINGS") || datasObj.LineItem.ToLower().Contains("accumulated deficit"))
                                            {
                                                //get all Explicit Values  of income
                                                IntegratedDatas RetainedEarningEndYearExp = iIntegratedDatas.GetSingle(x => x.LineItem == "RETAINED EARNINGS (END YEAR)");
                                                List<Integrated_ExplicitValues> RetainedEarningEndYearExpList = RetainedEarningEndYearExp != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == RetainedEarningEndYearExp.Id).ToList() : null;
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value                                                        
                                                    Integrated_ExplicitValues RetainedEarningEndYearExpValues = RetainedEarningEndYearExpList != null && RetainedEarningEndYearExpList.Count > 0 ? RetainedEarningEndYearExpList.Find(x => x.Year == explicitvalue.Year) : null;
                                                    if (RetainedEarningEndYearExpValues != null)
                                                    {
                                                        calculatedExplicitValues.Value = RetainedEarningEndYearExpValues.Value;
                                                    }
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            //TOTAL STOCKHOLDERS' EQUITY
                                            else if (datasObj.LineItem.ToUpper().Contains("TOTAL STOCKHOLDERS EQUITY") || datasObj.LineItem.ToUpper().Contains("TOTAL STOCKHOLDERS' EQUITY") || datasObj.LineItem.ToUpper().Contains("TOTAL EQUITY"))
                                            {

                                            }
                                            //Total Liabilities and Equity
                                            else if (datasObj.LineItem.ToUpper().Contains("TOTAL LIABILITIES AND EQUITY") || datasObj.LineItem.ToUpper().Contains("TEMPORARY EQUITY and STOCKHOLDERS' EQUITY"))
                                            {
                                                // TOTAL LIABILITIES 
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value
                                                    double value = 0;
                                                    bool assetsFlag = false;
                                                    foreach (var item in integratedDatas_StandardList)
                                                    {
                                                        if (item.LineItem.ToUpper() == "TOTAL LIABILITIES")
                                                            assetsFlag = true;
                                                        if (assetsFlag == true && item.integrated_ExplicitValues != null && item.integrated_ExplicitValues.Count > 0)
                                                        {
                                                            Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                            value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                        }
                                                    }
                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }
                                            else
                                            {
                                                //get all Explicit Values  of income
                                                List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => x.IntegratedDatasId == datasObj.Id).ToList();
                                                integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                integratedDatas_StandardObj.Category = datasObj.Category;
                                                integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                foreach (Integrated_ExplicitValues explicitvalue in dumyexplicitValuesList)
                                                {
                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                    // for value                                
                                                    Integrated_ExplicitValues prevValue = calculatedExplicitValuesList != null && calculatedExplicitValuesList.Count > 0 ? calculatedExplicitValuesList.Find(x => x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                    if (prevValue != null)
                                                    {
                                                        calculatedExplicitValues.Value = prevValue.Value;
                                                    }
                                                    else
                                                    {
                                                        IntegratedValues integratedHistValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                        calculatedExplicitValues.Value = integratedHistValues != null ? integratedHistValues.Value : null;

                                                    }
                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                    integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                }
                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                iIntegrated_ExplicitValues.Commit();
                                                integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                            }

                                        }

                                    }


                                    #region Reorganized delete and Recalculate
                                    SaveReorganizedData(InitialSetup_IValuationObj.UserId, InitialSetup_IValuationObj.CIKNumber, InitialSetup_IValuationObj.YearFrom, InitialSetup_IValuationObj.YearTo);

                                    #endregion

                                    #region ROIC

                                    //delete ROIC Values Except User input table for Discount rate
                                    List<ROICDatas> ROICDatasList = new List<ROICDatas>();
                                    List<ROICValues> allROICValuesList = new List<ROICValues>();
                                    List<ROIC_ExplicitValues> allROIC_ExplicitValuesList = new List<ROIC_ExplicitValues>();

                                    List<ReorganizedDatas> ReorganizedDatasList = null;
                                    List<ReorganizedValues> AllReorganizedValuesList = null;
                                    List<Reorganized_ExplicitValues> AllReorganized_ExplicitValuesList = null;
                                    ROICDatasList = iROICDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                                    if (ROICDatasList != null && ROICDatasList.Count > 0)
                                    {
                                        ReorganizedDatasList = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                                        AllReorganizedValuesList = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? iReorganizedValues.FindBy(x => ReorganizedDatasList.Any(m => m.Id == x.ReorganizedDatasId)).ToList() : null;
                                        AllReorganized_ExplicitValuesList = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? iReorganized_ExplicitValues.FindBy(x => ReorganizedDatasList.Any(m => m.Id == x.ReorganizedDatasId)).ToList() : null;

                                        //ROICDatasList = iROICDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                                        allROICValuesList = iROICValues.FindBy(t => ROICDatasList.Any(m => m.Id == t.ROICDatasId)).ToList();

                                        if (allROICValuesList != null && allROICValuesList.Count > 0)
                                        {
                                            iROICValues.DeleteMany(allROICValuesList);
                                            iROICValues.Commit();
                                        }
                                        allROIC_ExplicitValuesList = iROIC_ExplicitValues.FindBy(t => ROICDatasList.Any(m => m.Id == t.ROICDatasId)).ToList();
                                        if (allROIC_ExplicitValuesList != null && allROIC_ExplicitValuesList.Count > 0)
                                        {
                                            iROIC_ExplicitValues.DeleteMany(allROIC_ExplicitValuesList);
                                            iROIC_ExplicitValues.Commit();
                                        }



                                        //IMPORTANT vALUES
                                        //"Gross Cash Flow"
                                        ROICValues ROICValue = new ROICValues();
                                        ROIC_ExplicitValues ROICExplicitValue = new ROIC_ExplicitValues();

                                        List<ROICValues> roicValuesList = new List<ROICValues>();
                                        List<ROIC_ExplicitValues> roicExplicitValuesList = new List<ROIC_ExplicitValues>();

                                        //get Depreciation in income  (Integarted financial )Statement
                                        IntegratedDatas integrated_DepreciationDatas = iIntegratedDatas.GetSingle(x => x.LineItem.Contains("Depreciation") && x.InitialSetupId == InitialSetupId);
                                        List<IntegratedValues> DepreciationValuesList = new List<IntegratedValues>();
                                        DepreciationValuesList = iIntegratedValues.FindBy(x => x.IntegratedDatasId == integrated_DepreciationDatas.Id).ToList();
                                        List<Integrated_ExplicitValues> Depreciation_ExplicitValuesList = new List<Integrated_ExplicitValues>();
                                        Depreciation_ExplicitValuesList = iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == integrated_DepreciationDatas.Id).ToList();
                                        List<ROICDatas> tempROICLIst = new List<ROICDatas>();

                                        string discountRate = "";
                                        string growthduring_Terminal = "";
                                        string RONIC = "";
                                        string PVof_FCF = "";
                                        string Baseof_Terinal = "";
                                        string PVof_Terinal = "";
                                        foreach (ROICDatas ROICDatasObj in ROICDatasList)
                                        {
                                            roicValuesList = new List<ROICValues>();
                                            roicExplicitValuesList = new List<ROIC_ExplicitValues>();


                                            if (ROICDatasObj.LineItem == "ROIC Excluding Goodwill and Intangibles")
                                            {
                                                //get NolatDatas from Reorganized
                                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");
                                                //get  Invested Capital (Excluding Goodwill & Acquired Intangibles) Datas

                                                ReorganizedDatas InvestedCapital_EX = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Invested Capital (Excluding Goodwill & Acquired Intangibles)");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;

                                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                                    ReorganizedValues InvestedCapital_EXvalue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital_EX.Id && x.Year == ROICitem.Year) : null;


                                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapital_EXvalue != null && !string.IsNullOrEmpty(InvestedCapital_EXvalue.Value) && InvestedCapital_EXvalue.Value != "0" ? Convert.ToDouble(InvestedCapital_EXvalue.Value) : 0))) * 100;
                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                                    Reorganized_ExplicitValues InvestedCapital_EXvalue = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital_EX.Id && x.Year == ROICitem.Year) : null;

                                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapital_EXvalue != null && !string.IsNullOrEmpty(InvestedCapital_EXvalue.Value) && InvestedCapital_EXvalue.Value != "0" ? Convert.ToDouble(InvestedCapital_EXvalue.Value) : 0))) * 100;
                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                            }
                                            else if (ROICDatasObj.LineItem == "ROIC Including Goodwill and Intangibles")
                                            {
                                                roicValuesList = new List<ROICValues>();
                                                //get NolatDatas from Reorganized
                                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");
                                                //get  Invested Capital (Excluding Goodwill & Acquired Intangibles) Datas

                                                ReorganizedDatas InvestedCapital = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Invested Capital");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                                    ReorganizedValues InvestedCapitalvalue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital.Id && x.Year == ROICitem.Year) : null;

                                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapitalvalue != null && !string.IsNullOrEmpty(InvestedCapitalvalue.Value) && InvestedCapitalvalue.Value != "0" ? Convert.ToDouble(InvestedCapitalvalue.Value) : 0))) * 100;
                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    // ROICData.ROICValuesVM.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                                    Reorganized_ExplicitValues InvestedCapitalvalue = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital.Id && x.Year == ROICitem.Year) : null;

                                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapitalvalue != null && !string.IsNullOrEmpty(InvestedCapitalvalue.Value) && InvestedCapitalvalue.Value != "0" ? Convert.ToDouble(InvestedCapitalvalue.Value) : 0))) * 100;
                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                            }
                                            else if (ROICDatasObj.LineItem == "NOPLAT")
                                            {
                                                roicValuesList = new List<ROICValues>();
                                                //get NolatDatas from Reorganized
                                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                                    value = (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    // ROICData.ROICValuesVM.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                                    value = (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                            }
                                            else if (ROICDatasObj.LineItem == "Depreciation")
                                            {
                                                roicValuesList = new List<ROICValues>();

                                                ////get Depreciation in income  (Integarted financial )Statement
                                                //IntegratedDatas integrated_DepreciationDatas = iIntegratedDatas.GetSingle(x => x.LineItem.Contains("Depreciation") && x.InitialSetupId==InitialSetupId);
                                                //List<IntegratedValues> DepreciationValuesList = new List<IntegratedValues>();
                                                //DepreciationValuesList = iIntegratedValues.FindBy(x=>x.IntegratedDatasId== integrated_DepreciationDatas.Id).ToList();
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    IntegratedValues DepreciationValue = DepreciationValuesList != null && DepreciationValuesList.Count > 0 ? DepreciationValuesList.Find(x => x.Year == ROICitem.Year) : null;


                                                    value = (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0);
                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    // ROICData.ROICValuesVM.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    Integrated_ExplicitValues DepreciationValue = Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 ? Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year) : null;


                                                    value = (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0);
                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                            }
                                            else if (ROICDatasObj.LineItem == "Gross Cash Flow")
                                            {
                                                roicValuesList = new List<ROICValues>();
                                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");

                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    IntegratedValues DepreciationValue = DepreciationValuesList != null && DepreciationValuesList.Count > 0 ? DepreciationValuesList.Find(x => x.Year == ROICitem.Year) : null;
                                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                                    value = (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0) + (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    // ROICData.ROICValuesVM.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    Integrated_ExplicitValues DepreciationValue = Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 ? Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year) : null;
                                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                                    value = (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0) + (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }

                                            else if (ROICDatasObj.LineItem == "Change in Operating Working capital")
                                            {
                                                //"Operating Working Capital"
                                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;

                                                    double value = 0;

                                                    ReorganizedValues CurrentYearValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                                    ReorganizedValues PrevYearValaue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) : null;


                                                    value = PrevYearValaue != null ? (CurrentYearValues != null && !string.IsNullOrEmpty(CurrentYearValues.Value) ? Convert.ToDouble(CurrentYearValues.Value) : 0) - (PrevYearValaue != null && !string.IsNullOrEmpty(PrevYearValaue.Value) ? Convert.ToDouble(PrevYearValaue.Value) : 0) : 0;
                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;

                                                    Reorganized_ExplicitValues CurrentYearValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                                    Reorganized_ExplicitValues PrevYearValaue = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) : null;

                                                    if (PrevYearValaue != null)
                                                    {
                                                        value = PrevYearValaue != null ? (CurrentYearValues != null && !string.IsNullOrEmpty(CurrentYearValues.Value) ? Convert.ToDouble(CurrentYearValues.Value) : 0) - (PrevYearValaue != null && !string.IsNullOrEmpty(PrevYearValaue.Value) ? Convert.ToDouble(PrevYearValaue.Value) : 0) : 0;

                                                    }
                                                    else
                                                    {
                                                        var Historicalvalue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) : null;
                                                        value = Historicalvalue != null ? (Historicalvalue != null && !string.IsNullOrEmpty(Historicalvalue.Value) ? Convert.ToDouble(Historicalvalue.Value) : 0) - (PrevYearValaue != null && !string.IsNullOrEmpty(PrevYearValaue.Value) ? Convert.ToDouble(PrevYearValaue.Value) : 0) : 0;
                                                    }

                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }
                                            else if (ROICDatasObj.LineItem == "Net Capital Expenditures")
                                            {
                                                var PPE_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())) : null;

                                                var PPE_Integratedvalues = PPE_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == PPE_IntegratedDatas.Id).ToList() : null;
                                                var PPE_IntegratedExpvalues = PPE_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == PPE_IntegratedDatas.Id).ToList() : null;
                                                int k = 0;
                                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;


                                                    if (k != 0)
                                                    {
                                                        value = -1 * ((PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (DepreciationValuesList != null && DepreciationValuesList.Count > 0 && !string.IsNullOrEmpty(DepreciationValuesList.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(DepreciationValuesList.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }

                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    k = k + 1;
                                                }
                                                k = 0;
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;

                                                    if (k == 0)
                                                    {
                                                        value = -1 * ((PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 && !string.IsNullOrEmpty(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }
                                                    else
                                                    {
                                                        value = -1 * ((PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 && !string.IsNullOrEmpty(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }

                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                    k = k + 1;
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }
                                            else if (ROICDatasObj.LineItem == "Decrease (increase) in Capital Operating Leases")
                                            {
                                                var COL_ReorganizedDatas = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? ReorganizedDatasList.Find(x => x.LineItem == "Capitalized Operating Leases") : null;
                                                var COL_Reorganizedvalues = COL_ReorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.FindAll(x => x.ReorganizedDatasId == COL_ReorganizedDatas.Id) : null;
                                                var COL_ReorganizedExpvalues = COL_ReorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.FindAll(x => x.ReorganizedDatasId == COL_ReorganizedDatas.Id) : null;

                                                int k = 0;
                                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;

                                                    if (k != 0)
                                                    {
                                                        value = -1 * ((COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }

                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    k = k + 1;
                                                }
                                                k = 0;
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;

                                                    if (k == 0)
                                                    {
                                                        value = -1 * ((COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }
                                                    else
                                                    {
                                                        value = -1 * ((COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }

                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                    k = k + 1;
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }
                                            //"Investments in Goodwill and Acquired Intangibles"
                                            else if (ROICDatasObj.LineItem == "Investments in Goodwill and Acquired Intangibles")
                                            {
                                                var GdWl_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToUpper().Contains("GOODWILL") || x.LineItem.ToUpper().Contains("GOOD WILL")) : null;

                                                var GdWl_Integratedvalues = GdWl_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == GdWl_IntegratedDatas.Id).ToList() : null;
                                                var GdWl_IntegratedExpvalues = GdWl_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == GdWl_IntegratedDatas.Id).ToList() : null;

                                                var NIA_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToUpper().Contains("INTANGIBLE ASSETS")) : null;
                                                var NIA_Integratedvalues = NIA_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == NIA_IntegratedDatas.Id).ToList() : null;
                                                var NIA_IntegratedExpvalues = NIA_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == NIA_IntegratedDatas.Id).ToList() : null;

                                                var IntdataEBITA = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem == "EBITA") : null;
                                                var Amor_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 && IntdataEBITA != null && IntdataEBITA.Id != null && IntdataEBITA.Id != 0 ? integratedDatasList.Find(x => x.Id == IntdataEBITA.Id + 1 && x.LineItem.ToUpper().Contains("AMORTIZATION")) : null;
                                                var Amor_Integratedvalues = NIA_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == Amor_IntegratedDatas.Id).ToList() : null;
                                                var Amor_IntegratedExpvalues = NIA_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == Amor_IntegratedDatas.Id).ToList() : null;

                                                int k = 0;
                                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    if (k != 0)
                                                    {
                                                        value = -1 * ((GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_Integratedvalues != null && Amor_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(Amor_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }

                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    k = k + 1;
                                                }
                                                k = 0;
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;

                                                    if (k == 0)
                                                    {
                                                        value = -1 * ((GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_IntegratedExpvalues != null && Amor_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }
                                                    else
                                                    {
                                                        value = -1 * ((GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_IntegratedExpvalues != null && Amor_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                                    }

                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                    k = k + 1;
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }
                                            else if (ROICDatasObj.LineItem == "Decrease (increase) in Net Other Operating Assets")

                                            {
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;

                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    ROICValue.Value = null;
                                                    roicValuesList.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    ROICValue.Value = null;
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }
                                            else if (ROICDatasObj.LineItem == "Increase (Decrease) in AOCI")
                                            {
                                                var AOCI_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToUpper().Contains("COMPREHENSIVE INCOME") || x.LineItem.ToUpper().Contains("COMPREHENSIVE LOSS")) : null;


                                                var AOCI_Integratedvalues = AOCI_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == AOCI_IntegratedDatas.Id).ToList() : null;
                                                var AOCI_IntegratedExpvalues = AOCI_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == AOCI_IntegratedDatas.Id).ToList() : null;

                                                int k = 0;
                                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    if (k != 0)
                                                    {
                                                        value = -1 * ((AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                                                    }

                                                    ROICValue.Value = value.ToString("0.#");
                                                    roicValuesList.Add(ROICValue);
                                                    k = k + 1;
                                                }
                                                k = 0;
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;

                                                    if (k == 0)
                                                    {
                                                        value = -1 * ((AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                                                    }
                                                    else
                                                    {
                                                        value = -1 * ((AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                                                    }

                                                    ROICExplicitValue.Value = value.ToString("0.#");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                    k = k + 1;
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }
                                            else if (ROICDatasObj.LineItem == "Gross Investment")
                                            {
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    foreach (var item in tempROICLIst)
                                                    {

                                                        if (item.LineItem != "Gross Cash Flow")
                                                        {
                                                            var tempValue = item.ROICValues != null && item.ROICValues.Count > 0 ? item.ROICValues.Find(x => x.Year == ROICitem.Year) : null;
                                                            value = value + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                                        }


                                                    }
                                                    ROICValue.Value = value.ToString("0.");
                                                    roicValuesList.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    foreach (var item in tempROICLIst)
                                                    {
                                                        if (item.LineItem != "Gross Cash Flow")
                                                        {
                                                            var tempExplicitValue = item.ROIC_ExplicitValues != null && item.ROIC_ExplicitValues.Count > 0 ? item.ROIC_ExplicitValues.Find(x => x.Year == ROICitem.Year) : null;
                                                            value = value + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                                        }
                                                    }
                                                    ROICExplicitValue.Value = value.ToString("0.");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }
                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);
                                            }
                                            else if (ROICDatasObj.LineItem == "Free Cash Flow (FCF)")
                                            {
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;
                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    foreach (var item in tempROICLIst)
                                                    {
                                                        if ((item.LineItem == "Gross Cash Flow") || (item.LineItem == "Gross Investment"))
                                                        {

                                                            var tempValue = item.ROICValues != null && item.ROICValues.Count > 0 ? item.ROICValues.Find(x => x.Year == ROICitem.Year) : null;
                                                            value = value + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                                        }
                                                    }
                                                    ROICValue.Value = value.ToString("0.");
                                                    roicValuesList.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    foreach (var item in tempROICLIst)
                                                    {
                                                        if ((item.LineItem == "Gross Cash Flow") || (item.LineItem == "Gross Investment"))
                                                        {

                                                            var tempExplicitValue = item.ROIC_ExplicitValues != null && item.ROIC_ExplicitValues.Count > 0 ? item.ROIC_ExplicitValues.Find(x => x.Year == ROICitem.Year) : null;
                                                            value = value + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                                        }

                                                    }
                                                    ROICExplicitValue.Value = value.ToString("0.");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                }


                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);

                                            }
                                            else if (ROICDatasObj.LineItem == "Discount Rate")
                                            {
                                                //get discount Rate from Cost of Capital
                                                discountRate = ROICDatasObj.DtValue;

                                            }
                                            else if (ROICDatasObj.LineItem == "Growth During Terminal Period")
                                            {
                                                growthduring_Terminal = ROICDatasObj.DtValue;
                                            }
                                            else if (ROICDatasObj.LineItem == "Return on New Invested Capital (RONIC)")
                                            {
                                                RONIC = ROICDatasObj.DtValue;
                                            }
                                            else if (ROICDatasObj.LineItem == "DCF")
                                            {
                                                int i = 1;
                                                ROICDatas FCFDatas = tempROICLIst.Find(x => x.LineItem == "Free Cash Flow (FCF)");
                                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                                {
                                                    ROICValue = new ROICValues();
                                                    ROICValue.Year = ROICitem.Year;
                                                    ROICValue.Id = 0;

                                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                                    ROICValue.Value = null;
                                                    roicValuesList.Add(ROICValue);
                                                }
                                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                                {
                                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                                    ROICExplicitValue.Year = ROICitem.Year;
                                                    ROICExplicitValue.Id = 0;
                                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                                    double value = 0;
                                                    ROIC_ExplicitValues FCFExplicitValue = FCFDatas != null & FCFDatas.ROIC_ExplicitValues != null && FCFDatas.ROIC_ExplicitValues.Count > 0 ? FCFDatas.ROIC_ExplicitValues.Find(x => x.Year == ROICitem.Year) : null;

                                                    //Math.Pow(100.00, 3.00)

                                                    value = FCFExplicitValue != null && !string.IsNullOrEmpty(FCFExplicitValue.Value) && FCFExplicitValue.Value != "0" ? Convert.ToDouble(FCFExplicitValue.Value) / Math.Pow(1 + (!string.IsNullOrEmpty(discountRate) ? Convert.ToDouble(discountRate) : 0), i) : 0;


                                                    ROICExplicitValue.Value = value.ToString("0.");
                                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                                    i++;
                                                }

                                                ROICDatasObj.ROICValues = roicValuesList;
                                                ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                                tempROICLIst.Add(ROICDatasObj);

                                            }

                                            else if (ROICDatasObj.LineItem == "PV of FCF During Explicit Forecast Period")
                                            {
                                                ROICDatas FCFDatas = tempROICLIst.Find(x => x.LineItem == "DCF");
                                                //get all the Explicit Values of DCF
                                                List<ROIC_ExplicitValues> dcfExplicitList = FCFDatas != null && FCFDatas.ROIC_ExplicitValues != null && FCFDatas.ROIC_ExplicitValues.Count > 0 ? FCFDatas.ROIC_ExplicitValues : null;

                                                if (dcfExplicitList != null && dcfExplicitList.Count > 0)
                                                {
                                                    double value = 0;

                                                    foreach (var dcfValue in dcfExplicitList)
                                                    {

                                                        value = value + (dcfValue != null && !string.IsNullOrEmpty(dcfValue.Value) ? Convert.ToDouble(dcfValue.Value) : 0);
                                                    }
                                                    PVof_FCF = Convert.ToString(value.ToString("0.##"));
                                                    ROICDatasObj.DtValue = PVof_FCF;

                                                    iROICDatas.Update(ROICDatasObj);
                                                    iROICDatas.Commit();
                                                }
                                            }
                                            //Base for Terminal Value "Base for Terminal Value"
                                            else if (ROICDatasObj.LineItem == "Base for Terminal Value")
                                            {
                                                //Baseof_Terinal
                                                ROICDatas noPlatDatas = tempROICLIst.Find(x => x.LineItem == "NOPLAT");
                                                //get all the Explicit Values of DCF
                                                List<ROIC_ExplicitValues> dcfExplicitList = noPlatDatas != null && noPlatDatas.ROIC_ExplicitValues != null && noPlatDatas.ROIC_ExplicitValues.Count > 0 ? noPlatDatas.ROIC_ExplicitValues : null;
                                                if (dcfExplicitList != null && dcfExplicitList.Count > 0)
                                                {
                                                    double NoplatTerminalvalue = 0;
                                                    double value = 0;
                                                    foreach (var dcfValue in dcfExplicitList)
                                                    {
                                                        NoplatTerminalvalue = (dcfValue != null && !string.IsNullOrEmpty(dcfValue.Value) ? Convert.ToDouble(dcfValue.Value) : 0);
                                                    }

                                                    value = ((NoplatTerminalvalue) * (1 - ((!string.IsNullOrEmpty(growthduring_Terminal) ? Convert.ToDouble(growthduring_Terminal) : 0) / (!string.IsNullOrEmpty(RONIC) ? Convert.ToDouble(RONIC) : 0)))) / (((!string.IsNullOrEmpty(discountRate) ? Convert.ToDouble(discountRate) : 0) - (!string.IsNullOrEmpty(growthduring_Terminal) ? Convert.ToDouble(growthduring_Terminal) : 0)) / 100);

                                                    //PVof_FCF = Convert.ToString(value.ToString("0.##"));


                                                    Baseof_Terinal = Convert.ToString(value.ToString("0.##"));
                                                    ROICDatasObj.DtValue = Baseof_Terinal;

                                                    iROICDatas.Update(ROICDatasObj);
                                                    iROICDatas.Commit();
                                                }
                                            }
                                            else if (ROICDatasObj.LineItem == "PV of Terminal Value")
                                            {

                                                //Baseof_Terinal
                                                double value = 0;
                                                value = (!string.IsNullOrEmpty(Baseof_Terinal) ? Convert.ToDouble(Baseof_Terinal) : 0) / Math.Pow((1 + ((!string.IsNullOrEmpty(discountRate) ? Convert.ToDouble(discountRate) : 0) / 100)), (dumyexplicitValuesList.Count));


                                                PVof_Terinal = Convert.ToString(value.ToString("0.##"));
                                                ROICDatasObj.DtValue = PVof_Terinal;

                                                iROICDatas.Update(ROICDatasObj);
                                                iROICDatas.Commit();

                                            }
                                            else if (ROICDatasObj.LineItem == "Total Value of Operations")
                                            {



                                                //Baseof_Terinal
                                                double value = 0;
                                                value = (!string.IsNullOrEmpty(PVof_Terinal) ? Convert.ToDouble(PVof_Terinal) : 0) + (!string.IsNullOrEmpty(PVof_FCF) ? Convert.ToDouble(PVof_FCF) : 0);


                                                ROICDatasObj.DtValue = Convert.ToString(value.ToString("0.##"));
                                                //ROICDatasObj.DtValue = PVof_Terinal;

                                                iROICDatas.Update(ROICDatasObj);
                                                iROICDatas.Commit();

                                            }


                                            // save ROIC Valaues to DataBase

                                            if (roicValuesList != null && roicValuesList.Count > 0)
                                            {
                                                iROICValues.AddMany(roicValuesList);
                                                iROICValues.Commit();
                                            }

                                            // save ROIC Explicit Valaues to DataBase

                                            if (roicExplicitValuesList != null && roicExplicitValuesList.Count > 0)
                                            {
                                                iROIC_ExplicitValues.AddMany(roicExplicitValuesList);
                                                iROIC_ExplicitValues.Commit();
                                            }



                                        }
                                    }


                                    #endregion
                                }

                            }
                            //end of edgar Value found
                        }

                        // }

                    }


                }
                //work for Income statement Only end

            }
            catch (Exception ss)
            {

            }
            return flag;
        }


        #endregion


        #region Financial Statement Analysis

        //GET
        [HttpGet]
        [Route("GetIntegratedData_FAnalysis/{UserId}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult GetIntegratedData_FAnalysis(long UserId, string cik, int? startYear = null, int? endYear = null)
        {
            IntegratedResult integratedResult = new IntegratedResult();
            bool DepreciationFlag = false;
            string AdjustedMessage = "Depreciation";
            try
            {
                List<IntegratedFilingsViewModel> integratedFilingsList = new List<IntegratedFilingsViewModel>();
                List<IntegratedDatasViewModel> IntegratedDatasList = new List<IntegratedDatasViewModel>();
                IntegratedFilingsViewModel integratedFiling = new IntegratedFilingsViewModel();
                List<IntegratedDatas> tempintegratedDatasListObj = new List<IntegratedDatas>();
                IntegratedDatasViewModel integratedDatasVm = new IntegratedDatasViewModel();

                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();

                //check in the database if exist then get by DB else go with the flow
                List<IntegratedDatas> tblintegrateddatasListObj = InitialSetup_IValuationObj != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;

                if (tblintegrateddatasListObj != null && tblintegrateddatasListObj.Count > 0)
                {

                    //get all Historical Values
                    List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatasListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                    //get all Explicit Values 
                    List<Integrated_ExplicitValues> Integrated_explicitValuesAfterListObj = iIntegrated_ExplicitValues.FindBy(x => tblintegrateddatasListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                    List<FilingsTable> filingsList = new List<FilingsTable>();
                    filingsList = iFilings.FindBy(x => x.CIK == cik).OrderBy(x => x.Sequence).ToList();
                    //  filingsList = iFilings.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList();


                    //check depreciation Deducted

                    Datas Depreciation_datas = new Datas();
                    foreach (FilingsTable filingsTable in filingsList)
                    {
                        if (filingsTable.StatementType == "INCOME")
                        {

                            var incomeDepreciation_datas = iDatas.GetSingle(x => x.FilingId == filingsTable.Id && x.LineItem.Contains("Depreciation"));
                            if (incomeDepreciation_datas != null)
                                break;
                        }
                        else
                        if (filingsTable.StatementType == "CASH_FLOW")
                        {
                            var Depreciation = iDatas.GetSingle(x => x.FilingId == filingsTable.Id && x.LineItem.Contains("Depreciation"));
                            if (Depreciation != null)
                            {
                                DepreciationFlag = true;
                                // AdjustedMessage=  Depreciation.LineItem ;
                            }
                        }
                    }
                    foreach (var filing in filingsList)
                    {
                        IntegratedDatasList = new List<IntegratedDatasViewModel>();
                        tempintegratedDatasListObj = new List<IntegratedDatas>();

                        integratedFiling = new IntegratedFilingsViewModel();
                        integratedFiling.CompanyName = filing.CompanyName;
                        integratedFiling.ReportName = filing.ReportName;
                        integratedFiling.StatementType = filing.StatementType;
                        integratedFiling.Unit = filing.Unit;
                        integratedFiling.CIK = filing.CIK;
                        if (filing.StatementType == "INCOME")
                        {
                            // add Income items to datas here
                            tempintegratedDatasListObj = tblintegrateddatasListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement).ToList();
                        }
                        else if (filing.StatementType == "BALANCE_SHEET")
                        {
                            // add Balance items to datas here
                            tempintegratedDatasListObj = tblintegrateddatasListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet).ToList();
                        }
                        else if (filing.StatementType == "CASH_FLOW")
                        {
                            integratedFiling.ReportName = "STATEMENT OF CASH FLOW";
                            integratedFiling.StatementType = "STATEMENT OF CASH FLOW";
                            tempintegratedDatasListObj = tblintegrateddatasListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.CashFlowStatement).ToList();

                        }
                        else
                                {
                            //Retained Earnings
                            integratedFiling.ReportName = "STATEMENT OF RETAINED EARNINGS";
                            integratedFiling.StatementType = "STATEMENT OF RETAINED EARNINGS";
                            tempintegratedDatasListObj = tblintegrateddatasListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.RetainedEarningsStatement).ToList();
                        }
                        if (tempintegratedDatasListObj != null && tempintegratedDatasListObj.Count > 0)
                        {
                            foreach (IntegratedDatas Incomeobj in tempintegratedDatasListObj)
                            {
                                integratedDatasVm = new IntegratedDatasViewModel();

                                integratedDatasVm = mapper.Map<IntegratedDatas, IntegratedDatasViewModel>(Incomeobj);

                                // for Historical Values
                                List<IntegratedValues> tempForcastValueList = IntegratedValuesListObj.FindAll(x => x.IntegratedDatasId == Incomeobj.Id).ToList();
                                //Incomeobj.ForcastRatioValues = tempForcastValueList;
                                integratedDatasVm.IntegratedValuesVM = new List<IntegratedValuesViewModel>();
                                foreach (var obj in tempForcastValueList)
                                {
                                    IntegratedValuesViewModel tempValues = mapper.Map<IntegratedValues, IntegratedValuesViewModel>(obj);
                                    integratedDatasVm.IntegratedValuesVM.Add(tempValues);
                                }
                                // for Explicit Values
                                List<Integrated_ExplicitValues> tempForcast_ExplicitValueList = Integrated_explicitValuesAfterListObj.FindAll(x => x.IntegratedDatasId == Incomeobj.Id).ToList();
                                integratedDatasVm.Integrated_ExplicitValuesVM = new List<Integrated_ExplicitValuesViewModel>();
                                foreach (var obj in tempForcast_ExplicitValueList)
                                {
                                    Integrated_ExplicitValuesViewModel tempExplicitValues = mapper.Map<Integrated_ExplicitValues, Integrated_ExplicitValuesViewModel>(obj);
                                    integratedDatasVm.Integrated_ExplicitValuesVM.Add(tempExplicitValues);
                                }
                                IntegratedDatasList.Add(integratedDatasVm);
                            }
                            //IntegratedDatasList.Add();
                            integratedFiling.IntegratedDatasVM = IntegratedDatasList;
                            integratedFilingsList.Add(integratedFiling);
                        }
                    }
                }

                integratedResult.Result = integratedFilingsList;
                integratedResult.DepreciationFlag = DepreciationFlag;
                integratedResult.AdjustedMessage = AdjustedMessage;
                integratedResult.StatusCode = 1;
                return Ok(integratedResult);
            }
            catch (Exception ss)
            {
                integratedResult.StatusCode = 0;
                integratedResult.AdjustedMessage = AdjustedMessage;
                integratedResult.DepreciationFlag = DepreciationFlag;
                integratedResult.Message = Convert.ToString(ss.Message);
                return BadRequest(integratedResult);
            }

        }


        [HttpGet]
        [Route("GetFinancialAnalysis/{UserId}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult GetFinancialAnalysis(long UserId, string cik, int? startYear = null, int? endYear = null)
        {
            //For noe using Forcast Ratio Models to just get the data on web page
            ForcastRatioResult renderResult = new ForcastRatioResult();
            List<ForcastRatioFilingsViewModel> AnalysisFilingsList = new List<ForcastRatioFilingsViewModel>();
            List<ForcastRatioDatasViewModel> AnalysisDatasList = new List<ForcastRatioDatasViewModel>();
            ForcastRatioFilingsViewModel AnalysisFiling = new ForcastRatioFilingsViewModel();
            ForcastRatioDatasViewModel forcastRatioDatas = new ForcastRatioDatasViewModel();
            List<ForcastRatioValuesViewModel> forcastRatioValuesList = new List<ForcastRatioValuesViewModel>();
            ForcastRatioValuesViewModel forcastRatioValues = new ForcastRatioValuesViewModel();
            try
            {
                //get active InitialSetup
                InitialSetup_IValuation initialSetupObj = iInitialSetup_IValuation.GetSingle(x=>x.UserId== UserId && x.IsActive==true);
                if(initialSetupObj!=null)
                {
                    long? initialSetupId = Convert.ToInt64(initialSetupObj.Id);
                    List<IntegratedDatas> integratedDatasList = iIntegratedDatas.FindBy(x => x.InitialSetupId== initialSetupObj.Id).ToList();
                    if(integratedDatasList!=null && integratedDatasList.Count>0)
                    {
                        List<IntegratedValues> integratedValuesList = iIntegratedValues.FindBy(x=> integratedDatasList.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                        IntegratedDatas revenueIntegratedObj = new IntegratedDatas();
                        IntegratedDatas costofSalesIntegratedObj = new IntegratedDatas();

                        List<ForcastRatioValuesViewModel> dumyforcastRatioValueList = new List<ForcastRatioValuesViewModel>();

                        int year = Convert.ToInt32(initialSetupObj.YearFrom);
                        for (int i = 1; i <= initialSetupObj.YearTo; i++)
                        {
                            ForcastRatioValuesViewModel dumyforcastRatioValue = new ForcastRatioValuesViewModel();
                            year = year + 1;
                            dumyforcastRatioValue.Year = Convert.ToString(year);
                            dumyforcastRatioValue.Value = "";
                            dumyforcastRatioValueList.Add(dumyforcastRatioValue);
                        }

                        // find Revenue
                        string revenuesynonyms = "Net Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, net";
                        List<string> synonyms = revenuesynonyms.Split('%').ToList(); // convert comma seperated values to list
                        foreach (IntegratedDatas integrateddatasObj in integratedDatasList)
                        {
                            if (integrateddatasObj.IsParentItem != true)
                                foreach (var syn in synonyms)
                                {
                                    if (integrateddatasObj.LineItem.ToUpper() == syn.ToUpper())
                                    {
                                        revenueIntegratedObj = integrateddatasObj;
                                        break;
                                    }
                                }

                        }

                        string Costofsalesynonyms = "Cost of sales%COGS%Cost of Goods Sold%Cost of Revenue%Cost of Products Sold%Total cost of revenue%Total cost of revenues%Cost of products sold, excluding amortization of intangible assets%Costs of goods sold%Cost of equipment and services revenues%Cost of revenues%Cost of revenue (COR)";
                        //Costofsalesynonyms = Costofsalesynonyms.Replace("TT", "");
                        List<string> CostofsalesSynonyms = Costofsalesynonyms.Split('%').ToList(); // convert comma seperated values to list
                        foreach (IntegratedDatas integrateddatasObj in integratedDatasList)
                        {
                            if (integrateddatasObj.IsParentItem != true)
                                foreach (var syn in CostofsalesSynonyms)
                                {
                                    if (integrateddatasObj.LineItem.ToUpper() == syn.ToUpper())
                                    {
                                        costofSalesIntegratedObj = integrateddatasObj;
                                        break;
                                    }
                                }
                        }

                        //get Revenue Values
                        List<IntegratedValues> revenuevaluesList = new List<IntegratedValues>();
                        revenuevaluesList = integratedValuesList.FindAll(x => x.IntegratedDatasId == revenueIntegratedObj.Id).ToList();
                       
                        //get Cost of Goods Sold Values
                        List<IntegratedValues> costofrevenuevaluesList = new List<IntegratedValues>();
                        costofrevenuevaluesList = integratedValuesList.FindAll(x => x.IntegratedDatasId == costofSalesIntegratedObj.Id).ToList();



                        //for PROFITABILITY RATIOS (Income statement)

                        #region PROFITABILITY RATIOS (Income statement)
                        AnalysisFiling = new ForcastRatioFilingsViewModel();
                        AnalysisDatasList = new List<ForcastRatioDatasViewModel>();
                        forcastRatioValuesList = new List<ForcastRatioValuesViewModel>();

                        AnalysisFiling.CompanyName = initialSetupObj.Company;
                        AnalysisFiling.ReportName = initialSetupObj.Company;
                        AnalysisFiling.StatementType = "PROFITABILITY RATIOS (Income statement)";
                        AnalysisFiling.Unit = "";
                        AnalysisFiling.CIK = initialSetupObj.CIKNumber;

                        //Gross Margin
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Gross Margin";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find Gross Margin
                        IntegratedDatas MatchedIntegratedItem = new IntegratedDatas();
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower().Contains("gross"));

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year=obj.Year;
                            double value = 0;
                            var RevenueValue = revenuevaluesList!=null && revenuevaluesList.Count>0 ? revenuevaluesList.Find(x=>x.Year==obj.Year): null;
                            var tempValue = MatchedIntegratedItem!=null && integratedValuesList!=null && integratedValuesList.Count>0 ? integratedValuesList.Find(x=>x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year==obj.Year): null;
                            value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0"  ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(RevenueValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        //EBITDA Margin
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "EBITDA";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find EBITDA Margin
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem== "EBITDA");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var RevenueValue = revenuevaluesList != null && revenuevaluesList.Count > 0 ? revenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(RevenueValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        //EBITA Margin
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "EBITA";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find EBITA Margin
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem == "EBITA");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var RevenueValue = revenuevaluesList != null && revenuevaluesList.Count > 0 ? revenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(RevenueValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        //EBIT Margin
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "EBIT";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find EBIT Margin
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem == "EBIT");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var RevenueValue = revenuevaluesList != null && revenuevaluesList.Count > 0 ? revenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(RevenueValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        //NOPLAT Margin
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "NOPLAT Margin";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find NOPLAT Margin
                        // //
                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        //Net Profit Margin
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Net Profit Margin";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find Net Profit Margin
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem == "NET INCOME before extraordinary items");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var RevenueValue = revenuevaluesList != null && revenuevaluesList.Count > 0 ? revenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(RevenueValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        AnalysisFiling.ForcastRatioDatasVM = AnalysisDatasList;
                        AnalysisFilingsList.Add(AnalysisFiling);

                        #endregion

                        #region LIQUDITY RATIOS (Balance sheet)

                        AnalysisFiling = new ForcastRatioFilingsViewModel();
                        AnalysisDatasList = new List<ForcastRatioDatasViewModel>();
                        forcastRatioValuesList = new List<ForcastRatioValuesViewModel>();

                        AnalysisFiling.CompanyName = initialSetupObj.Company;
                        AnalysisFiling.ReportName = initialSetupObj.Company;
                        AnalysisFiling.StatementType = "LIQUDITY RATIOS (Balance sheet)";
                        AnalysisFiling.Unit = "";
                        AnalysisFiling.CIK = initialSetupObj.CIKNumber;

                        //Current Ratio
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Current Ratio";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        
                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            //Current Assets (Oparting ine items)/ Current Liabilities(Oparting ine items)


                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        // Quick ratio
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Quick ratio";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            //Cash and Cash Equivalents +   Net Receivables / Current Liabilities(Oparting ine items)

                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        // Cash Ratio
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Cash Ratio";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            //Cash and Cash Equivalents/ Current Liabilities(Oparting ine items)

                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);
                                                                                                              
                        AnalysisFiling.ForcastRatioDatasVM = AnalysisDatasList;
                        AnalysisFilingsList.Add(AnalysisFiling);

                        #endregion

                        #region WORKING CAPITAL RATIOS (Income statement & Balance sheet)

                        AnalysisFiling = new ForcastRatioFilingsViewModel();
                        AnalysisDatasList = new List<ForcastRatioDatasViewModel>();
                        forcastRatioValuesList = new List<ForcastRatioValuesViewModel>();

                        AnalysisFiling.CompanyName = initialSetupObj.Company;
                        AnalysisFiling.ReportName = initialSetupObj.Company;
                        AnalysisFiling.StatementType = "WORKING CAPITAL RATIOS (Income statement & Balance sheet)";
                        AnalysisFiling.Unit = "";
                        AnalysisFiling.CIK = initialSetupObj.CIKNumber;

                        //Accounts Recievable Days
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Accounts Recievable Days";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        //find Receivables, Trade Accounts Receivable, Trade Receivables, Accounts Receivable-Trade
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower() == "Net Receivables" && x.LineItem.ToLower() == "Receivables" && x.LineItem.ToLower() == "Trade Accounts Receivable" && x.LineItem.ToLower() == "Trade Receivables" && x. LineItem.ToLower() == "Accounts Receivable-Trade");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var RevenueValue = revenuevaluesList != null && revenuevaluesList.Count > 0 ? revenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(RevenueValue.Value)/365) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        // Accounts Payable Days
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Accounts Payable Days";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        //find Payables, Trade Payables, Trade Accounts Payable
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower() == "Payables" && x.LineItem.ToLower() == "Trade Payables" && x.LineItem.ToLower() == "Trade Accounts Payable" &&  x.LineItem.ToLower() == "Accounts Payable");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var costofRevenueValue = costofrevenuevaluesList != null && costofrevenuevaluesList.Count > 0 ? costofrevenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = costofRevenueValue != null && !string.IsNullOrEmpty(costofRevenueValue.Value) && costofRevenueValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(costofRevenueValue.Value) / 365) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        // Inventory Days
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Inventories";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        //find Merchandise Inventories, Inventory
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower() == "Inventories" && x.LineItem.ToLower() == "Merchandise Inventories" && x.LineItem.ToLower() == "Inventory");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var costofRevenueValue = costofrevenuevaluesList != null && costofrevenuevaluesList.Count > 0 ? costofrevenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = costofRevenueValue != null && !string.IsNullOrEmpty(costofRevenueValue.Value) && costofRevenueValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(costofRevenueValue.Value) / 365) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        // Accounts Receivable Turnover
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Accounts Receivable Turnover";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        //find Receivables, Trade Accounts Receivable, Trade Receivables, Accounts Receivable-Trade
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower() == "Net Receivables" && x.LineItem.ToLower() == "Receivables" && x.LineItem.ToLower() == "Trade Accounts Receivable" && x.LineItem.ToLower() == "Trade Receivables" && x.LineItem.ToLower() == "Accounts Receivable-Trade");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            // NET SALES/Net Receivables
                            var RevenueValue = revenuevaluesList != null && revenuevaluesList.Count > 0 ? revenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;

                            value = tempValue != null && !string.IsNullOrEmpty(tempValue.Value) && tempValue.Value != "0" ? ((RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) ? Convert.ToDouble(RevenueValue.Value) : 0) / Convert.ToDouble(tempValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        // Accounts Payable Turnover
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Accounts Payable Turnover";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        //find Payables, Trade Payables, Trade Accounts Payable
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower() == "Payables" && x.LineItem.ToLower() == "Trade Payables" && x.LineItem.ToLower() == "Trade Accounts Payable" && x.LineItem.ToLower() == "Accounts Payable");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            // Cost of Goods Sold/Accounts Payable
                            var costofRevenueValue = costofrevenuevaluesList != null && costofrevenuevaluesList.Count > 0 ? costofrevenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;

                            value = tempValue != null && !string.IsNullOrEmpty(tempValue.Value) && tempValue.Value != "0" ? ((costofRevenueValue != null && !string.IsNullOrEmpty(costofRevenueValue.Value) ? Convert.ToDouble(costofRevenueValue.Value) : 0) / Convert.ToDouble(tempValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        // Inventory Turnover
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Inventory Turnover";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        //find Merchandise Inventories, Inventory
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower() == "Inventories" && x.LineItem.ToLower() == "Merchandise Inventories" && x.LineItem.ToLower() == "Inventory");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            // Cost of Goods Sold/Accounts Payable
                            var costofRevenueValue = costofrevenuevaluesList != null && costofrevenuevaluesList.Count > 0 ? costofrevenuevaluesList.Find(x => x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;

                            value = tempValue != null && !string.IsNullOrEmpty(tempValue.Value) && tempValue.Value != "0" ? ((costofRevenueValue != null && !string.IsNullOrEmpty(costofRevenueValue.Value) ? Convert.ToDouble(costofRevenueValue.Value) : 0) / Convert.ToDouble(tempValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        AnalysisFiling.ForcastRatioDatasVM = AnalysisDatasList;
                        AnalysisFilingsList.Add(AnalysisFiling);

                        #endregion

                        #region INTEREST COVERAGE RATIOS (Income statement)

                        AnalysisFiling = new ForcastRatioFilingsViewModel();
                        AnalysisDatasList = new List<ForcastRatioDatasViewModel>();
                        forcastRatioValuesList = new List<ForcastRatioValuesViewModel>();

                        AnalysisFiling.CompanyName = initialSetupObj.Company;
                        AnalysisFiling.ReportName = initialSetupObj.Company;
                        AnalysisFiling.StatementType = "INTEREST COVERAGE RATIOS (Income statement)";
                        AnalysisFiling.Unit = "";
                        AnalysisFiling.CIK = initialSetupObj.CIKNumber;

                        //find Interest Expense,Interest and Debt Expense, Interest and Other Expense
                        IntegratedDatas integratedDatasInterestExpense = new IntegratedDatas();
                        integratedDatasInterestExpense = integratedDatasList.Find(x => x.LineItem.ToLower()== "Interest Expense" && x.LineItem.ToLower() == "Interest and Debt Expense" && x.LineItem.ToLower() == "Interest and Other Expense");

                        //EBIT / Interest Coverage
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "EBIT / Interest Coverage";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find EBIT
                        MatchedIntegratedItem = new IntegratedDatas();
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower()=="EBIT");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var EXpenseValue = integratedDatasInterestExpense != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatasInterestExpense.Id && x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = EXpenseValue != null && !string.IsNullOrEmpty(EXpenseValue.Value) && EXpenseValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(EXpenseValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        //EBITDA / Interest Coverage
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "EBITDA / Interest Coverage";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        //find EBITDA
                        MatchedIntegratedItem = new IntegratedDatas();
                        MatchedIntegratedItem = integratedDatasList.Find(x => x.LineItem.ToLower() == "EBITDA");

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            var EXpenseValue = integratedDatasInterestExpense != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatasInterestExpense.Id && x.Year == obj.Year) : null;
                            var tempValue = MatchedIntegratedItem != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == MatchedIntegratedItem.Id && x.Year == obj.Year) : null;
                            value = EXpenseValue != null && !string.IsNullOrEmpty(EXpenseValue.Value) && EXpenseValue.Value != "0" ? ((tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0) / Convert.ToDouble(EXpenseValue.Value)) : 0;
                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        AnalysisFiling.ForcastRatioDatasVM = AnalysisDatasList;
                        AnalysisFilingsList.Add(AnalysisFiling);

                        #endregion

                        
                        #region LEVERAGE RATIOS (Balance sheet, Cash flow statement & Market data)
                        
                        AnalysisFiling = new ForcastRatioFilingsViewModel();
                        AnalysisDatasList = new List<ForcastRatioDatasViewModel>();
                        forcastRatioValuesList = new List<ForcastRatioValuesViewModel>();

                        AnalysisFiling.CompanyName = initialSetupObj.Company;
                        AnalysisFiling.ReportName = initialSetupObj.Company;
                        AnalysisFiling.StatementType = "LEVERAGE RATIOS (Balance sheet, Cash flow statement & Market data)";
                        AnalysisFiling.Unit = "";
                        AnalysisFiling.CIK = initialSetupObj.CIKNumber;

                        //find Total stockholders' equity%Total stockholders� equity%Total Equity%Total shareholders� equity%Total shareholders equity%Total Shareholders' Investment%Total Stockholders� Investment%Total shareholders� equity%Total shareholders' equity
                        IntegratedDatas integratedDatasStockholdersequity = new IntegratedDatas();
                        integratedDatasStockholdersequity = integratedDatasList.Find(x => x.LineItem.ToLower() == "Total stockholders' equity" && x.LineItem.ToLower() == "Total stockholders� equity" && x.LineItem.ToLower() == "Total Equity" && x.LineItem.ToLower() == "Total shareholders equity" && x.LineItem.ToLower() == "Total Shareholders' Investment" && x.LineItem.ToLower() == "Total Stockholders� Investment" && x.LineItem.ToLower() == "Total shareholders� equity" && x.LineItem.ToLower() == "Total shareholders' equity" && x.LineItem.ToLower() == "Total shareholders� equity");

                        //find Short-Term Debt,Term Debt, Covertible Short-Term Debt, Current Debt, Short-Term Borrowings
                        IntegratedDatas integratedDatashorttermDebt = new IntegratedDatas();
                        integratedDatashorttermDebt = integratedDatasList.Find(x => x.LineItem.ToLower() == "Short-Term Debt" && x.LineItem.ToLower() == "Term Debt" && x.LineItem.ToLower() == "Covertible Short-Term Debt" && x.LineItem.ToLower() == "Current Debt" && x.LineItem.ToLower() == "Short-Term Borrowings");

                        // find long term Debt
                        // Long - term debt % Long - term liabilities%Long-Term Debt,Term Debt, Debt, Non-Current Debt
                        IntegratedDatas integratedDatalongtermdebt = new IntegratedDatas();
                        integratedDatalongtermdebt = integratedDatasList.Find(x => x.LineItem.ToLower() == "Long - term debt" && x.LineItem.ToLower() == "Long - term liabilities" && x.LineItem.ToLower() == "Long-Term Debt" && x.LineItem.ToLower() == "Term Debt" && x.LineItem.ToLower() == "Non-Current Debt");


                        //Debt-to-Equity Ratio (Book) 
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Debt-to-Equity Ratio (Book)";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                        
                        //(Short - Term Debt + Long - Term Debt)/ TOTAL STOCKHOLDERS' EQUITY

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            // short term debt
                            var ShorttermdebtValue = integratedDatashorttermDebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatashorttermDebt.Id && x.Year == obj.Year) : null;
                            // long term debt
                            var longtermdebtValue = integratedDatalongtermdebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatalongtermdebt.Id && x.Year == obj.Year) : null;
                            //stockholders euity
                            var StockholderequityValue = integratedDatasStockholdersequity != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatasStockholdersequity.Id && x.Year == obj.Year) : null;

                            value = StockholderequityValue != null && !string.IsNullOrEmpty(StockholderequityValue.Value) && StockholderequityValue.Value != "0" ? (((ShorttermdebtValue != null && !string.IsNullOrEmpty(ShorttermdebtValue.Value) ? Convert.ToDouble(ShorttermdebtValue.Value) : 0)+ (longtermdebtValue != null && !string.IsNullOrEmpty(longtermdebtValue.Value) ? Convert.ToDouble(longtermdebtValue.Value) : 0)) / Convert.ToDouble(StockholderequityValue.Value)) : 0;

                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);

                        //Debt-to-Equity Ratio (Market)
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Debt-to-Equity Ratio (Market)";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        //(Short-Term Debt+ Long-Term Debt)/Market Value Common Stock ($M)

                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            // short term debt
                            var ShorttermdebtValue = integratedDatashorttermDebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatashorttermDebt.Id && x.Year == obj.Year) : null;
                            // long term debt
                            var longtermdebtValue = integratedDatalongtermdebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatalongtermdebt.Id && x.Year == obj.Year) : null;
                            //stockholders euity
                            var StockholderequityValue = integratedDatasStockholdersequity != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatasStockholdersequity.Id && x.Year == obj.Year) : null;

                            value = StockholderequityValue != null && !string.IsNullOrEmpty(StockholderequityValue.Value) && StockholderequityValue.Value != "0" ? (((ShorttermdebtValue != null && !string.IsNullOrEmpty(ShorttermdebtValue.Value) ? Convert.ToDouble(ShorttermdebtValue.Value) : 0) + (longtermdebtValue != null && !string.IsNullOrEmpty(longtermdebtValue.Value) ? Convert.ToDouble(longtermdebtValue.Value) : 0)) / Convert.ToDouble(StockholderequityValue.Value)) : 0;

                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        //Debt-to-Capital Ratio (Book)
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Debt-to-Capital Ratio (Book)";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        // (Short-Term Debt+ Long-Term Debt)/ (Short-Term Debt+ Long-Term Debt+TOTAL STOCKHOLDERS' EQUITY)
                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            // short term debt
                            var ShorttermdebtValue = integratedDatashorttermDebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatashorttermDebt.Id && x.Year == obj.Year) : null;
                            // long term debt
                            var longtermdebtValue = integratedDatalongtermdebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatalongtermdebt.Id && x.Year == obj.Year) : null;
                            //stockholders euity
                            var StockholderequityValue = integratedDatasStockholdersequity != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatasStockholdersequity.Id && x.Year == obj.Year) : null;

                            double  totalValue = (ShorttermdebtValue != null && !string.IsNullOrEmpty(ShorttermdebtValue.Value) ? Convert.ToDouble(ShorttermdebtValue.Value) : 0) + (longtermdebtValue != null && !string.IsNullOrEmpty(longtermdebtValue.Value) ? Convert.ToDouble(longtermdebtValue.Value) : 0) + (StockholderequityValue != null && !string.IsNullOrEmpty(StockholderequityValue.Value) ? Convert.ToDouble(StockholderequityValue.Value) : 0);

                            value = totalValue !=0 ? (((ShorttermdebtValue != null && !string.IsNullOrEmpty(ShorttermdebtValue.Value) ? Convert.ToDouble(ShorttermdebtValue.Value) : 0) + (longtermdebtValue != null && !string.IsNullOrEmpty(longtermdebtValue.Value) ? Convert.ToDouble(longtermdebtValue.Value) : 0)) / Convert.ToDouble(totalValue)) : 0;

                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);


                        //Debt-to-Capital Ratio (Market)
                        forcastRatioDatas = new ForcastRatioDatasViewModel();
                        forcastRatioDatas.InitialSetupId = initialSetupId;
                        forcastRatioDatas.LineItem = "Debt-to-Capital Ratio (Market)";
                        forcastRatioDatas.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();

                        // (Short-Term Debt+ Long-Term Debt)/ (Short-Term Debt+ Long-Term Debt+Market Value Common Stock ($M))
                        foreach (ForcastRatioValuesViewModel obj in dumyforcastRatioValueList)
                        {
                            forcastRatioValues = new ForcastRatioValuesViewModel();
                            forcastRatioValues.Year = obj.Year;
                            double value = 0;
                            // short term debt
                            var ShorttermdebtValue = integratedDatashorttermDebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatashorttermDebt.Id && x.Year == obj.Year) : null;
                            // long term debt
                            var longtermdebtValue = integratedDatalongtermdebt != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatalongtermdebt.Id && x.Year == obj.Year) : null;
                            //stockholders euity
                            var StockholderequityValue = integratedDatasStockholdersequity != null && integratedValuesList != null && integratedValuesList.Count > 0 ? integratedValuesList.Find(x => x.IntegratedDatasId == integratedDatasStockholdersequity.Id && x.Year == obj.Year) : null;

                            double totalValue = (ShorttermdebtValue != null && !string.IsNullOrEmpty(ShorttermdebtValue.Value) ? Convert.ToDouble(ShorttermdebtValue.Value) : 0) + (longtermdebtValue != null && !string.IsNullOrEmpty(longtermdebtValue.Value) ? Convert.ToDouble(longtermdebtValue.Value) : 0) + (StockholderequityValue != null && !string.IsNullOrEmpty(StockholderequityValue.Value) ? Convert.ToDouble(StockholderequityValue.Value) : 0);

                            value = totalValue != 0 ? (((ShorttermdebtValue != null && !string.IsNullOrEmpty(ShorttermdebtValue.Value) ? Convert.ToDouble(ShorttermdebtValue.Value) : 0) + (longtermdebtValue != null && !string.IsNullOrEmpty(longtermdebtValue.Value) ? Convert.ToDouble(longtermdebtValue.Value) : 0)) / Convert.ToDouble(totalValue)) : 0;

                            forcastRatioValues.Value = Convert.ToString(value.ToString("0.##"));
                            forcastRatioValuesList.Add(forcastRatioValues);
                        }
                        forcastRatioDatas.ForcastRatioValuesVM = forcastRatioValuesList;
                        AnalysisDatasList.Add(forcastRatioDatas);






                        AnalysisFiling.ForcastRatioDatasVM = AnalysisDatasList;
                        AnalysisFilingsList.Add(AnalysisFiling);
                        #endregion


                        renderResult.StatusCode = 1;
                        renderResult.Message = "No issue found";
                        renderResult.Result = AnalysisFilingsList;
                        return Ok(renderResult);
                    }
                    else
                    {
                        renderResult.StatusCode = 0;
                        renderResult.Message = "No data available in Integrated Financial Statement";
                        renderResult.Result = AnalysisFilingsList;
                        return Ok(renderResult);
                    }

                }
                else
                {
                    renderResult.StatusCode = 0;
                    renderResult.Message = "No data availablefor this cik";
                    renderResult.Result = AnalysisFilingsList;
                    return Ok(renderResult);
                }
            }
            catch(Exception ss)
            {
                //Exception case
                renderResult.StatusCode = 0;
                renderResult.Message = "Exception occured" + Convert.ToString(ss.Message);
                renderResult.Result = AnalysisFilingsList;
                return Ok(renderResult);
            }
            //return Ok(renderResult);
        }

        //SAVE
        [HttpGet]
        [Route("GetIntegratedDataforAnalysis/{UserId}/{InitialsetupId}/{StatementType}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult GetIntegratedDataforAnalysis(long UserId, long? InitialsetupId, string StatementType, string cik, int? startYear = null, int? endYear = null)
        {
            RenderResult renderResult = new RenderResult();
            List<FilingsArray> filingsArrayList = new List<FilingsArray>();
            try
            {
                long? InitialSetupId = null;
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.Id == InitialsetupId).OrderByDescending(x => x.Id).First();
                //InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                if (InitialSetup_IValuationObj != null)
                {
                    InitialSetupId = InitialSetup_IValuationObj.Id;
                }

                List<IntegratedDatas> integratedDatasobj = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (integratedDatasobj != null && integratedDatasobj.Count > 0)
                {
                    //call delete api for every statement
                    //int StatementTypeId = 0;
                    //List<string> statementTypeList = StatementType.Split(',').ToList();
                    //if (statementTypeList != null && statementTypeList.Count > 0)
                        //foreach (var item in statementTypeList)
                        //{
                        //    StatementTypeId = item.ToLower().Contains("income") ? 1 : item.ToLower().Contains("balance") ? 2 : 0;
                        //    bool flag = DeleteCalculatedDataIntegrated_ForcastRatio(UserId, InitialsetupId, StatementTypeId, cik, startYear, endYear);
                        //}

                }
                else
                {
                    string CompanyName = "";
                    string edgarView = edgarDataRepository.GetEdgar(cik, startYear, endYear).FirstOrDefault<EdgarData>().EdgarView;
                    if (edgarView == null)
                    {
                        renderResult.StatusCode = 0;
                        renderResult.Result = filingsArrayList;
                    }
                    else
                    {
                        List<List<Filings>> filingsListList = (List<List<Filings>>)JsonConvert.DeserializeObject<List<List<Filings>>>(edgarView);

                        List<CategoryByInitialSetup> categoryByInitialSetups = InitialSetupId != null ? iCategoryByInitialSetup.FindBy(x => x.InitialSetupId == InitialSetupId).ToList() : null;


                        foreach (List<Filings> filingsList1 in filingsListList)
                        {
                            //Remove all Null Value
                            var Removedataslist = filingsList1[0].Datas.FindAll(x => x.Values == null || x.Values.Count == 0);
                            if (Removedataslist != null)
                            {
                                foreach (var dt in Removedataslist)
                                {
                                    filingsList1[0].Datas.Remove(dt);
                                }
                            }
                            //////////////////////////////

                            filingsList1[0].InitialSetupId = InitialSetupId;
                            FilingsArray filingsArray = new FilingsArray()
                            {
                                CompanyName = filingsList1[0].CompanyName,
                                StatementType = filingsList1[0].StatementType,
                                Filings = filingsList1[0]
                            };
                            CompanyName = filingsList1[0].CompanyName;
                            int num1 = 0;
                            List<Values> valuesList1 = new List<Values>();
                            List<Values> valuesList2 = new List<Values>();
                            Values values1 = new Values();


                            foreach (Datas data in filingsList1[0].Datas)
                            {
                                if (data.IsTally == true)
                                    data.Category = "General";
                                if (categoryByInitialSetups != null && categoryByInitialSetups.Count > 0)
                                {
                                    var assigncategory = categoryByInitialSetups.Find(x => x.DatasId == data.DataId);
                                    if (assigncategory != null)
                                    {
                                        data.Category = assigncategory.Category != null ? assigncategory.Category : data.Category;
                                    }
                                }
                                if (data.Values != null && num1 < data.Values.Count)
                                {
                                    num1 = data.Values.Count;
                                    valuesList2 = data.Values;
                                }
                            }


                            foreach (Datas data in filingsArray.Filings.Datas)
                            {
                                if (data.Values != null)
                                {
                                    if (data.Values.Count != num1)
                                    {
                                        int index = 0;
                                        foreach (Values values2 in valuesList2)
                                        {
                                            Values item = values2;
                                            Values values3 = new Values();
                                            values3.CElementName = (string)null;
                                            values3.CLineItem = (string)null;
                                            values3.Value = (string)null;
                                            if (data.Values.FirstOrDefault((x => Convert.ToDateTime(x.FilingDate) == Convert.ToDateTime(item.FilingDate))) == null)
                                            {
                                                values3.FilingDate = item.FilingDate;
                                                data.Values.Insert(index, values3);
                                            }
                                            ++index;
                                        }
                                    }
                                }
                                else
                                {
                                    List<Values> valuesList3 = new List<Values>();
                                    data.Values = valuesList3;
                                    foreach (Values values2 in valuesList2)
                                        data.Values.Add(new Values()
                                        {
                                            CElementName = (string)null,
                                            CLineItem = (string)null,
                                            Value = (string)null,
                                            FilingDate = values2.FilingDate
                                        });
                                }
                            }


                            filingsArrayList.Add(filingsArray);
                            if (filingsList1[0].StatementType == "INCOME")
                            {
                                Datas datas1 = new Datas();
                                List<Datas> DataProcessing_list = filingsList1[0].Datas.OrderBy(x => x.Sequence).ToList();
                                Datas MaxValues_data = DataProcessing_list.First<Datas>();
                                List<Datas> Integrated_datasList = new List<Datas>();
                                long gross_Seq = 0;
                                bool depreFlag = false;
                                bool amortizationFlag = false;

                                Datas Depreciation_datas = new Datas();
                                Datas Amortization_datas = new Datas();
                                foreach (List<Filings> filingsList2 in filingsListList)
                                {
                                    if (filingsList2[0].StatementType == "INCOME")
                                    {
                                        var incomeDepreciation_datas = filingsList2[0].Datas.Find(x => x.LineItem.Contains("Depreciation"));
                                        //Depreciation_datas
                                        if (incomeDepreciation_datas != null)
                                        {
                                            Depreciation_datas = incomeDepreciation_datas;
                                            depreFlag = true;
                                            break;
                                        }
                                    }
                                    else
                                    if (filingsList2[0].StatementType == "CASH_FLOW")
                                        Depreciation_datas = filingsList2[0].Datas.Find(x => x.LineItem.Contains("Depreciation"));
                                }
                                if (Depreciation_datas != null)
                                {
                                    //check if Depreciation exist in mixed Datas or not
                                    MixedSubDatas mixedSubDatas = iMixedSubDatas.GetSingle(x => x.DatasId == Depreciation_datas.DataId && x.InitialSetupId == InitialSetupId && x.Category == "Operating");
                                    if (mixedSubDatas != null)
                                    {
                                        List<MixedSubValues> mixedSubValuesList = new List<MixedSubValues>();
                                        mixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == mixedSubDatas.Id).ToList();
                                        if (mixedSubValuesList != null && mixedSubValuesList.Count > 0)
                                        {
                                            Depreciation_datas = mapper.Map<MixedSubDatas, Datas>(mixedSubDatas);
                                            Depreciation_datas.Values = new List<Values>();
                                            foreach (var mixedValues in mixedSubDatas.MixedSubValues)
                                            {
                                                Values mappedValue = mapper.Map<MixedSubValues, Values>(mixedValues);
                                                Depreciation_datas.Values.Add(mappedValue);
                                            }

                                        }
                                    }
                                }

                                //find aamortization
                                foreach (List<Filings> filingsList2 in filingsListList)
                                {
                                    if (filingsList2[0].StatementType == "INCOME")
                                    {
                                        var incomeAmortization_datas = filingsList2[0].Datas.Find(x => x.LineItem.ToLower().Contains("amortization"));
                                        //Amortization_datas
                                        if (incomeAmortization_datas != null)
                                        {
                                            Amortization_datas = incomeAmortization_datas;
                                            amortizationFlag = true;
                                            break;
                                        }
                                    }
                                    else
                                    if (filingsList2[0].StatementType == "CASH_FLOW")
                                        Amortization_datas = filingsList2[0].Datas.Find(x => x.LineItem.ToLower().Contains("amortization"));
                                }
                                if (Amortization_datas != null)
                                {
                                    //check if Depreciation exist in mixed Datas or not
                                    MixedSubDatas mixedSubDatas = iMixedSubDatas.GetSingle(x => x.DatasId == Amortization_datas.DataId && x.InitialSetupId == InitialSetupId && x.Category == "Non-Operating");
                                    if (mixedSubDatas != null)
                                    {
                                        List<MixedSubValues> mixedSubValuesList = new List<MixedSubValues>();
                                        mixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == mixedSubDatas.Id).ToList();
                                        if (mixedSubValuesList != null && mixedSubValuesList.Count > 0)
                                        {
                                            Amortization_datas = mapper.Map<MixedSubDatas, Datas>(mixedSubDatas);
                                            Amortization_datas.Values = new List<Values>();
                                            foreach (var mixedValues in mixedSubDatas.MixedSubValues)
                                            {
                                                Values mappedValue = mapper.Map<MixedSubValues, Values>(mixedValues);
                                                Amortization_datas.Values.Add(mappedValue);
                                            }

                                        }
                                    }
                                }


                                Datas revenue_integratedDatas = new Datas();
                                Datas costofSales_integratedDatas = new Datas();

                                //find revenue
                                string revenuesynonyms = "Net Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, net";
                                string Costofsalesynonyms = "Cost of sales%COGS%Cost of Goods Sold%Cost of Revenue%Cost of Products Sold%Total cost of revenue%Total cost of revenues%Cost of products sold, excluding amortization of intangible assets%Costs of goods sold%Cost of equipment and services revenues%Cost of revenues%Cost of revenue (COR)";
                                bool revenueflag = false;
                                bool costofsalesflag = false;
                                List<string> synonyms = revenuesynonyms.Split('%').ToList(); //convert comma seperated values to list

                                int mulBy = -1;
                                foreach (Datas datas4 in DataProcessing_list)
                                {
                                    if (datas4.IsParentItem != true)
                                    {


                                        if (datas4.LineItem.Contains("Gross"))
                                        {
                                            gross_Seq = datas4.Sequence;
                                            foreach (Values obj in datas4.Values)
                                            {
                                                //get sum of revenue and COGS
                                                Values revenue = revenue_integratedDatas != null && revenue_integratedDatas.Values != null && revenue_integratedDatas.Values.Count > 0 ? revenue_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                Values coGS = costofSales_integratedDatas != null && costofSales_integratedDatas.Values != null && costofSales_integratedDatas.Values.Count > 0 ? costofSales_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                double calculatedgross = 0;

                                                calculatedgross = (revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) + (coGS != null && !string.IsNullOrEmpty(coGS.Value) ? Convert.ToDouble(coGS.Value) : 0);
                                                double num2 = calculatedgross != 0 ? calculatedgross : (obj.Value != null ? Convert.ToDouble(obj.Value) : 0.0);
                                                obj.Value = Convert.ToString(num2);
                                            }
                                            Integrated_datasList.Add(datas4);
                                            break;
                                        }
                                        else if (costofsalesflag == true)
                                        {
                                            //add Gross Margin
                                            gross_Seq = datas4.Sequence;
                                            ////////////
                                            Datas Gross_datas = new Datas();
                                            Gross_datas.LineItem = "Gross Margin";
                                            Gross_datas.IsTally = true;
                                            //Gross_datas.Sequence = (Integrated_datasList.Count + 1);
                                            Gross_datas.Sequence = gross_Seq;
                                            Gross_datas.Category = (string)null;
                                            Gross_datas.IsParentItem = false;
                                            Gross_datas.Values = new List<Values>();


                                            foreach (Values obj in MaxValues_data.Values)
                                            {

                                                Values valueObj = new Values();
                                                //get sum of revenue and COGS
                                                Values revenue = revenue_integratedDatas != null && revenue_integratedDatas.Values != null && revenue_integratedDatas.Values.Count > 0 ? revenue_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                Values coGS = costofSales_integratedDatas != null && costofSales_integratedDatas.Values != null && costofSales_integratedDatas.Values.Count > 0 ? costofSales_integratedDatas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                                double calculatedgross = 0;

                                                calculatedgross = (revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) + (coGS != null && !string.IsNullOrEmpty(coGS.Value) ? Convert.ToDouble(coGS.Value) : 0);
                                                double num2 = calculatedgross != 0 ? calculatedgross : (obj.Value != null ? Convert.ToDouble(obj.Value) : 0.0);
                                                obj.Value = Convert.ToString(num2);
                                                valueObj.FilingDate = obj.FilingDate;
                                                valueObj.Value = Convert.ToString(num2);
                                                Gross_datas.Values.Add(valueObj);
                                            }
                                            Integrated_datasList.Add(Gross_datas);
                                            break;
                                        }


                                        if (revenueflag == true)
                                        {
                                            if (costofsalesflag == false)
                                                foreach (var syn in synonyms)
                                                {
                                                    if (datas4.LineItem.ToUpper() == syn.ToUpper())
                                                    {
                                                        costofsalesflag = true;
                                                        break;
                                                    }
                                                }

                                            if (datas4.Values != null && datas4.Values.Count > 0)
                                            {
                                                if (costofsalesflag == true && depreFlag == false)
                                                {
                                                    foreach (var item in datas4.Values)
                                                    {
                                                        Values depreciationValue = Depreciation_datas != null && Depreciation_datas.Values != null && Depreciation_datas.Values.Count > 0 ? Depreciation_datas.Values.Find(x => x.FilingDate == item.FilingDate) : null;
                                                        item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * (Convert.ToDouble(item.Value) - (depreciationValue != null && !string.IsNullOrEmpty(depreciationValue.Value) ? Convert.ToDouble(depreciationValue.Value) : 0))) : null;
                                                    }
                                                    costofSales_integratedDatas = datas4;
                                                }
                                                else
                                                {
                                                    foreach (var item in datas4.Values)
                                                    {
                                                        item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                                    }
                                                }
                                            }



                                        }

                                        Integrated_datasList.Add(datas4);

                                        if (revenueflag == false)
                                            foreach (var syn in synonyms)
                                            {
                                                if (datas4.LineItem.ToUpper() == syn.ToUpper())
                                                {

                                                    // mulBy = -1;
                                                    revenueflag = true;

                                                    revenue_integratedDatas = datas4;
                                                    // change revenue synonyms to cost of sales synonym
                                                    synonyms = new List<string>();
                                                    synonyms = Costofsalesynonyms.Split('%').ToList(); // convert comma seperated values to list
                                                    break;
                                                }
                                            }



                                    }

                                }

                                //if (categoryByInitialSetups != null && categoryByInitialSetups.Count > 0)
                                //{
                                //    var list = categoryByInitialSetups.FindAll(x => x.Category == "Operating").ToList();
                                //}

                                foreach (Datas datas4 in DataProcessing_list.Where(x => x.Sequence >= gross_Seq).ToList().FindAll(x => x.Category == "Operating" && !x.LineItem.ToLower().Contains("depreciation") && !x.LineItem.ToLower().Contains("amortization")).OrderBy(x => x.Sequence).ToList())
                                {
                                    if (datas4.Values != null && datas4.Values.Count > 0)
                                        foreach (var item in datas4.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                    //var checkcategory = categoryByInitialSetups.Find(x => x.DatasId == datas4.DataId);
                                    Integrated_datasList.Add(datas4);
                                }


                                // Find Total Mixed category
                                List<Datas> MixedList = DataProcessing_list.FindAll(x => x.Category == "Mixed").ToList();


                                // Find Total operating and NonOperating Mixed category
                                List<MixedSubDatas> MixedOperatingList = new List<MixedSubDatas>();
                                List<MixedSubDatas> MixedNonOperatingList = new List<MixedSubDatas>();

                                foreach (Datas dt in MixedList)
                                {
                                    var MixedSubdataList = iMixedSubDatas.FindBy(x => x.DatasId == dt.DataId && x.InitialSetupId == InitialSetupId && !x.LineItem.ToLower().Contains("depreciation") && !x.LineItem.ToLower().Contains("amortization")).ToList();
                                    if (MixedSubdataList != null && MixedSubdataList.Count > 0)
                                    {
                                        //MixedSubValues values = new MixedSubValues();
                                        foreach (var item in MixedSubdataList)
                                        {
                                            var MixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == item.Id).ToList();
                                            item.MixedSubValues = new List<MixedSubValues>();
                                            item.MixedSubValues = MixedSubValuesList != null && MixedSubValuesList.Count > 0 ? MixedSubValuesList : new List<MixedSubValues>();
                                            if (item.Category == "Operating")
                                                MixedOperatingList.Add(item);
                                            else
                                                MixedNonOperatingList.Add(item);
                                        }
                                    }
                                }

                                //// Add Mixed Operating in Integrated_datasList
                                Datas Moperating_datas = new Datas();
                                foreach (MixedSubDatas dt in MixedOperatingList)
                                {
                                    Moperating_datas = new Datas();
                                    Moperating_datas.LineItem = dt.LineItem;
                                    Moperating_datas.IsTally = dt.IsTally;
                                    Moperating_datas.Sequence = (Integrated_datasList.Count + 1);
                                    Moperating_datas.Category = dt.Category;
                                    Moperating_datas.IsParentItem = false;
                                    Moperating_datas.Values = new List<Values>();
                                    foreach (MixedSubValues val in dt.MixedSubValues)
                                    {
                                        Values MoperatingValues = new Values();
                                        MoperatingValues.FilingDate = val.FilingDate;
                                        // MoperatingValues.Value = val.Value;
                                        MoperatingValues.Value = !string.IsNullOrEmpty(val.Value) ? Convert.ToString(mulBy * Convert.ToDouble(val.Value)) : null;
                                        Moperating_datas.Values.Add(MoperatingValues);
                                    }
                                    Integrated_datasList.Add(Moperating_datas);
                                }
                                ////////////
                                Datas EBITDA_datas = new Datas();
                                EBITDA_datas.LineItem = "EBITDA";
                                EBITDA_datas.IsTally = true;
                                EBITDA_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBITDA_datas.Category = (string)null;
                                EBITDA_datas.IsParentItem = false;
                                EBITDA_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    double num2 = 0.0;
                                    Values values3 = new Values();
                                    foreach (Datas datas4 in Integrated_datasList.FindAll(x => x.Sequence >= gross_Seq).ToList())
                                    {
                                        Values values4 = datas4.Values.Find(x => x.FilingDate == obj.FilingDate);
                                        num2 = num2 + (values4 != null && !string.IsNullOrEmpty(values4.Value) ? Convert.ToDouble(values4.Value) : 0);
                                    }
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2);
                                    EBITDA_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBITDA_datas);

                                //bind depreciation
                                if (Depreciation_datas != null)
                                {
                                    if (Depreciation_datas.Values != null && Depreciation_datas.Values.Count > 0)
                                        foreach (var item in Depreciation_datas.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                    Integrated_datasList.Add(Depreciation_datas);

                                }


                                //bind EBITA
                                Datas EBITA_datas = new Datas();
                                EBITA_datas.LineItem = "EBITA";
                                EBITA_datas.IsTally = true;
                                EBITA_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBITA_datas.Category = (string)null;
                                EBITA_datas.IsParentItem = false;
                                EBITA_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    Values values3 = new Values();
                                    Values values4 = EBITDA_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values Depreciation_values = Depreciation_datas != null && Depreciation_datas.Values != null ? Depreciation_datas.Values.Find(x => x.FilingDate == obj.FilingDate) : null;
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (Depreciation_values == null || Depreciation_values.Value == null ? 0.0 : Convert.ToDouble(Depreciation_values.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    EBITA_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBITA_datas);



                                //calculate amortization
                                if (Amortization_datas != null)
                                {
                                    if (Amortization_datas.Values != null && Amortization_datas.Values.Count > 0)
                                        foreach (var item in Amortization_datas.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                    Integrated_datasList.Add(Amortization_datas);

                                }

                              




                                //calculate EBIT
                                Datas EBIT_datas = new Datas();
                                EBIT_datas.LineItem = "EBIT";
                                EBIT_datas.IsTally = true;
                                EBIT_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBIT_datas.Category = (string)null;
                                EBIT_datas.IsParentItem = false;
                                EBIT_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    Values values3 = new Values();
                                    Values values4 = EBITA_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values values5 = Amortization_datas?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    EBIT_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBIT_datas);


                                // all the Non -operating item of Raw Historical and Mixed (Non-Operating Part)
                                List<Datas> NonOperatingItemList = filingsList1[0].Datas.FindAll(x => x.Category == "Non-Operating" && !x.LineItem.ToLower().Contains("depreciation") && !x.LineItem.ToLower().Contains("amortization")).OrderBy(x => x.Sequence).ToList();
                                foreach (Datas datas4 in NonOperatingItemList)
                                {
                                    if (!datas4.LineItem.Contains("Amortization") && !datas4.LineItem.Contains("Extraordinary"))
                                    {

                                        if (!datas4.LineItem.ToLower().Contains("Gains") || !datas4.LineItem.ToLower().Contains("income"))
                                        {
                                            if (datas4.Values != null && datas4.Values.Count > 0)
                                                foreach (var item in datas4.Values)
                                                {
                                                    item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                                }
                                        }
                                        Integrated_datasList.Add(datas4);

                                    }
                                }


                                //// Add Mixed Non Operating in Integrated_datasList
                                Datas MNonoperating_datas = new Datas();
                                foreach (MixedSubDatas dt in MixedNonOperatingList)
                                {
                                    MNonoperating_datas = new Datas();
                                    MNonoperating_datas.LineItem = dt.LineItem;
                                    MNonoperating_datas.IsTally = dt.IsTally;
                                    MNonoperating_datas.Sequence = (Integrated_datasList.Count + 1);
                                    MNonoperating_datas.Category = dt.Category;
                                    MNonoperating_datas.IsParentItem = false;
                                    MNonoperating_datas.Values = new List<Values>();
                                    foreach (MixedSubValues val in dt.MixedSubValues)
                                    {
                                        Values MNonoperatingValues = new Values();
                                        MNonoperatingValues.FilingDate = val.FilingDate;
                                        //  MNonoperatingValues.Value = val.Value;
                                        MNonoperatingValues.Value = !string.IsNullOrEmpty(val.Value) ? Convert.ToString(mulBy * Convert.ToDouble(val.Value)) : null;
                                        MNonoperating_datas.Values.Add(MNonoperatingValues);
                                    }
                                    Integrated_datasList.Add(MNonoperating_datas);
                                }
                                ////////////


                                Datas EBT_datas = new Datas();
                                EBT_datas.LineItem = "EBT";
                                EBT_datas.IsTally = true;
                                EBT_datas.Sequence = (Integrated_datasList.Count + 1);
                                EBT_datas.Category = (string)null;
                                EBT_datas.IsParentItem = false;
                                EBT_datas.Values = new List<Values>();
                                foreach (Values obj in MaxValues_data.Values)
                                {
                                    double num2 = 0.0;
                                    Values values3 = new Values();
                                    NonOperatingItemList.RemoveAll(x =>
                                    {
                                        if (!x.LineItem.Contains("Amortization"))
                                            return x.LineItem.Contains("Extraordinary");
                                        return true;
                                    });
                                    foreach (Datas datas4 in NonOperatingItemList)
                                    {
                                        Values values4 = datas4.Values.Find(x => x.FilingDate == obj.FilingDate);
                                        num2 += values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value);
                                    }
                                    Values values5 = EBIT_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num3 = num2 + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(Convert.ToString(num3));
                                    EBT_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(EBT_datas);


                                //Provision of Taxes
                                Datas datas11 = new Datas();
                                Datas datas12 = filingsList1[0].Datas.Find(x => x.LineItem.Contains("Provision"));
                                if (datas12 != null)
                                {
                                    if (datas12.Values != null && datas12.Values.Count > 0)
                                        foreach (var item in datas12.Values)
                                        {
                                            item.Value = !string.IsNullOrEmpty(item.Value) ? Convert.ToString(mulBy * Convert.ToDouble(item.Value)) : null;
                                        }
                                }
                                Integrated_datasList.Add(datas12);

                                // NET INCOME before extraordinary items
                                Datas NetIncomeBefore_datas = new Datas();
                                NetIncomeBefore_datas.LineItem = "NET INCOME before extraordinary items";
                                NetIncomeBefore_datas.IsTally = true;
                                NetIncomeBefore_datas.Sequence = (Integrated_datasList.Count + 1);
                                NetIncomeBefore_datas.Category = (string)null;
                                NetIncomeBefore_datas.IsParentItem = false;
                                NetIncomeBefore_datas.Values = new List<Values>();
                                foreach (Values values2 in MaxValues_data.Values)
                                {
                                    Values obj = values2;
                                    Values values3 = new Values();
                                    Values values4 = EBT_datas.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values values5 = datas12?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    NetIncomeBefore_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(NetIncomeBefore_datas);
                                Datas datas14 = new Datas();
                                Datas datas15 = filingsList1[0].Datas.Find(x => x.LineItem.Contains("Extraordinary"));
                                if (datas15 != null)
                                    Integrated_datasList.Add(datas15);
                                Datas NetIncomeAfter_datas = new Datas();
                                NetIncomeAfter_datas.LineItem = "NET INCOME after extraordinary items";
                                NetIncomeAfter_datas.IsTally = true;
                                NetIncomeAfter_datas.Sequence = (Integrated_datasList.Count + 1);
                                NetIncomeAfter_datas.Category = (string)null;
                                NetIncomeAfter_datas.IsParentItem = false;
                                NetIncomeAfter_datas.Values = new List<Values>();
                                foreach (Values values2 in MaxValues_data.Values)
                                {
                                    Values obj = values2;
                                    Values values3 = new Values();
                                    Values values4 = NetIncomeBefore_datas?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    Values values5 = datas15?.Values.Find(x => x.FilingDate == obj.FilingDate);
                                    double num2 = (values4 == null || values4.Value == null ? 0.0 : Convert.ToDouble(values4.Value)) + (values5 == null || values5.Value == null ? 0.0 : Convert.ToDouble(values5.Value));
                                    values3.FilingDate = obj.FilingDate;
                                    values3.Value = Convert.ToString(num2 != 0.0 ? Convert.ToString(num2) : (string)null);
                                    NetIncomeAfter_datas.Values.Add(values3);
                                }
                                Integrated_datasList.Add(NetIncomeAfter_datas);
                                filingsList1[0].Datas = Integrated_datasList;

                                // Save Income Statement data in IntegratedDatas and Values
                                var IntegratedDatasIncomChk = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == 1).ToList();
                                if (IntegratedDatasIncomChk == null || IntegratedDatasIncomChk.Count == 0) ///////If data is not avlbl in IntegratedData save then only.
                                {
                                    foreach (var item in Integrated_datasList)
                                    {
                                        if (item != null && !string.IsNullOrEmpty(item.LineItem) && item.IsParentItem != true)
                                        {

                                            IntegratedDatas integratedDatasObj = new IntegratedDatas();
                                            integratedDatasObj.Id = 0;
                                            integratedDatasObj.Category = item.Category;
                                            integratedDatasObj.Sequence = item.Sequence;
                                            integratedDatasObj.LineItem = item.LineItem;
                                            integratedDatasObj.IsTally = item.IsTally;
                                            integratedDatasObj.IsParentItem = item.IsParentItem != null ? item.IsParentItem : false;
                                            integratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                            integratedDatasObj.IntegratedValues = new List<IntegratedValues>();

                                            foreach (var valueobj in item.Values)
                                            {
                                                IntegratedValues obj = new IntegratedValues();
                                                obj.Id = 0;
                                                obj.FilingDate = valueobj.FilingDate;
                                                obj.Value = valueobj.Value;
                                                DateTime Dt = new DateTime();
                                                Dt = Convert.ToDateTime(valueobj.FilingDate);
                                                obj.Year = Convert.ToString(Dt.Year);
                                                integratedDatasObj.IntegratedValues.Add(obj);
                                            }
                                            integratedDatasObj.InitialSetupId = InitialSetupId == 0 ? null : InitialSetupId;
                                            iIntegratedDatas.Add(integratedDatasObj);
                                            iIntegratedDatas.Commit();
                                        }
                                    }
                                }
                            }
                            else if (filingsList1[0].StatementType == "BALANCE_SHEET")
                            {
                                Datas datas1 = new Datas();
                                List<Datas> DataProcessing_list = filingsList1[0].Datas.OrderBy(x => x.Sequence).ToList();
                                Datas MaxValues_data = DataProcessing_list.First<Datas>();
                                List<Datas> Integrated_datasList = new List<Datas>();
                                // Find Total Mixed category
                                List<Datas> MixedList = DataProcessing_list.FindAll(x => x.Category == "Mixed").ToList();
                                foreach (Datas dt in DataProcessing_list)
                                {
                                    if (dt.Category != "Mixed" || dt.IsParentItem == true)
                                    {
                                        Integrated_datasList.Add(dt);
                                    }
                                    else
                                    {
                                        foreach (Datas mixedDT in MixedList)
                                        {
                                            if (mixedDT.DataId == dt.DataId)
                                            {
                                                var MixedSubdataList = iMixedSubDatas.FindBy(x => x.DatasId == dt.DataId && x.InitialSetupId == InitialSetupId).ToList();
                                                if (MixedSubdataList != null && MixedSubdataList.Count > 0)
                                                {
                                                    foreach (var item in MixedSubdataList)
                                                    {
                                                        var MixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == item.Id).ToList();
                                                        item.MixedSubValues = new List<MixedSubValues>();
                                                        item.MixedSubValues = MixedSubValuesList != null && MixedSubValuesList.Count > 0 ? MixedSubValuesList : new List<MixedSubValues>();

                                                    }
                                                }

                                                Datas Balance_datas = new Datas();
                                                foreach (MixedSubDatas msd in MixedSubdataList)
                                                {
                                                    Balance_datas = new Datas();
                                                    Balance_datas.LineItem = msd.LineItem;
                                                    Balance_datas.IsTally = msd.IsTally;
                                                    Balance_datas.Sequence = (Integrated_datasList.Count + 1);
                                                    Balance_datas.Category = msd.Category;
                                                    Balance_datas.IsParentItem = false;
                                                    Balance_datas.Values = new List<Values>();
                                                    foreach (MixedSubValues val in msd.MixedSubValues)
                                                    {
                                                        Values MNonoperatingValues = new Values();
                                                        MNonoperatingValues.FilingDate = val.FilingDate;
                                                        MNonoperatingValues.Value = val.Value;
                                                        Balance_datas.Values.Add(MNonoperatingValues);
                                                    }
                                                    Integrated_datasList.Add(Balance_datas);
                                                }
                                            }
                                        }
                                    }
                                }
                                filingsList1[0].Datas = Integrated_datasList;
                                var IntegratedDatasBalanceChk = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == 2).ToList();
                                // Save BalanceSheet data in IntegratedDatas and Values
                                if (IntegratedDatasBalanceChk == null || IntegratedDatasBalanceChk.Count == 0)
                                {
                                    foreach (var item in Integrated_datasList)
                                    {
                                        IntegratedDatas integratedDatasObj = new IntegratedDatas();
                                        integratedDatasObj.Id = 0;
                                        integratedDatasObj.Category = item.Category;
                                        integratedDatasObj.Sequence = item.Sequence;
                                        integratedDatasObj.LineItem = item.LineItem;
                                        integratedDatasObj.IsTally = item.IsTally;
                                        integratedDatasObj.IsParentItem = item.IsParentItem != null ? item.IsParentItem : false;
                                        integratedDatasObj.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                        integratedDatasObj.IntegratedValues = new List<IntegratedValues>();

                                        foreach (var valueobj in item.Values)
                                        {
                                            IntegratedValues obj = new IntegratedValues();
                                            obj.Id = 0;
                                            obj.FilingDate = valueobj.FilingDate;
                                            obj.Value = valueobj.Value;
                                            DateTime Dt = new DateTime();
                                            Dt = Convert.ToDateTime(valueobj.FilingDate);
                                            obj.Year = Convert.ToString(Dt.Year);
                                            integratedDatasObj.IntegratedValues.Add(obj);
                                        }
                                        integratedDatasObj.InitialSetupId = InitialSetupId == 0 ? null : InitialSetupId;
                                        iIntegratedDatas.Add(integratedDatasObj);
                                        iIntegratedDatas.Commit();
                                    }
                                }
                            }
                            else if (filingsList1[0].StatementType == "CASH_FLOW")
                            {
                                Datas datas1 = new Datas();
                                List<Datas> DataProcessing_list = filingsList1[0].Datas.OrderBy(x => x.Sequence).ToList();
                                Datas MaxValues_data = DataProcessing_list.First<Datas>();
                                List<Datas> Integrated_datasList = new List<Datas>();
                                // Find Total Mixed category
                                List<Datas> MixedList = DataProcessing_list.FindAll(x => x.Category == "Mixed").ToList();
                                foreach (Datas dt in DataProcessing_list)
                                {
                                    if (dt.Category != "Mixed" || dt.IsParentItem == true)
                                    {
                                        Integrated_datasList.Add(dt);
                                    }
                                    else
                                    {
                                        foreach (Datas mixedDT in MixedList)
                                        {
                                            if (mixedDT.DataId == dt.DataId)
                                            {
                                                var MixedSubdataList = iMixedSubDatas.FindBy(x => x.DatasId == dt.DataId && x.InitialSetupId == InitialSetupId).ToList();
                                                if (MixedSubdataList != null && MixedSubdataList.Count > 0)
                                                {
                                                    foreach (var item in MixedSubdataList)
                                                    {
                                                        var MixedSubValuesList = iMixedSubValues.FindBy(x => x.MixedSubDatasId == item.Id).ToList();
                                                        item.MixedSubValues = new List<MixedSubValues>();
                                                        item.MixedSubValues = MixedSubValuesList != null && MixedSubValuesList.Count > 0 ? MixedSubValuesList : new List<MixedSubValues>();

                                                    }
                                                }

                                                Datas Balance_datas = new Datas();
                                                foreach (MixedSubDatas msd in MixedSubdataList)
                                                {
                                                    Balance_datas = new Datas();
                                                    Balance_datas.LineItem = msd.LineItem;
                                                    Balance_datas.IsTally = msd.IsTally;
                                                    Balance_datas.Sequence = (Integrated_datasList.Count + 1);
                                                    Balance_datas.Category = msd.Category;
                                                    Balance_datas.IsParentItem = false;
                                                    Balance_datas.Values = new List<Values>();
                                                    foreach (MixedSubValues val in msd.MixedSubValues)
                                                    {
                                                        Values MNonoperatingValues = new Values();
                                                        MNonoperatingValues.FilingDate = val.FilingDate;
                                                        MNonoperatingValues.Value = val.Value;
                                                        Balance_datas.Values.Add(MNonoperatingValues);
                                                    }
                                                    Integrated_datasList.Add(Balance_datas);
                                                }
                                            }
                                        }
                                    }
                                }
                                filingsList1[0].Datas = Integrated_datasList;
                                var IntegratedDatasBalanceChk = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == 2).ToList();
                                // Save BalanceSheet data in IntegratedDatas and Values
                                if (IntegratedDatasBalanceChk == null || IntegratedDatasBalanceChk.Count == 0)
                                {
                                    foreach (var item in Integrated_datasList)
                                    {
                                        IntegratedDatas integratedDatasObj = new IntegratedDatas();
                                        integratedDatasObj.Id = 0;
                                        integratedDatasObj.Category = item.Category;
                                        integratedDatasObj.Sequence = item.Sequence;
                                        integratedDatasObj.LineItem = item.LineItem;
                                        integratedDatasObj.IsTally = item.IsTally;
                                        integratedDatasObj.IsParentItem = item.IsParentItem != null ? item.IsParentItem : false;
                                        integratedDatasObj.StatementTypeId = (int)StatementTypeEnum.CashFlowStatement;
                                        integratedDatasObj.IntegratedValues = new List<IntegratedValues>();

                                        foreach (var valueobj in item.Values)
                                        {
                                            IntegratedValues obj = new IntegratedValues();
                                            obj.Id = 0;
                                            obj.FilingDate = valueobj.FilingDate;
                                            obj.Value = valueobj.Value;
                                            DateTime Dt = new DateTime();
                                            Dt = Convert.ToDateTime(valueobj.FilingDate);
                                            obj.Year = Convert.ToString(Dt.Year);
                                            integratedDatasObj.IntegratedValues.Add(obj);
                                        }
                                        integratedDatasObj.InitialSetupId = InitialSetupId == 0 ? null : InitialSetupId;
                                        iIntegratedDatas.Add(integratedDatasObj);
                                        iIntegratedDatas.Commit();
                                    }
                                }
                            }
                        }
                        ///////////////////////Statement of Retained Earnings///////////////////////
                        int YearCount = Convert.ToInt32(endYear) - Convert.ToInt32(startYear) + 1;
                        int StYear = Convert.ToInt32(startYear);
                        Filings FObj = new Filings();
                        List<Datas> DatasRE = new List<Datas>();
                        FObj.CompanyName = CompanyName;
                        FObj.StatementType = "STATEMENT OF RETAINED EARNINGS";
                        FObj.InitialSetupId = InitialSetupId;
                        FObj.ReportName = "STATEMENT OF RETAINED EARNINGS";
                        FObj.Unit = "";

                        Datas DObj = new Datas();
                        DObj.LineItem = "RETAINED EARNINGS (BEGINNING YEAR)";
                        DObj.Sequence = 1;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = false;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        DObj = new Datas();
                        DObj.LineItem = "Net Income";
                        DObj.Sequence = 2;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = false;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        DObj = new Datas();
                        DObj.LineItem = "Dividends Paid";
                        DObj.Sequence = 3;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = false;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        DObj = new Datas();
                        DObj.LineItem = "RETAINED EARNINGS (END YEAR)";
                        DObj.Sequence = 4;
                        DObj.Category = "";
                        DObj.IsParentItem = false;
                        DObj.IsTally = true;
                        DObj.Values = new List<Values>();
                        StYear = Convert.ToInt32(startYear);
                        for (int i = 0; i < YearCount; i++)
                        {
                            Values VObj = new Values();
                            VObj.Value = null;
                            VObj.FilingDate = "01-Jan-" + Convert.ToString(StYear);
                            DObj.Values.Add(VObj);
                            StYear = StYear + 1;
                        }
                        DatasRE.Add(DObj);

                        FObj.Datas = DatasRE;
                        List<Filings> FilingsRE = new List<Filings>();
                        FilingsRE.Add(FObj);


                        FilingsArray filingsArrayRE = new FilingsArray()
                        {
                            CompanyName = FilingsRE[0].CompanyName,
                            StatementType = "STATEMENT OF RETAINED EARNINGS",
                            Filings = FilingsRE[0]
                        };
                        filingsArrayList.Add(filingsArrayRE);
                        ////////////////////////////////////////////////////////////////////////////


                        /////////////////////////SAVE Retained Earnings/////////////////////////////
                        var IntegratedDatasREChk = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId && x.StatementTypeId == (int)StatementTypeEnum.RetainedEarningsStatement).ToList();
                        if (IntegratedDatasREChk == null || IntegratedDatasREChk.Count == 0)
                        {
                            foreach (var item in DatasRE)
                            {
                                IntegratedDatas integratedDatasObj = new IntegratedDatas();
                                integratedDatasObj.Id = 0;
                                integratedDatasObj.Category = item.Category;
                                integratedDatasObj.Sequence = item.Sequence;
                                integratedDatasObj.LineItem = item.LineItem;
                                integratedDatasObj.IsTally = item.IsTally;
                                integratedDatasObj.IsParentItem = item.IsParentItem != null ? item.IsParentItem : false;
                                integratedDatasObj.StatementTypeId = (int)StatementTypeEnum.RetainedEarningsStatement;
                                integratedDatasObj.IntegratedValues = new List<IntegratedValues>();
                                foreach (var valueobj in item.Values)
                                {
                                    IntegratedValues obj = new IntegratedValues();
                                    obj.Id = 0;
                                    obj.FilingDate = valueobj.FilingDate;
                                    obj.Value = valueobj.Value;
                                    DateTime Dt = new DateTime();
                                    Dt = Convert.ToDateTime(valueobj.FilingDate);
                                    obj.Year = Convert.ToString(Dt.Year);
                                    integratedDatasObj.IntegratedValues.Add(obj);
                                }
                                //integratedDatasObj.InitialSetupId = item.InitialSetupId != 0 ? Convert.ToInt64(item.InitialSetupId) : 0;
                                integratedDatasObj.InitialSetupId = InitialSetupId == 0 ? null : InitialSetupId;
                                iIntegratedDatas.Add(integratedDatasObj);
                                iIntegratedDatas.Commit();
                            }
                        }

                        ////////////////////////////////////////////////////////////////////////////
                        renderResult.StatusCode = 1;
                        renderResult.Result = filingsArrayList;
                    }
                }
                return Ok(renderResult);

            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }



        #endregion


        #region Hist Analysis and Forcast Ratio

        [HttpPost]
        [Route("EvaluateForcastRatio")]
        public ActionResult EvaluateForcastRatio([FromBody] List<ForcastRatioFilingsViewModel> ForcastRatioFilingsvmList)
        {
            try
            {
                if (ForcastRatioFilingsvmList != null && ForcastRatioFilingsvmList.Count > 0)
                {
                    bool IsIntegratedSaved = true;
                    long? initialSetupId = 0;
                    long integratedReveneId = 0;
                    long integratedCostOfSalesId = 0;
                    IntegratedDatas RevenueDatasIntegrated = new IntegratedDatas();
                    IntegratedDatas CostOfSalesIntegrated = new IntegratedDatas();
                    InitialSetup_IValuation InitialSetup_IValuationObj = new InitialSetup_IValuation();
                    // for revenue
                    bool Revenueflag = false;
                    // Hard code for now                            
                    string revenuesynonyms = "Net Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, net";
                    List<string> synonyms = revenuesynonyms.Split('%').ToList(); // convert comma seperated values to list
                                                                                 // for calculate values till revenue

                    // Hard code for now                            
                    string Costofsalesynonyms = "Cost of sales%COGS%Cost of Goods Sold%Cost of Revenue%Cost of Products Sold%Total cost of revenue%Total cost of revenues%Cost of products sold, excluding amortization of intangible assets%Costs of goods sold%Cost of equipment and services revenues%Cost of revenues%Cost of revenue (COR)";
                    //Costofsalesynonyms = Costofsalesynonyms.Replace("TT", "");
                    List<string> CostofsalesSynonyms = Costofsalesynonyms.Split('%').ToList(); // convert comma seperated values to list


                    //bool ForcastRevenue=false;
                    //save data to ForcastRatioDatas 
                    foreach (ForcastRatioFilingsViewModel ForcastRatioFilingsObj in ForcastRatioFilingsvmList)
                    {
                        initialSetupId = ForcastRatioFilingsObj.ForcastRatioDatasVM.First().InitialSetupId != null ? ForcastRatioFilingsObj.ForcastRatioDatasVM.First().InitialSetupId : 0;
                        if (ForcastRatioFilingsObj.ForcastRatioDatasVM != null && ForcastRatioFilingsObj.ForcastRatioDatasVM.Count > 0)
                        {
                            //Save  Forcast Ratio one by one 
                            foreach (ForcastRatioDatasViewModel ForcastRatioDatasVMObj in ForcastRatioFilingsObj.ForcastRatioDatasVM)
                            {
                                ForcastRatioDatas tblforcastRatioDatasObj = new ForcastRatioDatas();

                                // map ForcastRatioDatasViewModel to ForcastRatioDatas
                                tblforcastRatioDatasObj = mapper.Map<ForcastRatioDatasViewModel, ForcastRatioDatas>(ForcastRatioDatasVMObj);

                                // Values
                                if (ForcastRatioDatasVMObj.ForcastRatioValuesVM != null && ForcastRatioDatasVMObj.ForcastRatioValuesVM.Count > 0)
                                {
                                    tblforcastRatioDatasObj.ForcastRatioValues = new List<ForcastRatioValues>();
                                    foreach (ForcastRatioValuesViewModel forcastRatioValues in ForcastRatioDatasVMObj.ForcastRatioValuesVM)
                                    {
                                        // map ForcastRatioDatasViewModel to ForcastRatioDatas
                                        ForcastRatioValues Value = mapper.Map<ForcastRatioValuesViewModel, ForcastRatioValues>(forcastRatioValues);
                                        tblforcastRatioDatasObj.ForcastRatioValues.Add(Value);
                                    }
                                }

                                if (ForcastRatioDatasVMObj.ForcastRatio_ExplicitValuesVM != null && ForcastRatioDatasVMObj.ForcastRatio_ExplicitValuesVM.Count > 0)
                                {
                                    tblforcastRatioDatasObj.ForcastRatio_ExplicitValues = new List<ForcastRatio_ExplicitValues>();
                                    foreach (ForcastRatio_ExplicitValuesViewModel forcastRatioValues in ForcastRatioDatasVMObj.ForcastRatio_ExplicitValuesVM)
                                    {
                                        // map ForcastRatioDatasViewModel to ForcastRatioDatas
                                        ForcastRatio_ExplicitValues ExplicitValue = mapper.Map<ForcastRatio_ExplicitValuesViewModel, ForcastRatio_ExplicitValues>(forcastRatioValues);
                                        tblforcastRatioDatasObj.ForcastRatio_ExplicitValues.Add(ExplicitValue);
                                    }
                                }

                                if (tblforcastRatioDatasObj.Id == 0)
                                {
                                    iForcastRatioDatas.Add(tblforcastRatioDatasObj);
                                    iForcastRatioDatas.Commit();
                                }
                                else
                                {
                                    // remove Explicit Values and add new values
                                    // delete code
                                    iForcastRatio_ExplicitValues.DeleteWhere(x => x.ForcastRatioDatasId == tblforcastRatioDatasObj.Id);
                                    iForcastRatio_ExplicitValues.Commit();
                                    //Save Code
                                    iForcastRatio_ExplicitValues.AddMany(tblforcastRatioDatasObj.ForcastRatio_ExplicitValues);
                                    iForcastRatio_ExplicitValues.Commit();
                                }
                            }
                            //}

                            InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.Id == initialSetupId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                            Integrated_ExplicitValues explicitValue = new Integrated_ExplicitValues();
                            List<Integrated_ExplicitValues> explicitValuesList = new List<Integrated_ExplicitValues>();
                            Integrated_ExplicitValues calculatedExplicitValues = new Integrated_ExplicitValues();
                            List<Integrated_ExplicitValues> calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                            if (InitialSetup_IValuationObj != null)
                            {
                                int year = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);
                                for (int i = 1; i <= InitialSetup_IValuationObj.ExplicitYearCount + 1; i++)
                                {
                                    explicitValue = new Integrated_ExplicitValues();
                                    year = year + 1;
                                    explicitValue.Year = Convert.ToString(year);
                                    explicitValue.Value = "";
                                    explicitValue.Id = 0;
                                    explicitValuesList.Add(explicitValue);
                                }
                            }
                            bool flag = false;
                            IntegratedDatas errorObj = new IntegratedDatas();
                            try
                            {
                                //income
                                if (ForcastRatioFilingsObj.StatementType == "INCOME")
                                {
                                    try
                                    {

                                        // get all the integratedDatas of income Statement
                                        List<IntegratedDatas> tblintegrateddatas_IncomeListObj = initialSetupId != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == initialSetupId && x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement).ToList() : null;

                                        if (tblintegrateddatas_IncomeListObj != null && tblintegrateddatas_IncomeListObj.Count > 0)
                                        {
                                            //get all Explicit Values  of income
                                            List<Integrated_ExplicitValues> Integrated_explicitValuesListObj = iIntegrated_ExplicitValues.FindBy(x => tblintegrateddatas_IncomeListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                                            //delete all Explicit of income
                                            if (Integrated_explicitValuesListObj != null && Integrated_explicitValuesListObj.Count > 0)
                                            {
                                                iIntegrated_ExplicitValues.DeleteMany(Integrated_explicitValuesListObj);
                                                iIntegrated_ExplicitValues.Commit();
                                            }


                                            //get all Explicit Values  of income
                                            List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatas_IncomeListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                                            List<IntegratedDatas> IntegratedTillRevenue = new List<IntegratedDatas>();


                                            #region for revenue

                                            int i = 0;
                                            foreach (IntegratedDatas obj in tblintegrateddatas_IncomeListObj)
                                            {
                                                errorObj = obj;
                                                i = i + 1;
                                                if (obj.IsParentItem != true)
                                                {
                                                    IntegratedTillRevenue.Add(obj);
                                                    integratedReveneId = obj.Id;
                                                    //RevenueDatasIntegrated = obj;
                                                    // check for Revenue or its synonyms 
                                                    foreach (var syn in synonyms)
                                                    {
                                                        if (obj.LineItem.ToUpper() == syn.ToUpper())
                                                        {
                                                            Revenueflag = true;
                                                            foreach (IntegratedDatas datasObj in IntegratedTillRevenue)
                                                            {

                                                                datasObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();

                                                                // find Forcast by IntegratedId
                                                                ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                                calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                                //save forcast ratio
                                                                ForcastRatioDatas forcastrevenue = new ForcastRatioDatas();
                                                                List<ForcastRatio_ExplicitValues> Revenue_ForcastExplicitList = new List<ForcastRatio_ExplicitValues>();
                                                                forcastrevenue = iForcastRatioDatas.GetSingle(x => x.IntegratedDatasId == integratedReveneId);
                                                                Revenue_ForcastExplicitList = forcastrevenue != null ? iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastrevenue.Id).ToList() : null;

                                                                foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                                {
                                                                    //( Prev Year Value either Historical or Explicit )*( 1+'Hist Analysis &Forecast Ratios Sales Growth)
                                                                    calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                    calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                    calculatedExplicitValues.Year = explicitvalue.Year;
                                                                    double value = 0;
                                                                    // for Value
                                                                    var prevValue = calculatedExplicitValuesList != null && calculatedExplicitValuesList.Count > 0 ? calculatedExplicitValuesList.Find(x => x.Year.Contains(Convert.ToString(Convert.ToInt32(calculatedExplicitValues.Year) - 1))) : null;
                                                                    ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;


                                                                    if (integratedReveneId == datasObj.Id && string.IsNullOrEmpty(forcastExplicitValue.Value))
                                                                    {
                                                                        //special case for Revenue if revenue is null
                                                                        double ForcastrevenueValue = 0;
                                                                        //datasObj.integrated_ExplicitValues.Add();

                                                                        foreach (var tillObj in IntegratedTillRevenue)
                                                                        {
                                                                            Integrated_ExplicitValues item = tillObj.integrated_ExplicitValues != null && tillObj.integrated_ExplicitValues.Count > 0 ? tillObj.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;
                                                                            ForcastrevenueValue = ForcastrevenueValue + (item != null && !string.IsNullOrEmpty(item.Value) ? Convert.ToDouble(item.Value) : 0);
                                                                        }
                                                                        value = ForcastrevenueValue;
                                                                        if (prevValue != null)
                                                                        {
                                                                            ForcastrevenueValue = prevValue.Value != null ? (ForcastrevenueValue - Convert.ToDouble(prevValue.Value)) / (Convert.ToDouble(prevValue.Value)) * 100 : 0;
                                                                        }
                                                                        else
                                                                        {
                                                                            IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;

                                                                            ForcastrevenueValue = integratedValues != null && !string.IsNullOrEmpty(integratedValues.Value) && integratedValues.Value != "0" ? (ForcastrevenueValue - Convert.ToDouble(integratedValues.Value)) / (Convert.ToDouble(integratedValues.Value)) * 100 : 0;
                                                                        }

                                                                        //save forcast revenue
                                                                        ForcastRatio_ExplicitValues ForcastexplicitValue = Revenue_ForcastExplicitList.Find(x => x.Year == explicitvalue.Year);
                                                                        if (ForcastexplicitValue != null)
                                                                        {
                                                                            ForcastexplicitValue.Value = Convert.ToString(Convert.ToDouble(ForcastrevenueValue.ToString("0."))); ;
                                                                            iForcastRatio_ExplicitValues.Update
                                                                                (ForcastexplicitValue);
                                                                            iForcastRatio_ExplicitValues.Commit();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (prevValue != null)
                                                                        {
                                                                            value = prevValue.Value != null ? (Convert.ToDouble(prevValue.Value)) * (1 + (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100) : 0;
                                                                        }
                                                                        else
                                                                        {
                                                                            IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;

                                                                            value = integratedValues != null && !string.IsNullOrEmpty(integratedValues.Value) ? (Convert.ToDouble(integratedValues.Value)) * (1 + (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100) : 0;
                                                                        }
                                                                    }








                                                                    // add to explicit values
                                                                    calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                    calculatedExplicitValuesList.Add(calculatedExplicitValues);

                                                                }
                                                                if (integratedReveneId == datasObj.Id)
                                                                {
                                                                    RevenueDatasIntegrated = new IntegratedDatas
                                                                    {
                                                                        Category = datasObj.Category,
                                                                        InitialSetupId = datasObj.InitialSetupId,
                                                                        LineItem = datasObj.LineItem,
                                                                        Id = datasObj.Id,
                                                                        StatementTypeId = datasObj.StatementTypeId,
                                                                        IsTally = datasObj.IsTally,
                                                                        Sequence = datasObj.Sequence,
                                                                        IsParentItem = datasObj.IsParentItem
                                                                    };
                                                                    RevenueDatasIntegrated.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                                    RevenueDatasIntegrated.integrated_ExplicitValues = calculatedExplicitValuesList;
                                                                }

                                                                // add explicit values to database
                                                                iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                                iIntegrated_ExplicitValues.Commit();
                                                                datasObj.integrated_ExplicitValues = calculatedExplicitValuesList;
                                                            }

                                                            // break in case of found                                            
                                                            break;
                                                        }
                                                    }
                                                }

                                                if (Revenueflag == true)
                                                    break;

                                            }
                                            // if revenue not Exist
                                            if (Revenueflag == false)
                                            {
                                                return BadRequest(new
                                                {
                                                    StatusCode = 0,
                                                    Message = "Revenue not found"
                                                });
                                            }

                                            #endregion

                                            #region Cost of Goods Sold

                                            // for calculate cost of goods sold
                                            List<IntegratedDatas> IntegratedTillCostofsales = new List<IntegratedDatas>();

                                            // cost of sales of His analysis and forcast
                                            //IntegratedDatas costofsales_HistForcast = new IntegratedDatas();
                                            flag = false;
                                            int j = 0;
                                            // for calculate values till Cost of Sales
                                            foreach (IntegratedDatas obj in tblintegrateddatas_IncomeListObj)
                                            {
                                                errorObj = obj;
                                                j = j + 1;
                                                if (j > i)
                                                {
                                                    if (obj.IsParentItem != true)
                                                    {
                                                        IntegratedTillCostofsales.Add(obj);
                                                        integratedCostOfSalesId = obj.Id;
                                                        // check for cost of sales or its synonyms 
                                                        foreach (var syn in CostofsalesSynonyms)
                                                        {
                                                            if (obj.LineItem.ToUpper() == syn.ToUpper())
                                                            {

                                                                foreach (var datasObj in IntegratedTillCostofsales)
                                                                {
                                                                    // find Forcast by IntegratedId
                                                                    ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                                    calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                                    //for save Forcast COGS
                                                                    ForcastRatioDatas forcastCOGS = new ForcastRatioDatas();
                                                                    List<ForcastRatio_ExplicitValues> COGS_ForcastExplicitList = new List<ForcastRatio_ExplicitValues>();
                                                                    forcastCOGS = iForcastRatioDatas.GetSingle(x => x.IntegratedDatasId == integratedCostOfSalesId);
                                                                    COGS_ForcastExplicitList = forcastCOGS != null ? iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastCOGS.Id).ToList() : null;

                                                                    foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                                    {
                                                                        //=(Net Sales of Same Year*'Hist Analysis &Forecast Ratios 'Cost of Sales)
                                                                        calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                        calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                        calculatedExplicitValues.Year = explicitvalue.Year;
                                                                        // for Value

                                                                        ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                                        Integrated_ExplicitValues explicitRevenueValue = RevenueDatasIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                                        double value = 0;

                                                                        if (integratedCostOfSalesId == datasObj.Id && string.IsNullOrEmpty(forcastExplicitValue.Value))
                                                                        {
                                                                            //special case for Revenue if revenue is null 
                                                                            double ForcastCOGSValue = 0;
                                                                            //datasObj.integrated_ExplicitValues.Add();

                                                                            foreach (var tillObj in IntegratedTillRevenue)
                                                                            {
                                                                                Integrated_ExplicitValues item = tillObj.integrated_ExplicitValues != null && tillObj.integrated_ExplicitValues.Count > 0 ? tillObj.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;
                                                                                ForcastCOGSValue = ForcastCOGSValue + (item != null && !string.IsNullOrEmpty(item.Value) ? Convert.ToDouble(item.Value) : 0);
                                                                            }

                                                                            //value=value-depreciation
                                                                            value = ForcastCOGSValue;
                                                                            ForcastCOGSValue = explicitRevenueValue.Value != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) && explicitRevenueValue.Value != "0" ? (ForcastCOGSValue) / (Convert.ToDouble(explicitRevenueValue.Value)) * 100 : 0;

                                                                            //save forcast ratio
                                                                            ForcastRatio_ExplicitValues ForcastexplicitValue = COGS_ForcastExplicitList != null && COGS_ForcastExplicitList.Count > 0 ? COGS_ForcastExplicitList.Find(x => x.Year == explicitvalue.Year) : null;
                                                                            if (ForcastexplicitValue != null)
                                                                            {
                                                                                ForcastexplicitValue.Value = Convert.ToString(Convert.ToDouble(ForcastCOGSValue.ToString("0."))); ;
                                                                                iForcastRatio_ExplicitValues.Update
                                                                                    (ForcastexplicitValue);
                                                                                iForcastRatio_ExplicitValues.Commit();
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            value = explicitRevenueValue.Value != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) ? ((Convert.ToDouble(explicitRevenueValue.Value)) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100 : 0;
                                                                            value = -1 * value;
                                                                        }



                                                                        calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));


                                                                        // add to explicit values
                                                                        calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                    }
                                                                    // found COGS
                                                                    if (integratedCostOfSalesId == datasObj.Id)
                                                                    {
                                                                        flag = true;
                                                                        CostOfSalesIntegrated = new IntegratedDatas
                                                                        {
                                                                            Category = datasObj.Category,
                                                                            InitialSetupId = datasObj.InitialSetupId,
                                                                            LineItem = datasObj.LineItem,
                                                                            Id = datasObj.Id,
                                                                            StatementTypeId = datasObj.StatementTypeId,
                                                                            IsTally = datasObj.IsTally,
                                                                            Sequence = datasObj.Sequence,
                                                                            IsParentItem = datasObj.IsParentItem
                                                                        };
                                                                        CostOfSalesIntegrated.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                                        CostOfSalesIntegrated.integrated_ExplicitValues = calculatedExplicitValuesList;
                                                                    }
                                                                    // add explicit values to database
                                                                    iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                                    iIntegrated_ExplicitValues.Commit();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if (flag == true)
                                                    break;
                                            }
                                            #endregion

                                            List<IntegratedDatas> integratedDatas_StandardList = new List<IntegratedDatas>();
                                            IntegratedDatas integratedDatas_StandardObj = new IntegratedDatas();
                                            int k = 0;
                                            // calculate explicit values for all the line items of Income statement

                                            foreach (IntegratedDatas datasObj in tblintegrateddatas_IncomeListObj)
                                            {
                                                errorObj = datasObj;
                                                k = k + 1;
                                                //IntegratedDatas dataObj = new IntegratedDatas();
                                                if (j == 1 ? k > i : k > j)
                                                {
                                                    integratedDatas_StandardObj = new IntegratedDatas();

                                                    if (datasObj.LineItem.ToUpper().Contains("GROSS"))
                                                    {
                                                        //Revenue + COGS
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {

                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            // for Value

                                                            Integrated_ExplicitValues explicitRevenueValue = RevenueDatasIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                            Integrated_ExplicitValues explicitCOGSValue = CostOfSalesIntegrated.integrated_ExplicitValues != null && CostOfSalesIntegrated.integrated_ExplicitValues.Count > 0 ? CostOfSalesIntegrated.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                            double value = (explicitRevenueValue != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) ? Convert.ToDouble(explicitRevenueValue.Value) : 0) +
                                                                 (explicitCOGSValue != null && !string.IsNullOrEmpty(explicitCOGSValue.Value) ? Convert.ToDouble(explicitCOGSValue.Value) : 0);
                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    }
                                                    else if (datasObj.LineItem.ToUpper().Contains("EBITDA"))
                                                    {
                                                        // sum of all the Operating items except Depreciation
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {

                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            double value = 0;
                                                            // for Value

                                                            foreach (var item in integratedDatas_StandardList)
                                                            {
                                                                if (item.integrated_ExplicitValues != null)
                                                                {
                                                                    Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                                    value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                                }
                                                            }

                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);



                                                    }
                                                    else if (datasObj.LineItem.ToUpper().Contains("EBITA"))
                                                    {
                                                        //  EBITDA+ Depreciation
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        List<Integrated_ExplicitValues> EBItDA_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem == "EBITDA") != null && integratedDatas_StandardList.Find(x => x.LineItem == "EBITDA").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem == "EBITDA").integrated_ExplicitValues : null;

                                                        List<Integrated_ExplicitValues> Depreciation_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem.ToUpper().Contains("DEPRECIATION")) != null && integratedDatas_StandardList.Find(x => x.LineItem.ToUpper().Contains("DEPRECIATION")).integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem.ToUpper().Contains("DEPRECIATION")).integrated_ExplicitValues : null;


                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            double value = 0;
                                                            // for Value
                                                            Integrated_ExplicitValues Ebitda = EBItDA_ExplicitList != null && EBItDA_ExplicitList.Count > 0 ? EBItDA_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;
                                                            Integrated_ExplicitValues depreciation = Depreciation_ExplicitList != null && Depreciation_ExplicitList.Count > 0 ? Depreciation_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;

                                                            value = (Ebitda != null && !string.IsNullOrEmpty(Ebitda.Value) ? Convert.ToDouble(Ebitda.Value) : 0) + (depreciation != null && !string.IsNullOrEmpty(depreciation.Value) ? Convert.ToDouble(depreciation.Value) : 0);

                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    }
                                                    else if (datasObj.LineItem.ToUpper().Contains("EBIT"))
                                                    {
                                                        //  EBITA+ Amortization
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        List<Integrated_ExplicitValues> EBITA_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem == "EBITA") != null && integratedDatas_StandardList.Find(x => x.LineItem == "EBITA").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem == "EBITA").integrated_ExplicitValues : null;

                                                        List<Integrated_ExplicitValues> amortization_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem.ToUpper() == "AMORTIZATION") != null && integratedDatas_StandardList.Find(x => x.LineItem.ToUpper() == "AMORTIZATION").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem.ToUpper() == "AMORTIZATION").integrated_ExplicitValues : null;


                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            double value = 0;
                                                            // for Value
                                                            Integrated_ExplicitValues EBITA = EBITA_ExplicitList != null && EBITA_ExplicitList.Count > 0 ? EBITA_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;
                                                            Integrated_ExplicitValues amortization = amortization_ExplicitList != null && amortization_ExplicitList.Count > 0 ? amortization_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;

                                                            value = (EBITA != null && !string.IsNullOrEmpty(EBITA.Value) ? Convert.ToDouble(EBITA.Value) : 0) + (amortization != null && !string.IsNullOrEmpty(amortization.Value) ? Convert.ToDouble(amortization.Value) : 0);

                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    }
                                                    else if (datasObj.LineItem.ToUpper().Contains("DEPRECIATION"))
                                                    {
                                                        int first = 0;
                                                        //RevenueDatasIntegrated
                                                        ForcastRatioDatasViewModel ForcastPropertyDatas = null;
                                                        ForcastRatioFilingsViewModel balancefilings = ForcastRatioFilingsvmList.Find(x => x.StatementType == "BALANCE_SHEET");
                                                        if (balancefilings != null)
                                                        {
                                                            ForcastPropertyDatas = balancefilings.ForcastRatioDatasVM != null && balancefilings.ForcastRatioDatasVM.Count > 0 ? balancefilings.ForcastRatioDatasVM.Find(x => x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())) : null;
                                                        }



                                                        IntegratedDatas PropertyDatas = iIntegratedDatas.GetSingle(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && x.InitialSetupId == initialSetupId && (x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())));
                                                        //List<Integrated_ExplicitValues> propertyExpValuesList = PropertyDatas != null && PropertyDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == PropertyDatas.Id).ToList() : null;
                                                        // find Forcast by IntegratedId
                                                        ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            //( Prev Year Value either Historical or Explicit )*( 'Hist Analysis &Forecast Ratios Depreciation)
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            // for Value
                                                            //var prevPropertyValue = propertyExpValuesList != null && propertyExpValuesList.Count > 0 ? propertyExpValuesList.Find(x => x.Year.Contains(Convert.ToString(Convert.ToInt32(calculatedExplicitValues.Year) - 1))) : null;
                                                            ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == explicitvalue.Year) : null;
                                                            var prevRevenue = RevenueDatasIntegrated != null && RevenueDatasIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(calculatedExplicitValues.Year) - 1)) : null;
                                                            var prevForcastPPE = ForcastPropertyDatas != null && ForcastPropertyDatas.ForcastRatio_ExplicitValuesVM != null && ForcastPropertyDatas.ForcastRatio_ExplicitValuesVM.Count > 0 ? ForcastPropertyDatas.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(calculatedExplicitValues.Year) - 1)) : null;


                                                            double value = 0;
                                                            if (first == 0)
                                                            {

                                                                IntegratedValues integratedValues = PropertyDatas != null && PropertyDatas != null ? iIntegratedValues.GetSingle(x => x.IntegratedDatasId == PropertyDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(calculatedExplicitValues.Year) - 1)) : null;

                                                                value = integratedValues != null && !string.IsNullOrEmpty(integratedValues.Value) ? ((Convert.ToDouble(integratedValues.Value)) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100 : 0;
                                                                first = 1;
                                                            }
                                                            else
                                                            {

                                                                value = ((prevRevenue != null && !string.IsNullOrEmpty(prevRevenue.Value) ? Convert.ToDouble(prevRevenue.Value) : 0) * (prevForcastPPE != null && !string.IsNullOrEmpty(prevForcastPPE.Value) ? Convert.ToDouble(prevForcastPPE.Value) / 100 : 0)) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) / 100 : 0);
                                                            }

                                                            value = -1 * value;
                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                            // add to explicit values

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }

                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    }
                                                    else if (datasObj.LineItem.ToUpper().Contains("AMORTIZATION") || datasObj.LineItem.ToLower() == ("Extraordinary Items").ToLower())
                                                    {
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {

                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    }
                                                    else if (datasObj.Category == "Operating")
                                                    {
                                                        // find Forcast by IntegratedId
                                                        ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            //=(Net Sales of Same Year*'Hist Analysis &Forecast Ratios 'Cost of Sales)
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            // for Value

                                                            ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                            Integrated_ExplicitValues explicitRevenueValue = RevenueDatasIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                            double value = explicitRevenueValue.Value != null && !string.IsNullOrEmpty(explicitRevenueValue.Value) ? ((Convert.ToDouble(explicitRevenueValue.Value)) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100 : 0;
                                                            value = -1 * value;
                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            // add to explicit values
                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    }
                                                    else if (datasObj.Category == "Non-Operating" || datasObj.Category == "Financing")
                                                    {

                                                        // find Forcast by IntegratedId
                                                        ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                        // Cases of non Operating items
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();


                                                        if (datasObj.LineItem.ToLower().Contains("Interest Income"))
                                                        {
                                                            //write code to calculate Interest Income
                                                            CostOfCapital_IValuation costofCapital = initialSetupId != null ? iCostOfCapital_IValuation.GetSingle(x => x.InitialSetupId == initialSetupId) : null;
                                                            List<IntegratedDatas> DebtDatasList = new List<IntegratedDatas>();

                                                            DebtDatasList = initialSetupId != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == initialSetupId && x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && x.LineItem.ToLower().Contains("debt")).ToList() : null;
                                                            List<IntegratedValues> DebtvaluesList = new List<IntegratedValues>();

                                                            DebtvaluesList = iIntegratedValues.FindBy(x => DebtDatasList.Any(m => m.Id == x.IntegratedDatasId) && x.Year == Convert.ToString(Convert.ToInt32(explicitValuesList.First().Year) - 1)).ToList();

                                                            //all year values are  same so we will calculate only once


                                                            double sumofdebtlastyear = 0;
                                                            double value = 0;


                                                            foreach (var debt in DebtvaluesList)
                                                            {
                                                                sumofdebtlastyear = sumofdebtlastyear + (!string.IsNullOrEmpty(debt.Value) ? Convert.ToDouble(debt.Value) : 0);
                                                            }
                                                            value = sumofdebtlastyear * (costofCapital != null && costofCapital.CostOfDebt != null ? Convert.ToDouble(costofCapital.CostOfDebt) / 100 : 0);


                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;

                                                                //all year values are  same so we will calculate only once

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }

                                                        }
                                                        else if (datasObj.LineItem.ToLower().Contains("Interest Expense") || datasObj.LineItem.ToLower().Contains("Interest and Debt Expense") || datasObj.LineItem.ToLower().Contains("Interest and Other Expense"))
                                                        {
                                                            //write code to calculate Interest Expense
                                                            CostOfCapital_IValuation costofCapital = initialSetupId != null ? iCostOfCapital_IValuation.GetSingle(x => x.InitialSetupId == initialSetupId) : null;
                                                            ForcastRatioDatas forcastRatioCashNcash = new ForcastRatioDatas();
                                                            List<ForcastRatio_ExplicitValues> cahnCashExplicitValuesList = new List<ForcastRatio_ExplicitValues>();

                                                            forcastRatioCashNcash = iForcastRatioDatas.GetSingle(x => (x.LineItem.ToLower().Contains("Cash and cash Equivalents") || x.LineItem.ToLower().Contains("Cash and Equivalents")) && x.InitialSetupId == initialSetupId && x.Category == "Operating");
                                                            if (forcastRatioCashNcash != null)
                                                            {
                                                                cahnCashExplicitValuesList = iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastRatioCashNcash.Id).ToList();
                                                            }
                                                            else
                                                            {
                                                                //find by excess cash

                                                                // cahnCashExplicitValuesList = iForcastRatio_ExplicitValues.FindBy(x => x.ForcastRatioDatasId == forcastRatioCashNcash.Id).ToList();
                                                            }
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                double value = 0;
                                                                ForcastRatio_ExplicitValues explicitValues = cahnCashExplicitValuesList.Find(x => x.Year == explicitvalue.Year);
                                                                // for Value

                                                                value = (costofCapital != null && costofCapital.RiskFreeRate != null ? Convert.ToDouble(costofCapital.RiskFreeRate) / 100 : 0) * (explicitValues != null && !string.IsNullOrEmpty(explicitValues.Value) ? Convert.ToDouble(explicitValues.Value) : 0);
                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }

                                                        }
                                                        else

                                                        {
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                double value = 0;
                                                                // for Value
                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                                var prevValue = calculatedExplicitValuesList != null && calculatedExplicitValuesList.Count > 0 ? calculatedExplicitValuesList.Find(x => x.Year.Contains(Convert.ToString(Convert.ToInt32(calculatedExplicitValues.Year) - 1))) : null;
                                                                if (prevValue != null)
                                                                {
                                                                    //   value = (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100;
                                                                    value = prevValue.Value != null ? (Convert.ToDouble(prevValue.Value)) * (1 + (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100) : 0;
                                                                }
                                                                else
                                                                {
                                                                    IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;


                                                                    value = integratedValues != null && integratedValues.Value != null ? (Convert.ToDouble(integratedValues.Value)) * (1 + (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0) / 100) : 0;
                                                                }
                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                        }

                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                    }
                                                    else if (datasObj.LineItem.ToUpper().Contains("EBT"))
                                                    {
                                                        // sum of all the Non Operating items + EBIt
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        List<IntegratedDatas> NonOperatingList = integratedDatas_StandardList.FindAll(x => x.Category == "Non-Operating"  || x.Category == "Financing").ToList();
                                                        List<Integrated_ExplicitValues> EBIT_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem == "EBIT") != null && integratedDatas_StandardList.Find(x => x.LineItem == "EBIT").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem == "EBIT").integrated_ExplicitValues : null;
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {

                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            double value = 0;
                                                            // for Value
                                                            foreach (var item in NonOperatingList)
                                                            {
                                                                if (item.integrated_ExplicitValues != null)
                                                                {
                                                                    Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                                    value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                                }
                                                            }

                                                            Integrated_ExplicitValues EBIT = EBIT_ExplicitList != null && EBIT_ExplicitList.Count > 0 ? EBIT_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;

                                                            value = value + (EBIT != null && !string.IsNullOrEmpty(EBIT.Value) ? Convert.ToDouble(EBIT.Value) : 0);

                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);



                                                    }
                                                    else if (datasObj.LineItem.Contains("Provision"))
                                                    {
                                                        // EBT for same year * Tax (Operating Tax Rate)

                                                        TaxRates_IValuation tblTaxRatesObj = new TaxRates_IValuation();
                                                        tblTaxRatesObj = iTaxRates_IValuation.GetSingle(x => x.InitialSetupId == initialSetupId);

                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        List<Integrated_ExplicitValues> EBT_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem == "EBT") != null && integratedDatas_StandardList.Find(x => x.LineItem == "EBT").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem == "EBT").integrated_ExplicitValues : null;

                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            double value = 0;
                                                            // for Value
                                                            Integrated_ExplicitValues EBT = EBT_ExplicitList != null && EBT_ExplicitList.Count > 0 ? EBT_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;

                                                            value = ((EBT != null && !string.IsNullOrEmpty(EBT.Value) ? Convert.ToDouble(EBT.Value) : 0) * (tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0)) / 100;
                                                            value = -1 * value;
                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);

                                                    }
                                                    else if (datasObj.LineItem.Contains("NET INCOME before extraordinary items"))
                                                    {
                                                        // EBT for same year * Tax (Operating Tax Rate)

                                                        TaxRates_IValuation tblTaxRatesObj = new TaxRates_IValuation();
                                                        //tblTaxRatesObj = iTaxRates_IValuation.FindBy(x => x.InitialSetupId == initialSetupId).OrderByDescending(x => x.Id).First();
                                                        tblTaxRatesObj = iTaxRates_IValuation.GetSingle(x => x.InitialSetupId == initialSetupId);

                                                        //  EBT+(EBT for same year * Tax (Operating Tax Rate))
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        List<Integrated_ExplicitValues> EBT_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem == "EBT") != null && integratedDatas_StandardList.Find(x => x.LineItem == "EBT").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem == "EBT").integrated_ExplicitValues : null;

                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            double value = 0;
                                                            // for Value
                                                            Integrated_ExplicitValues EBT = EBT_ExplicitList != null && EBT_ExplicitList.Count > 0 ? EBT_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;

                                                            value = (-1 * ((EBT != null && !string.IsNullOrEmpty(EBT.Value) ? Convert.ToDouble(EBT.Value) : 0) * (tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0)) / 100) + (EBT != null && EBT.Value != null ? Convert.ToDouble(EBT.Value) : 0);

                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);

                                                    }
                                                    else if (datasObj.LineItem.Contains("NET INCOME after extraordinary items"))
                                                    {
                                                        // NET INCOME before extraordinary items + Extraordiinary items  
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                        integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                        integratedDatas_StandardObj.Category = datasObj.Category;
                                                        integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                        List<Integrated_ExplicitValues> EBT_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem == "NET INCOME before extraordinary items") != null && integratedDatas_StandardList.Find(x => x.LineItem == "NET INCOME before extraordinary items").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem == "NET INCOME before extraordinary items").integrated_ExplicitValues : null;

                                                        List<Integrated_ExplicitValues> extra_ExplicitList = integratedDatas_StandardList.Find(x => x.LineItem == "Extraordinary Items") != null && integratedDatas_StandardList.Find(x => x.LineItem == "Extraordinary Items").integrated_ExplicitValues != null ? integratedDatas_StandardList.Find(x => x.LineItem == "Extraordinary Items").integrated_ExplicitValues : null;
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            double value = 0;
                                                            // for Value
                                                            Integrated_ExplicitValues NetIncomebefore = EBT_ExplicitList != null && EBT_ExplicitList.Count > 0 ? EBT_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;

                                                            Integrated_ExplicitValues extraOrdinaryItems = extra_ExplicitList != null && extra_ExplicitList.Count > 0 ? extra_ExplicitList.Find(x => x.Year == explicitvalue.Year) : null;

                                                            value = (NetIncomebefore != null && !string.IsNullOrEmpty(NetIncomebefore.Value) ? Convert.ToDouble(NetIncomebefore.Value) : 0) + (extraOrdinaryItems != null && !string.IsNullOrEmpty(extraOrdinaryItems.Value) ? Convert.ToDouble(extraOrdinaryItems.Value) : 0);

                                                            calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                            integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                        }
                                                        // add explicit values to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                        integratedDatas_StandardList.Add(integratedDatas_StandardObj);

                                                    }

                                                }





                                            }


                                        }

                                    }
                                    catch (Exception ss) { }
                                }
                                else if (ForcastRatioFilingsObj.StatementType == "BALANCE_SHEET")
                                {
                                    try
                                    {

                                        // get all the integratedDatas of Balance Sheet or Retained earning
                                        List<IntegratedDatas> tblintegrateddatas_BalanceListObj = initialSetupId != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == initialSetupId && (x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet || x.StatementTypeId == (int)StatementTypeEnum.RetainedEarningsStatement)).ToList() : null;
                                        // get all the integratedDatas of Income Statement or Retained earning
                                        // List<IntegratedDatas> tblintegrateddatas_IncomeStatementObj = initialSetupId != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == initialSetupId && (x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement)).ToList() : null;

                                        List<IntegratedDatas> integratedDatas_StandardList = new List<IntegratedDatas>();
                                        IntegratedDatas integratedDatas_StandardObj = new IntegratedDatas();

                                        if (tblintegrateddatas_BalanceListObj != null && tblintegrateddatas_BalanceListObj.Count > 0)
                                        {
                                            //get all Explicit Values  of balance and Retained Earing
                                            List<Integrated_ExplicitValues> Integrated_explicitValuesListObj = iIntegrated_ExplicitValues.FindBy(x => tblintegrateddatas_BalanceListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();

                                            //delete all Explicit of  balance and Retained Earing
                                            if (Integrated_explicitValuesListObj != null && Integrated_explicitValuesListObj.Count > 0)
                                            {
                                                iIntegrated_ExplicitValues.DeleteMany(Integrated_explicitValuesListObj);
                                                iIntegrated_ExplicitValues.Commit();
                                            }

                                            #region Retained Earnings

                                            // get Retained Earing Values
                                            IntegratedDatas retained_BeginningDatas = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "RETAINED EARNINGS (BEGINNING YEAR)");
                                            IntegratedDatas retained_NetIncome = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "Net Income");
                                            IntegratedDatas retained_Dividendpaid = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "Dividends Paid");
                                            IntegratedDatas retained_EndYearDatas = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "RETAINED EARNINGS (END YEAR)");
                                            // retained earning or its synonyms
                                            IntegratedDatas retained_Earning_BalanceSheet = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem.ToUpper() == "RETAINED EARNINGS" || x.LineItem.ToLower() == "accumulated deficit");
                                            IntegratedDatas NetIncomeAfter_IncomeStatement = iIntegratedDatas.GetSingle(x => x.InitialSetupId == initialSetupId && x.LineItem == "NET INCOME after extraordinary items");
                                            // for dividend 
                                            ForcastRatioFilingsViewModel ForcastRatioFilingsPPObj = null;
                                            if (ForcastRatioFilingsvmList.Exists(x => x.StatementType == "PAYOUT POLIOCY FORECAST"))
                                            {
                                                ForcastRatioFilingsPPObj = ForcastRatioFilingsvmList.Find(x => x.StatementType == "PAYOUT POLIOCY FORECAST");
                                            }

                                            List<ForcastRatioDatasViewModel> forcast_Totat_OngoingDividendListVm = ForcastRatioFilingsPPObj != null ? ForcastRatioFilingsPPObj.ForcastRatioDatasVM.FindAll(x => x.LineItem.ToUpper().Contains("TOTAL ONGOING DIVIDEND PAYOUT")) : null;
                                            List<ForcastRatioDatasViewModel> OneTimeDividendListVM = ForcastRatioFilingsPPObj != null ? ForcastRatioFilingsPPObj.ForcastRatioDatasVM.FindAll(x => x.LineItem.ToUpper().Contains("ONE TIME DIVIDEND PAYOUT")) : null;
                                            List<ForcastRatioDatasViewModel> DividendPayoutratioListVM = ForcastRatioFilingsPPObj != null ? ForcastRatioFilingsPPObj.ForcastRatioDatasVM.FindAll(x => x.LineItem.ToUpper().Contains("DIVIDEND PAYOUT RATIO")) : null;

                                            ForcastRatioDatasViewModel forcast_Totat_OngoingDividendVm = forcast_Totat_OngoingDividendListVm != null ? forcast_Totat_OngoingDividendListVm.OrderByDescending(x => x.Sequence).First() : null;
                                            ForcastRatioDatasViewModel OneTimeDividendVM = OneTimeDividendListVM != null ? OneTimeDividendListVM.OrderByDescending(x => x.Sequence).First() : null;

                                            ForcastRatioDatasViewModel DividendPayoutratioVM = DividendPayoutratioListVM != null ? DividendPayoutratioListVM.OrderBy(x => x.Sequence).First() : null;

                                            List<Integrated_ExplicitValues> NetIncomeAfter_ExplicitValuesList = NetIncomeAfter_IncomeStatement != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == NetIncomeAfter_IncomeStatement.Id).ToList() : null;
                                            List<IntegratedValues> retained_Earning_BalanceValuesListObj = retained_Earning_BalanceSheet != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == retained_Earning_BalanceSheet.Id).ToList() : null;

                                            if (retained_BeginningDatas != null)
                                            {
                                                int i = 1;
                                                foreach (Integrated_ExplicitValues expValue in explicitValuesList)
                                                {
                                                    try
                                                    {
                                                        calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();

                                                        // beginning year
                                                        Integrated_ExplicitValues beginningYear_Explicit = new Integrated_ExplicitValues();
                                                        beginningYear_Explicit.Year = expValue.Year;
                                                        beginningYear_Explicit.Id = expValue.Id;
                                                        beginningYear_Explicit.IntegratedDatasId = retained_BeginningDatas.Id;
                                                        double value = 0;
                                                        if (i == 1)
                                                        {
                                                            //calculate for 1st explicit year
                                                            var PrevYearValue = retained_Earning_BalanceValuesListObj != null ? retained_Earning_BalanceValuesListObj.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                                            value = PrevYearValue != null && !string.IsNullOrEmpty(PrevYearValue.Value) ? Convert.ToDouble(PrevYearValue.Value) : 0;
                                                            beginningYear_Explicit.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                            calculatedExplicitValuesList.Add(beginningYear_Explicit);
                                                        }
                                                        else
                                                        {
                                                            // get prev year value of Retained Earning  End Year
                                                            Integrated_ExplicitValues integratedExplicitValue = retained_EndYearDatas != null ? iIntegrated_ExplicitValues.GetSingle(x => x.IntegratedDatasId == retained_EndYearDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                                            //calculate for other than 1st explicit year
                                                            beginningYear_Explicit.Value = integratedExplicitValue != null && !string.IsNullOrEmpty(integratedExplicitValue.Value) ? integratedExplicitValue.Value : null;
                                                            calculatedExplicitValuesList.Add(beginningYear_Explicit);
                                                        }
                                                        //Net income
                                                        Integrated_ExplicitValues NetIncome_ExplicitValue = new Integrated_ExplicitValues();
                                                        NetIncome_ExplicitValue.Year = expValue.Year;
                                                        NetIncome_ExplicitValue.Id = expValue.Id;
                                                        NetIncome_ExplicitValue.IntegratedDatasId = retained_NetIncome.Id;

                                                        Integrated_ExplicitValues IncomeAfter = NetIncomeAfter_ExplicitValuesList != null && NetIncomeAfter_ExplicitValuesList.Count > 0 ? NetIncomeAfter_ExplicitValuesList.Find(x => x.Year == expValue.Year) : null;
                                                        NetIncome_ExplicitValue.Value = IncomeAfter != null && !string.IsNullOrEmpty(IncomeAfter.Value) ? IncomeAfter.Value : null;
                                                        calculatedExplicitValuesList.Add(NetIncome_ExplicitValue);

                                                        // Dividend paid                                                
                                                        Integrated_ExplicitValues Dividend_ExplicitValue = new Integrated_ExplicitValues();
                                                        Dividend_ExplicitValue.Year = expValue.Year;
                                                        Dividend_ExplicitValue.Id = expValue.Id;
                                                        Dividend_ExplicitValue.IntegratedDatasId = retained_Dividendpaid.Id;
                                                        double dividendValue = 0;
                                                        //value
                                                        if (i == 1)
                                                        {
                                                            // Total Ongoing Dividend Payout -Annual + One Time Dividend Payout
                                                            ForcastRatioValuesViewModel Total_Ongoing = forcast_Totat_OngoingDividendVm != null && forcast_Totat_OngoingDividendVm.ForcastRatioValuesVM != null && forcast_Totat_OngoingDividendVm.ForcastRatioValuesVM.Count > 0 ? forcast_Totat_OngoingDividendVm.ForcastRatioValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                                            ForcastRatioValuesViewModel one_TimeDividend = OneTimeDividendVM != null && OneTimeDividendVM.ForcastRatioValuesVM != null && OneTimeDividendVM.ForcastRatioValuesVM.Count > 0 ? OneTimeDividendVM.ForcastRatioValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                                            dividendValue = (Total_Ongoing != null && !string.IsNullOrEmpty(Total_Ongoing.Value) ? Convert.ToDouble(Total_Ongoing.Value) : 0) +
                                                               (one_TimeDividend != null && !string.IsNullOrEmpty(one_TimeDividend.Value) ? Convert.ToDouble(one_TimeDividend.Value) : 0);
                                                            Dividend_ExplicitValue.Value = Convert.ToString(Convert.ToDouble(dividendValue.ToString("0.")));
                                                            i = 2;
                                                        }
                                                        else
                                                        {
                                                            // Total Ongoing Dividend Payout -Annual + One Time Dividend Payout
                                                            ForcastRatio_ExplicitValuesViewModel DividendPayout = DividendPayoutratioVM != null && DividendPayoutratioVM.ForcastRatio_ExplicitValuesVM != null && DividendPayoutratioVM.ForcastRatio_ExplicitValuesVM.Count > 0 ? DividendPayoutratioVM.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                                            Integrated_ExplicitValues NetIncomeAfter = NetIncomeAfter_ExplicitValuesList != null && NetIncomeAfter_ExplicitValuesList.Count > 0 ? NetIncomeAfter_ExplicitValuesList.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;

                                                            // ForcastRatio_ExplicitValuesViewModel Total_Ongoing = forcast_Totat_OngoingDividendVm != null && forcast_Totat_OngoingDividendVm.ForcastRatio_ExplicitValuesVM != null && forcast_Totat_OngoingDividendVm.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcast_Totat_OngoingDividendVm.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                                            ForcastRatio_ExplicitValuesViewModel one_TimeDividend = OneTimeDividendVM != null && OneTimeDividendVM.ForcastRatio_ExplicitValuesVM != null && OneTimeDividendVM.ForcastRatio_ExplicitValuesVM.Count > 0 ? OneTimeDividendVM.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == Convert.ToString(Convert.ToInt32(expValue.Year) - 1)) : null;
                                                            dividendValue = ((DividendPayout != null && !string.IsNullOrEmpty(DividendPayout.Value) ? Convert.ToDouble(DividendPayout.Value) / 100 : 0) * (NetIncomeAfter != null && !string.IsNullOrEmpty(NetIncomeAfter.Value) ? Convert.ToDouble(NetIncomeAfter.Value) : 0)) +
                                                               (one_TimeDividend != null && !string.IsNullOrEmpty(one_TimeDividend.Value) ? Convert.ToDouble(one_TimeDividend.Value) : 0);
                                                            Dividend_ExplicitValue.Value = Convert.ToString(Convert.ToDouble(dividendValue.ToString("0.")));

                                                        }
                                                        calculatedExplicitValuesList.Add(Dividend_ExplicitValue);

                                                        //  Retained Earning  End Year                                            
                                                        Integrated_ExplicitValues RetainedEndYear_ExplicitValue = new Integrated_ExplicitValues();
                                                        RetainedEndYear_ExplicitValue.Year = expValue.Year;
                                                        RetainedEndYear_ExplicitValue.Id = expValue.Id;
                                                        RetainedEndYear_ExplicitValue.IntegratedDatasId = retained_EndYearDatas.Id;
                                                        double endYear_Value = 0;
                                                        //value
                                                        foreach (var item in calculatedExplicitValuesList)
                                                        {
                                                            endYear_Value = endYear_Value + (item != null && (!string.IsNullOrEmpty(item.Value)) ? Convert.ToDouble(item.Value) : 0);
                                                        }
                                                        RetainedEndYear_ExplicitValue.Value = Convert.ToString(Convert.ToDouble(endYear_Value.ToString("0.")));
                                                        calculatedExplicitValuesList.Add(RetainedEndYear_ExplicitValue);

                                                        // add to database
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                    }
                                                    catch (Exception ss)
                                                    {
                                                        return BadRequest(new { message = "Issue occured in Retained Earning Calculations " + "for year " + expValue.Year + ForcastRatioFilingsObj.StatementType, status = 400, result = false });

                                                    }
                                                }
                                            }


                                            #endregion

                                            foreach (IntegratedDatas datasObj in tblintegrateddatas_BalanceListObj)
                                            {
                                                errorObj = datasObj;
                                                calculatedExplicitValuesList = new List<Integrated_ExplicitValues>();
                                                integratedDatas_StandardObj = new IntegratedDatas();
                                                if (datasObj.StatementTypeId != (int)StatementTypeEnum.RetainedEarningsStatement) // Except retainedEarnings
                                                {
                                                    if (datasObj.IsParentItem == true)
                                                    {
                                                        foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                        {
                                                            calculatedExplicitValues = new Integrated_ExplicitValues();
                                                            calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                            calculatedExplicitValues.Year = explicitvalue.Year;
                                                            calculatedExplicitValues.Value = null;
                                                            calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                        }
                                                        iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                        iIntegrated_ExplicitValues.Commit();
                                                    }
                                                    else
                                                    {
                                                        //Cash and Cash Equivalents

                                                        if (datasObj.LineItem.ToUpper().Contains("EXCESS CASH") || datasObj.LineItem.ToUpper().Contains("OPERATING CASH") || datasObj.LineItem.ToUpper().Contains("CASH NEEDED FOR OPERATION"))
                                                        {
                                                            ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.LineItem == datasObj.LineItem);
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                                calculatedExplicitValues.Value = forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? forcastExplicitValue.Value : null;
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        else if (datasObj.LineItem.ToUpper().Contains("CASH AND CASH EQUIVALENTS") || datasObj.LineItem.ToUpper().Contains("CASH AND EQUIVALENTS"))
                                                        {
                                                            ForcastRatioDatasViewModel forcasttempObj1 = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.LineItem.ToUpper().Contains("EXCESS CASH"));
                                                            ForcastRatioDatasViewModel forcasttempObj2 = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.LineItem.ToUpper().Contains("OPERATING CASH") || x.LineItem.ToUpper() == "CASH NEEDED FOR OPERATIONS (WORKING CAPITAL)");

                                                            ForcastRatioDatas cashnCash = iForcastRatioDatas.GetSingle(x => (x.LineItem.ToUpper().Contains("CASH AND CASH EQUIVALENTS") || x.LineItem.ToUpper().Contains("CASH AND EQUIVALENTS")) && x.InitialSetupId == initialSetupId);

                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            List<ForcastRatio_ExplicitValues> cashnCash_ExplicitValuesList = new List<ForcastRatio_ExplicitValues>();
                                                            ForcastRatio_ExplicitValues cashNCash_Explicit;
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                cashNCash_Explicit = new ForcastRatio_ExplicitValues();
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                cashNCash_Explicit.ForcastRatioDatasId = cashnCash.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                cashNCash_Explicit.Year = explicitvalue.Year;
                                                                double value = 0;
                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue1 = forcasttempObj1.ForcastRatio_ExplicitValuesVM != null && forcasttempObj1.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj1.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue2 = forcasttempObj2.ForcastRatio_ExplicitValuesVM != null && forcasttempObj2.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj2.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;
                                                                value = (forcastExplicitValue1 != null && !string.IsNullOrEmpty(forcastExplicitValue1.Value) ? Convert.ToDouble(forcastExplicitValue1.Value) : 0) + (forcastExplicitValue2 != null && !string.IsNullOrEmpty(forcastExplicitValue2.Value) ? Convert.ToDouble(forcastExplicitValue2.Value) : 0);
                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                cashNCash_Explicit.Value = calculatedExplicitValues.Value;

                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                cashnCash_ExplicitValuesList.Add(cashNCash_Explicit);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }

                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                            // forcast Cash n Cash Equi
                                                            if (cashnCash != null)
                                                            {
                                                                iForcastRatio_ExplicitValues.DeleteWhere(x => x.ForcastRatioDatasId == cashnCash.Id);
                                                                iForcastRatio_ExplicitValues.Commit();
                                                                iForcastRatio_ExplicitValues.AddMany(cashnCash_ExplicitValuesList);
                                                                iForcastRatio_ExplicitValues.Commit();
                                                            }
                                                        }
                                                        //NET RECEIVABLE, OTHER CURRENT ASSETS, 
                                                        else if (datasObj.LineItem.Contains("NET RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("ACCOUNTS RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("TRADE ACCOUNTS RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("TRADE RECEIVABLE") || datasObj.LineItem.ToUpper().Contains("ACCOUNTS RECEIVABLE-TRADE") || datasObj.LineItem.ToUpper().Contains("OTHER CURRENT ASSETS") || datasObj.LineItem.ToUpper().Contains("PP&E") || datasObj.LineItem.ToUpper().Contains("PROPERTY AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY, PLANT AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY PLANT AND EQUIPMENT"))
                                                        {
                                                            ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                Integrated_ExplicitValues revenue = RevenueDatasIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;

                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                                value = ((revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //INVENTORY, 
                                                        else if (datasObj.LineItem.Contains("INVENTORY") || datasObj.LineItem.ToUpper().Contains("INVENTORIES"))
                                                        {
                                                            ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                Integrated_ExplicitValues COGS = CostOfSalesIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;

                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                                value = ((COGS != null && !string.IsNullOrEmpty(COGS.Value) ? Convert.ToDouble(COGS.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //Short-Term Investments, Trading Assets, Assets Held for Sale
                                                        else if (datasObj.LineItem.Contains("INVESTMENT") || datasObj.LineItem.ToUpper().Contains("TRADING ASSETS") || datasObj.LineItem.ToUpper().Contains("ASSETS HELD FOR SALE"))
                                                        {
                                                            //get all Explicit Values  of income
                                                            List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatas_BalanceListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value                                                        
                                                                IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                                if (integratedValues != null)
                                                                {
                                                                    calculatedExplicitValues.Value = integratedValues.Value;
                                                                }
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //TOTAL CURRENT ASSETS
                                                        else if (datasObj.LineItem.ToUpper().Contains("TOTAL CURRENT ASSETS"))
                                                        {
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value  
                                                                double value = 0;

                                                                foreach (var item in integratedDatas_StandardList)
                                                                {
                                                                    if (item.LineItem.ToUpper() != "CASH AND CASH EQUIVALENTS" && item.LineItem.ToUpper() != "CASH AND EQUIVALENTS" && item.integrated_ExplicitValues != null)
                                                                    {
                                                                        Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                                        value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                                    }
                                                                }

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //PROPERTY PLANT AND EQUIPMENT
                                                        else if (datasObj.LineItem.ToUpper().Contains("PP&E") || datasObj.LineItem.ToUpper().Contains("PROPERTY AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY, PLANT AND EQUIPMENT") || datasObj.LineItem.ToUpper().Contains("PROPERTY PLANT AND EQUIPMENT"))
                                                        {
                                                            ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                Integrated_ExplicitValues revenue = RevenueDatasIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;

                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                                value = ((revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //Good Will, NET INTANGIBLE ASSETS, MARKETABLE EQUITY SECURITIES, LONG-TERM MARKETABLE INVESTMENT, Other Long-Term Assets
                                                        else if (datasObj.LineItem.Contains("GOOD WILL") || datasObj.LineItem.ToUpper().Contains("GOODWILL") || datasObj.LineItem.ToUpper().Contains("NET INTANGIBLE ASSETS") || datasObj.LineItem.ToUpper().Contains("MARKETABLE EQUITY SECURITIES") || datasObj.LineItem.ToUpper().Contains("MARKETABLE SECURITIES") || datasObj.LineItem.ToUpper().Contains("LONG-TERM MARKETABLE INVESTMENT") || datasObj.LineItem.ToUpper().Contains("OTHER LONG-TERM INVESTMENT") || datasObj.LineItem.ToUpper().Contains("OTHER INVESTMENT") || datasObj.LineItem.ToUpper().Contains("LONG-TERM INVESTMENT") || datasObj.LineItem.ToUpper().Contains("INVESTMENT AND SUNDRY ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER LONG-TERM ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER NON-CURRENT ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER NONCURRENT ASSETS") || datasObj.LineItem.ToUpper().Contains("OTHER ASSETS"))
                                                        {
                                                            //get all Explicit Values  of income
                                                            List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatas_BalanceListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value                                                        
                                                                IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                                if (integratedValues != null)
                                                                {
                                                                    calculatedExplicitValues.Value = integratedValues.Value;
                                                                }
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //TOTAL ASSETS
                                                        else if (datasObj.LineItem.ToUpper().Contains("TOTAL ASSETS"))
                                                        {

                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value  
                                                                double value = 0;

                                                                foreach (var item in integratedDatas_StandardList)
                                                                {
                                                                    if ((item.LineItem.ToUpper() != "CASH AND CASH EQUIVALENTS") && (item.LineItem.ToUpper() != "CASH AND EQUIVALENTS") && (item.LineItem.ToUpper() != "TOTAL CURRENT ASSETS") && item.integrated_ExplicitValues != null)
                                                                    {
                                                                        Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                                        value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                                    }
                                                                }

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));

                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //Short-Term Debt, 
                                                        else if (datasObj.LineItem.Contains("SHORT-TERM DEBT") || datasObj.LineItem.ToUpper().Contains("CURRENT DEBT") || datasObj.LineItem.ToUpper().Contains("SHORT-TERM BORROWING"))
                                                        {
                                                            //get all Explicit Values  of income
                                                            List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatas_BalanceListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value                                                        
                                                                IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                                if (integratedValues != null)
                                                                {
                                                                    calculatedExplicitValues.Value = integratedValues.Value;
                                                                }
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //Accounts Payable, 
                                                        else if (datasObj.LineItem.Contains("ACCOUNTS PAYABLE") || datasObj.LineItem.ToUpper().Contains("PAYABLE") || datasObj.LineItem.ToUpper().Contains("TRADE PAYABLE") || datasObj.LineItem.ToUpper().Contains("TRADE ACCOUNTS PAYABLE"))
                                                        {
                                                            ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                Integrated_ExplicitValues COGS = CostOfSalesIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;

                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                                value = ((COGS != null && !string.IsNullOrEmpty(COGS.Value) ? Convert.ToDouble(COGS.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //Deferred Revenue, Accrued Expenses
                                                        else if (datasObj.LineItem.ToUpper().Contains("DEFERRED REVENUE") || datasObj.LineItem.ToUpper().Contains("DEFERRED INCOME") || datasObj.LineItem.ToUpper().Contains("UNEARNED REVENUE") || datasObj.LineItem.ToUpper().Contains("ACCRUED EXPENSES") || datasObj.LineItem.ToUpper().Contains("ACCRUED SALARIES") || datasObj.LineItem.ToUpper().Contains("ACCRUED COMPENSATION") || datasObj.LineItem.ToUpper().Contains("COMPENSATION AND BENEFIT") || datasObj.LineItem.ToUpper().Contains("ACCRUED PAYROLL AND RELATED") || datasObj.LineItem.ToUpper().Contains("ACCRUED PAYROLL AND OTHER BENEFITS RELATED LIABILITIES") || datasObj.LineItem.ToUpper().Contains("OTHER ACCRUED LIABILITIES") || datasObj.LineItem.ToUpper().Contains("ACCRUED LIABILITIES"))
                                                        {
                                                            ForcastRatioDatasViewModel forcasttempObj = ForcastRatioFilingsObj.ForcastRatioDatasVM.Find(x => x.IntegratedDatasId == datasObj.Id);
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                Integrated_ExplicitValues revenue = RevenueDatasIntegrated.integrated_ExplicitValues != null && RevenueDatasIntegrated.integrated_ExplicitValues.Count > 0 ? RevenueDatasIntegrated.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year) : null;

                                                                ForcastRatio_ExplicitValuesViewModel forcastExplicitValue = forcasttempObj.ForcastRatio_ExplicitValuesVM != null && forcasttempObj.ForcastRatio_ExplicitValuesVM.Count > 0 ? forcasttempObj.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == calculatedExplicitValues.Year) : null;

                                                                value = ((revenue != null && !string.IsNullOrEmpty(revenue.Value) ? Convert.ToDouble(revenue.Value) : 0) * (forcastExplicitValue != null && !string.IsNullOrEmpty(forcastExplicitValue.Value) ? Convert.ToDouble(forcastExplicitValue.Value) : 0)) / 100;

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //CURRENT LIABILITIES
                                                        else if (datasObj.LineItem.ToUpper().Contains("CURRENT LIABILITIES") || datasObj.LineItem.ToUpper().Contains("CURRENT LIABILITY"))
                                                        {
                                                            // sum of all the values after Total Assets
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                bool assetsFlag = false;
                                                                foreach (var item in integratedDatas_StandardList)
                                                                {

                                                                    if (assetsFlag == true && item.integrated_ExplicitValues != null && item.integrated_ExplicitValues.Count > 0)
                                                                    {
                                                                        Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                                        value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                                    }
                                                                    if (item.LineItem.ToUpper() == "TOTAL ASSETS")
                                                                        assetsFlag = true;
                                                                }

                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);

                                                        }
                                                        //Long-Term Debt,  Deferred Taxes, Other Long-Term Liabilities
                                                        else if (datasObj.LineItem.Contains("LONG-TERM DEBT") || datasObj.LineItem.ToUpper().Contains("NONCURRENT DEBT") || datasObj.LineItem.ToUpper().Contains("NON-CURRENT DEBT") || datasObj.LineItem.ToUpper().Contains("LONG-TERM BORROWING") || datasObj.LineItem.ToUpper().Contains("DEFERRED TAXES") || datasObj.LineItem.ToUpper().Contains("DEFERRED INCOME TAXES") || datasObj.LineItem.ToUpper().Contains("TAXE LOSS CARRY-FORWARD") || datasObj.LineItem.ToUpper().Contains("DEFERRED TAXE ASSETS") || datasObj.LineItem.ToUpper().Contains("NET OPERATING LOSS") || datasObj.LineItem.Contains("LONG-TERM DEFERRED INCOME TAXE") || datasObj.LineItem.Contains("NOLS") || datasObj.LineItem.Contains("OTHER LONG-TERM LIABILITIES") || datasObj.LineItem.Contains("OTHER NON-CURRENT LIABILITIES") || datasObj.LineItem.Contains("OTHER NONCURRENT LIABILITIES") || datasObj.LineItem.Contains("OTHER LIABILITIES") || datasObj.LineItem.Contains("OTHER LONG-TERM OBLIGATIONS") || datasObj.LineItem.Contains("LONG-TERM OTHER LIABILITIES"))
                                                        {
                                                            //get all Explicit Values  of income
                                                            List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatas_BalanceListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value                                                        
                                                                IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                                if (integratedValues != null)
                                                                {
                                                                    calculatedExplicitValues.Value = integratedValues.Value;
                                                                }
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //TOTAL LIABILITIES
                                                        else if (datasObj.LineItem.ToUpper().Contains("TOTAL LIABILITIES") || datasObj.LineItem.ToUpper().Contains("TOTAL LIABILITY"))
                                                        {
                                                            // sum of all the values after Total Assets
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                bool assetsFlag = false;
                                                                foreach (var item in integratedDatas_StandardList)
                                                                {
                                                                    if (item.LineItem.ToUpper() == "CURRENT LIABILITIES")
                                                                        assetsFlag = true;
                                                                    if (assetsFlag == true && item.integrated_ExplicitValues != null && item.integrated_ExplicitValues.Count > 0)
                                                                    {
                                                                        Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                                        value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                                    }
                                                                }
                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        // Temporary Equity, Common Stock and Paid-In Capital,Accumulated Other Comprehensive Income
                                                        else if (datasObj.LineItem.Contains("TEMPORARY EQUITY") || datasObj.LineItem.Contains("PAID-IN CAPITAL") || datasObj.LineItem.Contains("PAID IN CAPITAL") || datasObj.LineItem.Contains("CAPITAL IN EXCESS OF PER VALUE") || datasObj.LineItem.Contains("ACCUMULATED OTHER COMPREHENSIVE INCOME") || datasObj.LineItem.Contains("ACCUMULATED OTHER COMPREHENSIVE LOSS"))
                                                        {
                                                            //get all Explicit Values  of income
                                                            List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatas_BalanceListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value                                                        
                                                                IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == Convert.ToString(Convert.ToInt32(explicitvalue.Year) - 1)) : null;
                                                                if (integratedValues != null)
                                                                {
                                                                    calculatedExplicitValues.Value = integratedValues.Value;
                                                                }
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        // Retained Earnings
                                                        else if (datasObj.LineItem.ToUpper().Contains("RETAINED EARNINGS") || datasObj.LineItem.ToLower().Contains("accumulated deficit"))
                                                        {
                                                            //get all Explicit Values  of income
                                                            IntegratedDatas RetainedEarningEndYearExp = tblintegrateddatas_BalanceListObj.Find(x => x.LineItem == "RETAINED EARNINGS (END YEAR)");
                                                            List<Integrated_ExplicitValues> RetainedEarningEndYearExpList = RetainedEarningEndYearExp != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == RetainedEarningEndYearExp.Id).ToList() : null;
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value                                                        
                                                                Integrated_ExplicitValues RetainedEarningEndYearExpValues = RetainedEarningEndYearExpList != null && RetainedEarningEndYearExpList.Count > 0 ? RetainedEarningEndYearExpList.Find(x => x.Year == explicitvalue.Year) : null;
                                                                if (RetainedEarningEndYearExpValues != null)
                                                                {
                                                                    calculatedExplicitValues.Value = RetainedEarningEndYearExpValues.Value;
                                                                }
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        //TOTAL STOCKHOLDERS' EQUITY
                                                        else if (datasObj.LineItem.ToUpper().Contains("TOTAL STOCKHOLDERS EQUITY") || datasObj.LineItem.ToUpper().Contains("TOTAL STOCKHOLDERS' EQUITY") || datasObj.LineItem.ToUpper().Contains("TOTAL EQUITY"))
                                                        {

                                                        }
                                                        //Total Liabilities and Equity
                                                        else if (datasObj.LineItem.ToUpper().Contains("TOTAL LIABILITIES AND EQUITY") || datasObj.LineItem.ToUpper().Contains("TEMPORARY EQUITY and STOCKHOLDERS' EQUITY"))
                                                        {
                                                            // TOTAL LIABILITIES 
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value
                                                                double value = 0;
                                                                bool assetsFlag = false;
                                                                foreach (var item in integratedDatas_StandardList)
                                                                {
                                                                    if (item.LineItem.ToUpper() == "TOTAL LIABILITIES")
                                                                        assetsFlag = true;
                                                                    if (assetsFlag == true && item.integrated_ExplicitValues != null && item.integrated_ExplicitValues.Count > 0)
                                                                    {
                                                                        Integrated_ExplicitValues itemValue = item.integrated_ExplicitValues.Find(x => x.Year == explicitvalue.Year);
                                                                        value = value + (itemValue != null && !string.IsNullOrEmpty(itemValue.Value) ? Convert.ToDouble(itemValue.Value) : 0);
                                                                    }
                                                                }
                                                                calculatedExplicitValues.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.")));
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }
                                                        else
                                                        {
                                                            //get all Explicit Values  of income
                                                            List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => tblintegrateddatas_BalanceListObj.Any(m => m.Id == x.IntegratedDatasId)).ToList();
                                                            integratedDatas_StandardObj.LineItem = datasObj.LineItem;
                                                            integratedDatas_StandardObj.Category = datasObj.Category;
                                                            integratedDatas_StandardObj.integrated_ExplicitValues = new List<Integrated_ExplicitValues>();
                                                            foreach (Integrated_ExplicitValues explicitvalue in explicitValuesList)
                                                            {
                                                                calculatedExplicitValues = new Integrated_ExplicitValues();
                                                                calculatedExplicitValues.IntegratedDatasId = datasObj.Id;
                                                                calculatedExplicitValues.Year = explicitvalue.Year;
                                                                // for value                                                        
                                                                IntegratedValues integratedValues = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.IntegratedDatasId == datasObj.Id && x.Year == explicitValue.Year) : null;
                                                                if (integratedValues != null)
                                                                {
                                                                    calculatedExplicitValues.Value = integratedValues.Value;
                                                                }
                                                                calculatedExplicitValuesList.Add(calculatedExplicitValues);
                                                                integratedDatas_StandardObj.integrated_ExplicitValues.Add(calculatedExplicitValues);
                                                            }
                                                            iIntegrated_ExplicitValues.AddMany(calculatedExplicitValuesList);
                                                            iIntegrated_ExplicitValues.Commit();
                                                            integratedDatas_StandardList.Add(integratedDatas_StandardObj);
                                                        }

                                                    }
                                                }


                                            }


                                        }

                                    }
                                    catch (Exception ss)
                                    {

                                    }

                                }
                            }
                            catch (Exception ss)
                            {
                                IsIntegratedSaved = false;
                                return BadRequest(new { message = "issue in Integrated Explicit Calculations of " + ForcastRatioFilingsObj.StatementType + errorObj.LineItem, status = 400, result = false });
                            }
                        }
                    }
                    //Calculate And Save Reorganize data
                    if (IsIntegratedSaved == true)
                    {

                        SaveReorganizedData(InitialSetup_IValuationObj.UserId, InitialSetup_IValuationObj.CIKNumber, InitialSetup_IValuationObj.YearFrom, InitialSetup_IValuationObj.YearTo);
                    }

                    #region ROIC

                    //delete ROIC Values Except User input table for Discount rate
                    List<ROICDatas> ROICDatasList = new List<ROICDatas>();
                    List<ROICValues> allROICValuesList = new List<ROICValues>();
                    List<ROIC_ExplicitValues> allROIC_ExplicitValuesList = new List<ROIC_ExplicitValues>();
                    long InitialSetupId = InitialSetup_IValuationObj.Id;
                    List<ReorganizedDatas> ReorganizedDatasList = null;
                    List<ReorganizedValues> AllReorganizedValuesList = null;
                    List<Reorganized_ExplicitValues> AllReorganized_ExplicitValuesList = null;
                    ROICDatasList = iROICDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (ROICDatasList != null && ROICDatasList.Count > 0)
                    {
                        ReorganizedDatasList = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                        AllReorganizedValuesList = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? iReorganizedValues.FindBy(x => ReorganizedDatasList.Any(m => m.Id == x.ReorganizedDatasId)).ToList() : null;
                        AllReorganized_ExplicitValuesList = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? iReorganized_ExplicitValues.FindBy(x => ReorganizedDatasList.Any(m => m.Id == x.ReorganizedDatasId)).ToList() : null;


                        allROICValuesList = iROICValues.FindBy(t => ROICDatasList.Any(m => m.Id == t.ROICDatasId)).ToList();
                        if (allROICValuesList != null && allROICValuesList.Count > 0)
                        {
                            iROICValues.DeleteMany(allROICValuesList);
                            iROICValues.Commit();
                        }
                        allROIC_ExplicitValuesList = iROIC_ExplicitValues.FindBy(t => ROICDatasList.Any(m => m.Id == t.ROICDatasId)).ToList();
                        if (allROIC_ExplicitValuesList != null && allROIC_ExplicitValuesList.Count > 0)
                        {
                            iROIC_ExplicitValues.DeleteMany(allROIC_ExplicitValuesList);
                            iROIC_ExplicitValues.Commit();
                        }
                        List<Integrated_ExplicitValues> dumyexplicitValuesList = new List<Integrated_ExplicitValues>();
                        List<IntegratedValues> dumyValuesList = new List<IntegratedValues>();
                        Integrated_ExplicitValues explicitValue;
                        if (InitialSetup_IValuationObj != null)
                        {
                            IntegratedValues integratedvalue;
                            int startyear = Convert.ToInt32(InitialSetup_IValuationObj.YearFrom);
                            for (int i = startyear; i <= InitialSetup_IValuationObj.YearTo; i++)
                            {
                                integratedvalue = new IntegratedValues();
                                integratedvalue.Year = Convert.ToString(startyear);
                                integratedvalue.Value = "";
                                dumyValuesList.Add(integratedvalue);
                                startyear = startyear + 1;
                            }
                            int year = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);
                            for (int i = 1; i <= InitialSetup_IValuationObj.ExplicitYearCount + 1; i++)
                            {
                                explicitValue = new Integrated_ExplicitValues();
                                year = year + 1;
                                explicitValue.Year = Convert.ToString(year);
                                explicitValue.Value = "";
                                dumyexplicitValuesList.Add(explicitValue);
                            }
                        }

                        List<IntegratedDatas> integratedDatasList = new List<IntegratedDatas>();

                        integratedDatasList = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();

                        //IMPORTANT vALUES
                        //"Gross Cash Flow"
                        ROICValues ROICValue = new ROICValues();
                        ROIC_ExplicitValues ROICExplicitValue = new ROIC_ExplicitValues();
                        List<ROICValues> roicValuesList = new List<ROICValues>();
                        List<ROIC_ExplicitValues> roicExplicitValuesList = new List<ROIC_ExplicitValues>();

                        //get Depreciation in income  (Integarted financial )Statement
                        IntegratedDatas integrated_DepreciationDatas = iIntegratedDatas.GetSingle(x => x.LineItem.Contains("Depreciation") && x.InitialSetupId == InitialSetupId);
                        List<IntegratedValues> DepreciationValuesList = new List<IntegratedValues>();
                        DepreciationValuesList = iIntegratedValues.FindBy(x => x.IntegratedDatasId == integrated_DepreciationDatas.Id).ToList();
                        List<Integrated_ExplicitValues> Depreciation_ExplicitValuesList = new List<Integrated_ExplicitValues>();
                        Depreciation_ExplicitValuesList = iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == integrated_DepreciationDatas.Id).ToList();
                        List<ROICDatas> tempROICLIst = new List<ROICDatas>();

                        List<ROICDatasViewModel> tempROICVMLIst = new List<ROICDatasViewModel>();
                        List<ROICValuesViewModel> roicValuesVMList = new List<ROICValuesViewModel>();
                        List<ROIC_ExplicitValuesViewModel> roicExplicitValuesVMList = new List<ROIC_ExplicitValuesViewModel>();

                        string discountRate = "";
                        string growthduring_Terminal = "";
                        string RONIC = "";
                        string PVof_FCF = "";
                        string Baseof_Terinal = "";
                        string PVof_Terinal = "";
                        foreach (ROICDatas ROICDatasObj in ROICDatasList)
                        {
                            roicValuesList = new List<ROICValues>();
                            roicExplicitValuesList = new List<ROIC_ExplicitValues>();

                            roicValuesVMList = new List<ROICValuesViewModel>();
                            roicExplicitValuesVMList = new List<ROIC_ExplicitValuesViewModel>();

                            if (ROICDatasObj.LineItem == "ROIC Excluding Goodwill and Intangibles")
                            {
                                //get NolatDatas from Reorganized
                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");
                                //get  Invested Capital (Excluding Goodwill & Acquired Intangibles) Datas

                                ReorganizedDatas InvestedCapital_EX = ReorganizedDatasList.Find(x => x.LineItem == "Invested Capital (Excluding Goodwill & Acquired Intangibles)");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                    ReorganizedValues InvestedCapital_EXvalue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 && InvestedCapital_EX != null ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital_EX.Id && x.Year == ROICitem.Year) : null;

                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapital_EXvalue != null && !string.IsNullOrEmpty(InvestedCapital_EXvalue.Value) && InvestedCapital_EXvalue.Value != "0" ? Convert.ToDouble(InvestedCapital_EXvalue.Value) : 0))) * 100;
                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                    Reorganized_ExplicitValues InvestedCapital_EXvalue = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital_EX.Id && x.Year == ROICitem.Year) : null;

                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapital_EXvalue != null && !string.IsNullOrEmpty(InvestedCapital_EXvalue.Value) && InvestedCapital_EXvalue.Value != "0" ? Convert.ToDouble(InvestedCapital_EXvalue.Value) : 0))) * 100;
                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                }
                            }
                            else if (ROICDatasObj.LineItem == "ROIC Including Goodwill and Intangibles")
                            {
                                roicValuesList = new List<ROICValues>();
                                //get NolatDatas from Reorganized
                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");
                                //get  Invested Capital (Excluding Goodwill & Acquired Intangibles) Datas

                                ReorganizedDatas InvestedCapital = ReorganizedDatasList.Find(x => x.LineItem == "Invested Capital");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                    ReorganizedValues InvestedCapitalvalue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 && InvestedCapital != null ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital.Id && x.Year == ROICitem.Year) : null;

                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapitalvalue != null && !string.IsNullOrEmpty(InvestedCapitalvalue.Value) && InvestedCapitalvalue.Value != "0" ? Convert.ToDouble(InvestedCapitalvalue.Value) : 0))) * 100;
                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                    // ROICData.ROICValuesVM.Add(ROICValue);
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                    Reorganized_ExplicitValues InvestedCapitalvalue = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 && InvestedCapital != null ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == InvestedCapital.Id && x.Year == ROICitem.Year) : null;

                                    value = ((reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0) / ((InvestedCapitalvalue != null && !string.IsNullOrEmpty(InvestedCapitalvalue.Value) && InvestedCapitalvalue.Value != "0" ? Convert.ToDouble(InvestedCapitalvalue.Value) : 0))) * 100;
                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                }
                            }
                            else if (ROICDatasObj.LineItem == "NOPLAT")
                            {
                                roicValuesList = new List<ROICValues>();
                                //get NolatDatas from Reorganized
                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                    value = (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                    // ROICData.ROICValuesVM.Add(ROICValue);
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                    value = (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                }
                            }
                            else if (ROICDatasObj.LineItem == "Depreciation")
                            {
                                roicValuesList = new List<ROICValues>();

                                ////get Depreciation in income  (Integarted financial )Statement
                                //IntegratedDatas integrated_DepreciationDatas = iIntegratedDatas.GetSingle(x => x.LineItem.Contains("Depreciation") && x.InitialSetupId==InitialSetupId);
                                //List<IntegratedValues> DepreciationValuesList = new List<IntegratedValues>();
                                //DepreciationValuesList = iIntegratedValues.FindBy(x=>x.IntegratedDatasId== integrated_DepreciationDatas.Id).ToList();
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    IntegratedValues DepreciationValue = DepreciationValuesList != null && DepreciationValuesList.Count > 0 ? DepreciationValuesList.Find(x => x.Year == ROICitem.Year) : null;


                                    value = -1 * (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0);
                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                    // ROICData.ROICValuesVM.Add(ROICValue);
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    Integrated_ExplicitValues DepreciationValue = Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 ? Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year) : null;


                                    value = -1 * (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0);
                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                }
                            }
                            else if (ROICDatasObj.LineItem == "Gross Cash Flow")
                            {
                                //roicValuesList = new List<ROICValues>();
                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "NOPLAT");

                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    IntegratedValues DepreciationValue = DepreciationValuesList != null && DepreciationValuesList.Count > 0 ? DepreciationValuesList.Find(x => x.Year == ROICitem.Year) : null;
                                    ReorganizedValues reorganizedValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                    value = (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0) + (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);

                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    Integrated_ExplicitValues DepreciationValue = Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 ? Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year) : null;
                                    Reorganized_ExplicitValues reorganizedValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;


                                    value = (DepreciationValue != null && !string.IsNullOrEmpty(DepreciationValue.Value) ? Convert.ToDouble(DepreciationValue.Value) : 0) + (reorganizedValues != null && !string.IsNullOrEmpty(reorganizedValues.Value) ? Convert.ToDouble(reorganizedValues.Value) : 0);
                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Change in Operating Working capital")
                            {
                                //"Operating Working Capital"
                                ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem == "Operating Working Capital");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    ReorganizedValues CurrentYearValues = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                    ReorganizedValues PrevYearValaue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) : null;

                                    value = PrevYearValaue != null ? (CurrentYearValues != null && !string.IsNullOrEmpty(CurrentYearValues.Value) ? Convert.ToDouble(CurrentYearValues.Value) : 0) - (PrevYearValaue != null && !string.IsNullOrEmpty(PrevYearValaue.Value) ? Convert.ToDouble(PrevYearValaue.Value) : 0) : 0;
                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    Reorganized_ExplicitValues CurrentYearValues = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == ROICitem.Year) : null;

                                    Reorganized_ExplicitValues PrevYearValaue = reorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) : null;
                                    if (PrevYearValaue != null)
                                    {
                                        value = PrevYearValaue != null ? (CurrentYearValues != null && !string.IsNullOrEmpty(CurrentYearValues.Value) ? Convert.ToDouble(CurrentYearValues.Value) : 0) - (PrevYearValaue != null && !string.IsNullOrEmpty(PrevYearValaue.Value) ? Convert.ToDouble(PrevYearValaue.Value) : 0) : 0;
                                    }
                                    else
                                    {
                                        var Historicalvalue = reorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.Find(x => x.ReorganizedDatasId == reorganizedDatas.Id && x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) : null;
                                        value = Historicalvalue != null ? (Historicalvalue != null && !string.IsNullOrEmpty(Historicalvalue.Value) ? Convert.ToDouble(Historicalvalue.Value) : 0) - (PrevYearValaue != null && !string.IsNullOrEmpty(PrevYearValaue.Value) ? Convert.ToDouble(PrevYearValaue.Value) : 0) : 0;
                                    }

                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);

                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Net Capital Expenditures")
                            {
                                var PPE_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())) : null;
                                var PPE_Integratedvalues = PPE_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == PPE_IntegratedDatas.Id).ToList() : null;
                                var PPE_IntegratedExpvalues = PPE_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == PPE_IntegratedDatas.Id).ToList() : null;
                                int k = 0;
                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    if (k != 0)
                                    {
                                        value = -1 * ((PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (DepreciationValuesList != null && DepreciationValuesList.Count > 0 && !string.IsNullOrEmpty(DepreciationValuesList.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(DepreciationValuesList.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }

                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);

                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));

                                    k = k + 1;
                                }
                                k = 0;
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    if (k == 0)
                                    {
                                        value = -1 * ((PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 && !string.IsNullOrEmpty(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }
                                    else
                                    {
                                        value = -1 * ((PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Depreciation_ExplicitValuesList != null && Depreciation_ExplicitValuesList.Count > 0 && !string.IsNullOrEmpty(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Depreciation_ExplicitValuesList.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }

                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);

                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                    k = k + 1;
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Decrease (increase) in Capital Operating Leases")
                            {
                                var COL_ReorganizedDatas = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? ReorganizedDatasList.Find(x => x.LineItem == "Capitalized Operating Leases") : null;
                                var COL_Reorganizedvalues = COL_ReorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.FindAll(x => x.ReorganizedDatasId == COL_ReorganizedDatas.Id) : null;
                                var COL_ReorganizedExpvalues = COL_ReorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.FindAll(x => x.ReorganizedDatasId == COL_ReorganizedDatas.Id) : null;

                                int k = 0;
                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    if (k != 0)
                                    {
                                        value = -1 * ((COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }

                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                    k = k + 1;
                                }
                                k = 0;
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    if (k == 0)
                                    {
                                        value = -1 * ((COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }
                                    else
                                    {
                                        value = -1 * ((COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }

                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                    k = k + 1;
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            //"Investments in Goodwill and Acquired Intangibles"
                            else if (ROICDatasObj.LineItem == "Investments in Goodwill and Acquired Intangibles")
                            {
                                var GdWl_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToUpper().Contains("GOODWILL") || x.LineItem.ToUpper().Contains("GOOD WILL")) : null;

                                var GdWl_Integratedvalues = GdWl_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == GdWl_IntegratedDatas.Id).ToList() : null;
                                var GdWl_IntegratedExpvalues = GdWl_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == GdWl_IntegratedDatas.Id).ToList() : null;

                                var NIA_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToUpper().Contains("INTANGIBLE ASSETS")) : null;
                                var NIA_Integratedvalues = NIA_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == NIA_IntegratedDatas.Id).ToList() : null;
                                var NIA_IntegratedExpvalues = NIA_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == NIA_IntegratedDatas.Id).ToList() : null;

                                var IntdataEBITA = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem == "EBITA") : null;
                                var Amor_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 && IntdataEBITA != null && IntdataEBITA.Id != null && IntdataEBITA.Id != 0 ? integratedDatasList.Find(x => x.Id == IntdataEBITA.Id + 1 && x.LineItem.ToUpper().Contains("AMORTIZATION")) : null;
                                var Amor_Integratedvalues = NIA_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == Amor_IntegratedDatas.Id).ToList() : null;
                                var Amor_IntegratedExpvalues = NIA_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == Amor_IntegratedDatas.Id).ToList() : null;

                                int k = 0;
                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    if (k != 0)
                                    {
                                        value = -1 * ((GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_Integratedvalues != null && Amor_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(Amor_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }

                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                    k = k + 1;
                                }
                                k = 0;
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    if (k == 0)
                                    {
                                        value = -1 * ((GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_IntegratedExpvalues != null && Amor_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }
                                    else
                                    {
                                        value = -1 * ((GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_IntegratedExpvalues != null && Amor_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                                    }

                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                    k = k + 1;
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Decrease (increase) in Net Other Operating Assets")
                            {
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    ROICValue.Value = null;
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    ROICValue.Value = null;
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Increase (Decrease) in AOCI")
                            {
                                var AOCI_IntegratedDatas = integratedDatasList != null && integratedDatasList.Count > 0 ? integratedDatasList.Find(x => x.LineItem.ToUpper().Contains("COMPREHENSIVE INCOME") || x.LineItem.ToUpper().Contains("COMPREHENSIVE LOSS")) : null;


                                var AOCI_Integratedvalues = AOCI_IntegratedDatas != null ? iIntegratedValues.FindBy(x => x.IntegratedDatasId == AOCI_IntegratedDatas.Id).ToList() : null;
                                var AOCI_IntegratedExpvalues = AOCI_IntegratedDatas != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == AOCI_IntegratedDatas.Id).ToList() : null;

                                int k = 0;
                                //ReorganizedDatas reorganizedDatas = ReorganizedDatasList.Find(x => x.LineItem.ToUpper() == "Operating Working Capital");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    if (k != 0)
                                    {
                                        value = -1 * ((AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                                    }

                                    ROICValue.Value = value.ToString("0.#");
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                    k = k + 1;
                                }
                                k = 0;
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;

                                    if (k == 0)
                                    {
                                        value = -1 * ((AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                                    }
                                    else
                                    {
                                        value = -1 * ((AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                                    }

                                    ROICExplicitValue.Value = value.ToString("0.#");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                    k = k + 1;
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Gross Investment")
                            {
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    foreach (var item in tempROICVMLIst)
                                    {
                                        if (item.LineItem != "Gross Cash Flow")
                                        {
                                            var tempValue = item.ROICValuesVM != null && item.ROICValuesVM.Count > 0 ? item.ROICValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                                            value = value + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                        }

                                    }
                                    ROICValue.Value = value.ToString("0.");
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    foreach (var item in tempROICVMLIst)
                                    {
                                        if (item.LineItem != "Gross Cash Flow")
                                        {
                                            var tempExplicitValue = item.ROIC_ExplicitValuesVM != null && item.ROIC_ExplicitValuesVM.Count > 0 ? item.ROIC_ExplicitValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                                            value = value + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                        }
                                    }
                                    ROICExplicitValue.Value = value.ToString("0.");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Free Cash Flow (FCF)")
                            {
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    foreach (var item in tempROICVMLIst)
                                    {
                                        if ((item.LineItem == "Gross Cash Flow") || (item.LineItem == "Gross Investment"))
                                        {

                                            var tempValue = item.ROICValuesVM != null && item.ROICValuesVM.Count > 0 ? item.ROICValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                                            value = value + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                        }
                                    }
                                    ROICValue.Value = value.ToString("0.");
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    foreach (var item in tempROICVMLIst)
                                    {
                                        if ((item.LineItem == "Gross Cash Flow") || (item.LineItem == "Gross Investment"))
                                        {

                                            var tempExplicitValue = item.ROIC_ExplicitValuesVM != null && item.ROIC_ExplicitValuesVM.Count > 0 ? item.ROIC_ExplicitValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                                            value = value + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                        }

                                    }
                                    ROICExplicitValue.Value = value.ToString("0.");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                }
                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);
                            }
                            else if (ROICDatasObj.LineItem == "Discount Rate")
                            {
                                //get discount Rate from Cost of Capital
                                discountRate = ROICDatasObj.DtValue;

                            }
                            else if (ROICDatasObj.LineItem == "Growth During Terminal Period")
                            {
                                growthduring_Terminal = ROICDatasObj.DtValue;
                            }
                            else if (ROICDatasObj.LineItem == "Return on New Invested Capital (RONIC)")
                            {
                                RONIC = ROICDatasObj.DtValue;
                            }
                            else if (ROICDatasObj.LineItem == "DCF")
                            {
                                int i = 1;
                                ROICDatasViewModel FCFDatas = tempROICVMLIst.Find(x => x.LineItem == "Free Cash Flow (FCF)");
                                foreach (IntegratedValues ROICitem in dumyValuesList)
                                {
                                    ROICValue = new ROICValues();
                                    ROICValue.Year = ROICitem.Year;
                                    ROICValue.Id = 0;
                                    ROICValue.ROICDatasId = ROICDatasObj.Id;
                                    ROICValue.Value = null;
                                    roicValuesList.Add(ROICValue);
                                    //add to vm
                                    roicValuesVMList.Add(mapper.Map<ROICValues, ROICValuesViewModel>(ROICValue));
                                }
                                foreach (Integrated_ExplicitValues ROICitem in dumyexplicitValuesList)
                                {
                                    ROICExplicitValue = new ROIC_ExplicitValues();
                                    ROICExplicitValue.Year = ROICitem.Year;
                                    ROICExplicitValue.Id = 0;
                                    ROICExplicitValue.ROICDatasId = ROICDatasObj.Id;
                                    double value = 0;
                                    ROIC_ExplicitValuesViewModel FCFExplicitValue = FCFDatas != null & FCFDatas.ROIC_ExplicitValuesVM != null && FCFDatas.ROIC_ExplicitValuesVM.Count > 0 ? FCFDatas.ROIC_ExplicitValuesVM.Find(x => x.Year == ROICitem.Year) : null;

                                    //Math.Pow(100.00, 3.00)
                                    value = FCFExplicitValue != null && !string.IsNullOrEmpty(FCFExplicitValue.Value) && FCFExplicitValue.Value != "0" ? Convert.ToDouble(FCFExplicitValue.Value) / Math.Pow(1 + (!string.IsNullOrEmpty(discountRate) ? Convert.ToDouble(discountRate) : 0), i) : 0;


                                    ROICExplicitValue.Value = value.ToString("0.");
                                    roicExplicitValuesList.Add(ROICExplicitValue);
                                    //add to vm
                                    roicExplicitValuesVMList.Add(mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(ROICExplicitValue));
                                    i++;
                                }

                                //ROICDatasObj.ROICValues = roicValuesList;
                                //ROICDatasObj.ROIC_ExplicitValues = roicExplicitValuesList;
                                //tempROICLIst.Add(ROICDatasObj);
                                ROICDatasViewModel tempDatasVM = (mapper.Map<ROICDatas, ROICDatasViewModel>(ROICDatasObj));
                                tempDatasVM.ROICValuesVM = roicValuesVMList;
                                tempDatasVM.ROIC_ExplicitValuesVM = roicExplicitValuesVMList;
                                tempROICVMLIst.Add(tempDatasVM);

                            }
                            else if (ROICDatasObj.LineItem == "PV of FCF During Explicit Forecast Period")
                            {
                                ROICDatasViewModel FCFDatas = tempROICVMLIst.Find(x => x.LineItem == "DCF");
                                //get all the Explicit Values of DCF
                                List<ROIC_ExplicitValuesViewModel> dcfExplicitList = FCFDatas != null && FCFDatas.ROIC_ExplicitValuesVM != null && FCFDatas.ROIC_ExplicitValuesVM.Count > 0 ? FCFDatas.ROIC_ExplicitValuesVM : null;
                                if (dcfExplicitList != null && dcfExplicitList.Count > 0)
                                {
                                    double value = 0;
                                    foreach (var dcfValue in dcfExplicitList)
                                    {
                                        value = value + (dcfValue != null && !string.IsNullOrEmpty(dcfValue.Value) ? Convert.ToDouble(dcfValue.Value) : 0);
                                    }
                                    PVof_FCF = Convert.ToString(value.ToString("0.##"));
                                    ROICDatasObj.DtValue = PVof_FCF;

                                    iROICDatas.Update(ROICDatasObj);
                                    iROICDatas.Commit();
                                }
                            }
                            //Base for Terminal Value "Base for Terminal Value"
                            else if (ROICDatasObj.LineItem == "Base for Terminal Value")
                            {
                                //Baseof_Terinal
                                ROICDatasViewModel noPlatDatas = tempROICVMLIst.Find(x => x.LineItem == "NOPLAT");
                                //get all the Explicit Values of DCF
                                List<ROIC_ExplicitValuesViewModel> dcfExplicitList = noPlatDatas != null && noPlatDatas.ROIC_ExplicitValuesVM != null && noPlatDatas.ROIC_ExplicitValuesVM.Count > 0 ? noPlatDatas.ROIC_ExplicitValuesVM : null;
                                if (dcfExplicitList != null && dcfExplicitList.Count > 0)
                                {
                                    double NoplatTerminalvalue = 0;
                                    double value = 0;
                                    foreach (var dcfValue in dcfExplicitList)
                                    {
                                        NoplatTerminalvalue = (dcfValue != null && !string.IsNullOrEmpty(dcfValue.Value) ? Convert.ToDouble(dcfValue.Value) : 0);
                                    }
                                    value = ((NoplatTerminalvalue) * (1 - ((!string.IsNullOrEmpty(growthduring_Terminal) ? Convert.ToDouble(growthduring_Terminal) : 0) / (!string.IsNullOrEmpty(RONIC) ? Convert.ToDouble(RONIC) : 0)))) / (((!string.IsNullOrEmpty(discountRate) ? Convert.ToDouble(discountRate) : 0) - (!string.IsNullOrEmpty(growthduring_Terminal) ? Convert.ToDouble(growthduring_Terminal) : 0)) / 100);

                                    //PVof_FCF = Convert.ToString(value.ToString("0.##"));

                                    Baseof_Terinal = Convert.ToString(value.ToString("0.##"));
                                    ROICDatasObj.DtValue = Baseof_Terinal;

                                    iROICDatas.Update(ROICDatasObj);
                                    iROICDatas.Commit();
                                }
                            }
                            else if (ROICDatasObj.LineItem == "PV of Terminal Value")
                            {

                                //Baseof_Terinal
                                double value = 0;
                                value = (!string.IsNullOrEmpty(Baseof_Terinal) ? Convert.ToDouble(Baseof_Terinal) : 0) / Math.Pow((1 + ((!string.IsNullOrEmpty(discountRate) ? Convert.ToDouble(discountRate) : 0) / 100)), (dumyexplicitValuesList.Count));


                                PVof_Terinal = Convert.ToString(value.ToString("0.##"));
                                ROICDatasObj.DtValue = PVof_Terinal;

                                iROICDatas.Update(ROICDatasObj);
                                iROICDatas.Commit();

                            }
                            else if (ROICDatasObj.LineItem == "Total Value of Operations")
                            {


                                //Baseof_Terinal
                                double value = 0;
                                value = (!string.IsNullOrEmpty(PVof_Terinal) ? Convert.ToDouble(PVof_Terinal) : 0) + (!string.IsNullOrEmpty(PVof_FCF) ? Convert.ToDouble(PVof_FCF) : 0);


                                ROICDatasObj.DtValue = Convert.ToString(value.ToString("0.##"));
                                //ROICDatasObj.DtValue = PVof_Terinal;

                                iROICDatas.Update(ROICDatasObj);
                                iROICDatas.Commit();

                            }


                            // save ROIC Valaues to DataBase
                            if (roicValuesList != null && roicValuesList.Count > 0)
                            {
                                iROICValues.AddMany(roicValuesList);
                                iROICValues.Commit();
                            }

                            // save ROIC Explicit Valaues to DataBase
                            if (roicExplicitValuesList != null && roicExplicitValuesList.Count > 0)
                            {
                                iROIC_ExplicitValues.AddMany(roicExplicitValuesList);
                                iROIC_ExplicitValues.Commit();
                            }


                        }
                    }


                    #endregion
                    ///////////////////////////////////////////////////
                    return Ok(new { message = "Data Saved Successfully", status = 200, result = true });
                }
                else
                {
                    return BadRequest(new { message = "No data found to save", status = 200, result = false });
                }


            }
            catch (Exception ss)
            {
                return BadRequest(Convert.ToString(ss.Message));
            }
        }

        [HttpGet]
        [Route("GetHistForcastRatioHistoricalData/{UserId}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult GetHistForcastRatioHistoricalData(long UserId, string cik, int? startYear = null, int? endYear = null)
        {
            ForcastRatioResult renderResult = new ForcastRatioResult();
            List<ForcastRatioFilingsViewModel> integratedFilingsList = new List<ForcastRatioFilingsViewModel>();
            List<ForcastRatioDatasViewModel> HistForcastRatioList = new List<ForcastRatioDatasViewModel>();
            ForcastRatioFilingsViewModel integratedFiling = new ForcastRatioFilingsViewModel();

            try
            {

                List<ForcastRatio_ExplicitValuesViewModel> explicitValuesList = new List<ForcastRatio_ExplicitValuesViewModel>();
                ForcastRatio_ExplicitValuesViewModel explicitValue;

                //actual code
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();

                //check in the database if exist then get by DB else go with the flow
                List<ForcastRatioDatas> tblForCastRatioListObj = InitialSetup_IValuationObj != null ? iForcastRatioDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;

                if (tblForCastRatioListObj != null && tblForCastRatioListObj.Count > 0)
                {

                    try
                    {

                        // get all explicit values
                        List<ForcastRatio_ExplicitValues> ForcastRatio_ExplicitValuesListObj = iForcastRatio_ExplicitValues.FindBy(x => tblForCastRatioListObj.Any(m => m.Id == x.ForcastRatioDatasId)).ToList();

                        //get all Historical Values
                        List<ForcastRatioValues> ForcastRatioValuesListObj = iForcastRatioValues.FindBy(x => tblForCastRatioListObj.Any(m => m.Id == x.ForcastRatioDatasId)).ToList();

                        //get Integrated Datas
                        List<IntegratedDatas> IntegrateddatasListOBj = InitialSetup_IValuationObj != null ? iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;
                        IntegratedDatas revenueIntegratedObj = new IntegratedDatas();
                        IntegratedDatas costofSalesIntegratedObj = new IntegratedDatas();

                        // find Revenue
                        string revenuesynonyms = "Net Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, net";
                        List<string> synonyms = revenuesynonyms.Split('%').ToList(); // convert comma seperated values to list
                        foreach (IntegratedDatas integrateddatasObj in IntegrateddatasListOBj)
                        {
                            if (integrateddatasObj.IsParentItem != true)
                                foreach (var syn in synonyms)
                                {
                                    if (integrateddatasObj.LineItem.ToUpper() == syn.ToUpper())
                                    {
                                        revenueIntegratedObj = integrateddatasObj;
                                        break;
                                    }
                                }

                        }

                        string Costofsalesynonyms = "Cost of sales%COGS%Cost of Goods Sold%Cost of Revenue%Cost of Products Sold%Total cost of revenue%Total cost of revenues%Cost of products sold, excluding amortization of intangible assets%Costs of goods sold%Cost of equipment and services revenues%Cost of revenues%Cost of revenue (COR)";
                        //Costofsalesynonyms = Costofsalesynonyms.Replace("TT", "");
                        List<string> CostofsalesSynonyms = Costofsalesynonyms.Split('%').ToList(); // convert comma seperated values to list
                        foreach (IntegratedDatas integrateddatasObj in IntegrateddatasListOBj)
                        {
                            if (integrateddatasObj.IsParentItem != true)
                                foreach (var syn in CostofsalesSynonyms)
                                {
                                    if (integrateddatasObj.LineItem.ToUpper() == syn.ToUpper())
                                    {
                                        costofSalesIntegratedObj = integrateddatasObj;
                                        break;
                                    }
                                }
                        }


                        // get all explicit values
                        List<Integrated_ExplicitValues> Integrated_ExplicitValuesListObj = iIntegrated_ExplicitValues.FindBy(x => IntegrateddatasListOBj.Any(m => m.Id == x.IntegratedDatasId)).ToList();
                        List<IntegratedValues> IntegratedValuesListObj = iIntegratedValues.FindBy(x => IntegrateddatasListOBj.Any(m => m.Id == x.IntegratedDatasId)).ToList();


                        List<FilingsTable> filingsList = new List<FilingsTable>();
                        filingsList = iFilings.FindBy(x => x.CIK == cik).OrderBy(x => x.Sequence).ToList();
                        //  filingsList = iFilings.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList();
                        List<ForcastRatioDatas> forcaastratiodatas_IncomeList = new List<ForcastRatioDatas>();
                        ForcastRatioDatasViewModel forcastRatioDatasViewModelObj = new ForcastRatioDatasViewModel();
                        foreach (var filing in filingsList)
                        {
                            HistForcastRatioList = new List<ForcastRatioDatasViewModel>();
                            forcaastratiodatas_IncomeList = new List<ForcastRatioDatas>();

                            integratedFiling = new ForcastRatioFilingsViewModel();
                            integratedFiling.CompanyName = filing.CompanyName;
                            integratedFiling.ReportName = filing.ReportName;
                            integratedFiling.StatementType = filing.StatementType;
                            integratedFiling.Unit = filing.Unit;
                            integratedFiling.CIK = filing.CIK;
                            if (filing.StatementType == "INCOME")
                            {
                                forcaastratiodatas_IncomeList = tblForCastRatioListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement).ToList();
                            }
                            else if (filing.StatementType == "BALANCE_SHEET")
                            {
                                forcaastratiodatas_IncomeList = tblForCastRatioListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet).ToList();
                            }

                            forcastRatioDatasViewModelObj = new ForcastRatioDatasViewModel();

                            if (forcaastratiodatas_IncomeList != null && forcaastratiodatas_IncomeList.Count > 0)
                            {

                                HistForcastRatioList = new List<ForcastRatioDatasViewModel>();
                                foreach (ForcastRatioDatas Incomeobj in forcaastratiodatas_IncomeList)
                                {
                                    forcastRatioDatasViewModelObj = new ForcastRatioDatasViewModel();

                                    forcastRatioDatasViewModelObj = mapper.Map<ForcastRatioDatas, ForcastRatioDatasViewModel>(Incomeobj);

                                    // for Historical Values
                                    List<ForcastRatioValues> tempForcastValueList = ForcastRatioValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();
                                    //Incomeobj.ForcastRatioValues = tempForcastValueList;
                                    forcastRatioDatasViewModelObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                    foreach (var obj in tempForcastValueList)
                                    {
                                        ForcastRatioValuesViewModel tempValues = mapper.Map<ForcastRatioValues, ForcastRatioValuesViewModel>(obj);
                                        forcastRatioDatasViewModelObj.ForcastRatioValuesVM.Add(tempValues);
                                    }
                                    if (Incomeobj.LineItem.ToUpper().Contains("GROSS"))
                                    {
                                        // for default  Explicit Values
                                        ForcastRatioDatas CostofSales_ForcastRatio = tblForCastRatioListObj.Find(x => x.IntegratedDatasId == costofSalesIntegratedObj.Id);
                                        forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM = new List<ForcastRatio_ExplicitValuesViewModel>();
                                        List<ForcastRatio_ExplicitValues> costofSales_ExplicitvaluesList = new List<ForcastRatio_ExplicitValues>();
                                        costofSales_ExplicitvaluesList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == CostofSales_ForcastRatio.Id).ToList();
                                        List<ForcastRatio_ExplicitValues> tempForcast_ExplicitValueList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();
                                        foreach (var obj in tempForcast_ExplicitValueList)
                                        {
                                            ForcastRatio_ExplicitValuesViewModel tempExplicitValues = new ForcastRatio_ExplicitValuesViewModel();
                                            tempExplicitValues.Id = obj.Id;
                                            tempExplicitValues.Year = obj.Year;
                                            tempExplicitValues.ForcastRatioDatasId = obj.ForcastRatioDatasId;

                                            //for Value                                            
                                            ForcastRatio_ExplicitValues coGSExplicitValue = costofSales_ExplicitvaluesList != null && costofSales_ExplicitvaluesList.Count > 0 ? costofSales_ExplicitvaluesList.Find(x => x.Year == obj.Year) : null;

                                            double value = 100 - (coGSExplicitValue != null && !string.IsNullOrEmpty(coGSExplicitValue.Value) ? Convert.ToDouble(coGSExplicitValue.Value) : 0);
                                            tempExplicitValues.Value = value.ToString("0.##");
                                            forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM.Add(tempExplicitValues);
                                        }
                                    }
                                    else
                                     // check for income EBITDA items   
                                     if ((Incomeobj.LineItem == "EBITDA Margin %") || (Incomeobj.LineItem == "EBITA Margin %") || (Incomeobj.LineItem == "EBIT Margin %") || (Incomeobj.LineItem == "EBT Margin %") || Incomeobj.LineItem == "NET INCOME before extraordinary items Margin %" || Incomeobj.LineItem == "NET INCOME after extraordinary items Margin %")
                                    {

                                        List<Integrated_ExplicitValues> integrated_ExplicitvaluesList = new List<Integrated_ExplicitValues>();
                                        integrated_ExplicitvaluesList = Integrated_ExplicitValuesListObj.FindAll(x => x.IntegratedDatasId == Incomeobj.IntegratedDatasId).ToList();
                                        // for default  Explicit Values
                                        List<ForcastRatio_ExplicitValues> tempForcast_ExplicitValueList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();
                                        forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM = new List<ForcastRatio_ExplicitValuesViewModel>();

                                        List<Integrated_ExplicitValues> revenueExplicitvaluesList = new List<Integrated_ExplicitValues>();
                                        revenueExplicitvaluesList = Integrated_ExplicitValuesListObj.FindAll(x => x.IntegratedDatasId == revenueIntegratedObj.Id).ToList();
                                        foreach (var obj in tempForcast_ExplicitValueList)
                                        {
                                            ForcastRatio_ExplicitValuesViewModel tempExplicitValues = new ForcastRatio_ExplicitValuesViewModel();
                                            tempExplicitValues.Id = obj.Id;
                                            tempExplicitValues.Year = obj.Year;
                                            tempExplicitValues.ForcastRatioDatasId = obj.ForcastRatioDatasId;

                                            //for Value
                                            Integrated_ExplicitValues sameLineitemExplicitValue = integrated_ExplicitvaluesList != null && integrated_ExplicitvaluesList.Count > 0 ? integrated_ExplicitvaluesList.Find(x => x.Year == obj.Year) : null;
                                            Integrated_ExplicitValues RevenueExplicitValue = revenueExplicitvaluesList != null && revenueExplicitvaluesList.Count > 0 ? revenueExplicitvaluesList.Find(x => x.Year == obj.Year) : null;


                                            double value = RevenueExplicitValue != null && !string.IsNullOrEmpty(RevenueExplicitValue.Value) ? (sameLineitemExplicitValue != null && !string.IsNullOrEmpty(sameLineitemExplicitValue.Value) ? Convert.ToDouble(sameLineitemExplicitValue.Value) : 0) * 100 / Convert.ToDouble(RevenueExplicitValue.Value) : 0;
                                            tempExplicitValues.Value = value.ToString("0.##");
                                            forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM.Add(tempExplicitValues);
                                        }
                                    }
                                    else if (Incomeobj.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && Incomeobj.LineItem.Contains("YoY %")) //For balance Sheet Items
                                    {
                                        List<Integrated_ExplicitValues> integrated_ExplicitvaluesList = new List<Integrated_ExplicitValues>();
                                        integrated_ExplicitvaluesList = Integrated_ExplicitValuesListObj.FindAll(x => x.IntegratedDatasId == Incomeobj.IntegratedDatasId).ToList();
                                        // for default  Explicit Values
                                        List<ForcastRatio_ExplicitValues> tempForcast_ExplicitValueList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();
                                        forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM = new List<ForcastRatio_ExplicitValuesViewModel>();

                                        //List<Integrated_ExplicitValues> revenueExplicitvaluesList = new List<Integrated_ExplicitValues>();
                                        //revenueExplicitvaluesList = Integrated_ExplicitValuesListObj.FindAll(x => x.IntegratedDatasId == revenueIntegratedObj.Id).ToList();
                                        foreach (var obj in tempForcast_ExplicitValueList)
                                        {
                                            ForcastRatio_ExplicitValuesViewModel tempExplicitValues = new ForcastRatio_ExplicitValuesViewModel();
                                            tempExplicitValues.Id = obj.Id;
                                            tempExplicitValues.Year = obj.Year;
                                            tempExplicitValues.ForcastRatioDatasId = obj.ForcastRatioDatasId;

                                            //for Value
                                            Integrated_ExplicitValues sameLineitemExplicitValue = integrated_ExplicitvaluesList != null && integrated_ExplicitvaluesList.Count > 0 ? integrated_ExplicitvaluesList.Find(x => x.Year == obj.Year) : null;
                                            Integrated_ExplicitValues PreviousLineitemExplicitValue = integrated_ExplicitvaluesList != null && integrated_ExplicitvaluesList.Count > 0 ? integrated_ExplicitvaluesList.Find(x => x.Year == Convert.ToString(Convert.ToInt32(obj.Year) - 1)) : null;
                                            double value = 0;
                                            if (PreviousLineitemExplicitValue != null)
                                            {

                                                value = PreviousLineitemExplicitValue != null && !string.IsNullOrEmpty(PreviousLineitemExplicitValue.Value) ? ((sameLineitemExplicitValue != null && !string.IsNullOrEmpty(sameLineitemExplicitValue.Value) ? Convert.ToDouble(sameLineitemExplicitValue.Value) : 0) - (PreviousLineitemExplicitValue != null && !string.IsNullOrEmpty(PreviousLineitemExplicitValue.Value) ? Convert.ToDouble(PreviousLineitemExplicitValue.Value) : 0)) * 100 / Convert.ToDouble(PreviousLineitemExplicitValue.Value) : 0;
                                            }
                                            else
                                            {
                                                IntegratedValues PreviousLineitemValue = IntegratedValuesListObj != null && IntegratedValuesListObj.Count > 0 ? IntegratedValuesListObj.Find(x => x.Year == Convert.ToString(Convert.ToInt32(obj.Year) - 1)) : null;

                                                value = PreviousLineitemValue != null && !string.IsNullOrEmpty(PreviousLineitemValue.Value) && PreviousLineitemValue.Value != "0" ? ((sameLineitemExplicitValue != null && !string.IsNullOrEmpty(sameLineitemExplicitValue.Value) ? Convert.ToDouble(sameLineitemExplicitValue.Value) : 0) - (PreviousLineitemValue != null && !string.IsNullOrEmpty(PreviousLineitemValue.Value) ? Convert.ToDouble(PreviousLineitemValue.Value) : 0)) * 100 / Convert.ToDouble(PreviousLineitemValue.Value) : 0;
                                            }
                                            tempExplicitValues.Value = value.ToString("0.##");
                                            //ForcastRatio_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ForcastRatio_ExplicitValues, ForcastRatio_ExplicitValuesViewModel>(obj);
                                            forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM.Add(tempExplicitValues);
                                        }
                                    }
                                    else if (Incomeobj.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && (Incomeobj.LineItem.ToUpper().Contains("CASH AND CASH EQUIVALENTS") || Incomeobj.LineItem.ToUpper().Contains("CASH AND EQUIVALENTS")) && !Incomeobj.LineItem.Contains("Excess Cash") && !Incomeobj.LineItem.Contains("Operating Cash"))
                                    {

                                        //if(!Incomeobj.LineItem.Contains("Excess Cash") && !Incomeobj.LineItem.Contains("Operating Cash"))

                                        // find  LineItem.Contains("(Operating Cash)") and LineItem.Contains("(Excess Cash)") or Cash Needed for Operations (Working Capital)
                                        // for default  Explicit Values
                                        ForcastRatioDatas ExcessCash_ForcastRatio = tblForCastRatioListObj.Find(x => x.LineItem.Contains("Excess Cash"));
                                        ForcastRatioDatas OperatingCash_ForcastRatio = tblForCastRatioListObj.Find(x => x.LineItem.Contains("Operating Cash") || x.LineItem.Contains("Working Capital"));

                                        forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM = new List<ForcastRatio_ExplicitValuesViewModel>();

                                        List<ForcastRatio_ExplicitValues> ExcessCash_ExplicitvaluesList = new List<ForcastRatio_ExplicitValues>();
                                        ExcessCash_ExplicitvaluesList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == ExcessCash_ForcastRatio.Id).ToList();

                                        List<ForcastRatio_ExplicitValues> OperatingCash_ExplicitvaluesList = new List<ForcastRatio_ExplicitValues>();
                                        OperatingCash_ExplicitvaluesList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == OperatingCash_ForcastRatio.Id).ToList();

                                        List<ForcastRatio_ExplicitValues> tempForcast_ExplicitValueList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();

                                        //for save ExplicitValues
                                        foreach (var obj in tempForcast_ExplicitValueList)
                                        {
                                            ForcastRatio_ExplicitValuesViewModel tempExplicitValues = new ForcastRatio_ExplicitValuesViewModel();
                                            tempExplicitValues.Id = obj.Id;
                                            tempExplicitValues.Year = obj.Year;
                                            tempExplicitValues.ForcastRatioDatasId = obj.ForcastRatioDatasId;

                                            //for Value                                            
                                            ForcastRatio_ExplicitValues ExcessCash_ExplicitValue = ExcessCash_ExplicitvaluesList != null && ExcessCash_ExplicitvaluesList.Count > 0 ? ExcessCash_ExplicitvaluesList.Find(x => x.Year == obj.Year) : null;

                                            ForcastRatio_ExplicitValues OperatingCash_ExplicitValue = OperatingCash_ExplicitvaluesList != null && OperatingCash_ExplicitvaluesList.Count > 0 ? OperatingCash_ExplicitvaluesList.Find(x => x.Year == obj.Year) : null;

                                            double value = (OperatingCash_ExplicitValue != null && !string.IsNullOrEmpty(OperatingCash_ExplicitValue.Value) ? Convert.ToDouble(OperatingCash_ExplicitValue.Value) : 0) + (ExcessCash_ExplicitValue != null && !string.IsNullOrEmpty(ExcessCash_ExplicitValue.Value) ? Convert.ToDouble(ExcessCash_ExplicitValue.Value) : 0);

                                            tempExplicitValues.Value = value.ToString("0.##");
                                            forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM.Add(tempExplicitValues);
                                        }




                                    }

                                    else
                                    {
                                        // for Explicit Values
                                        List<ForcastRatio_ExplicitValues> tempForcast_ExplicitValueList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();
                                        forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM = new List<ForcastRatio_ExplicitValuesViewModel>();
                                        foreach (var obj in tempForcast_ExplicitValueList)
                                        {
                                            ForcastRatio_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ForcastRatio_ExplicitValues, ForcastRatio_ExplicitValuesViewModel>(obj);
                                            forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM.Add(tempExplicitValues);
                                        }
                                    }

                                    HistForcastRatioList.Add(forcastRatioDatasViewModelObj);
                                }

                                integratedFiling.ForcastRatioDatasVM = HistForcastRatioList;
                                integratedFilingsList.Add(integratedFiling);
                            }


                        }

                        ////for Payout Policy
                        forcaastratiodatas_IncomeList = tblForCastRatioListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.PayoutPolicyForcast).ToList();
                        forcastRatioDatasViewModelObj = new ForcastRatioDatasViewModel();

                        if (forcaastratiodatas_IncomeList != null && forcaastratiodatas_IncomeList.Count > 0)
                        {
                            integratedFiling = new ForcastRatioFilingsViewModel();
                            integratedFiling.CompanyName = filingsList[0].CompanyName;
                            integratedFiling.ReportName = "PAYOUT POLIOCY FORECAST";
                            integratedFiling.StatementType = "PAYOUT POLIOCY FORECAST";
                            integratedFiling.Unit = filingsList[0].Unit;
                            integratedFiling.CIK = filingsList[0].CIK;
                            HistForcastRatioList = new List<ForcastRatioDatasViewModel>();

                            IntegratedDatas netIncome = iIntegratedDatas.GetSingle(x => x.LineItem == "NET INCOME after extraordinary items" && x.InitialSetupId == InitialSetup_IValuationObj.Id);
                            List<Integrated_ExplicitValues> netIncomeExplicitList = netIncome != null ? iIntegrated_ExplicitValues.FindBy(x => x.IntegratedDatasId == netIncome.Id).ToList() : null;
                            List<ForcastRatioDatas> DividentPayoutRatiosList = forcaastratiodatas_IncomeList.FindAll(x => x.LineItem.Contains("Dividend Payout Ratio"));
                            ForcastRatioDatas DividentPayoutRatiosObj = DividentPayoutRatiosList != null && DividentPayoutRatiosList.Count > 0 ? DividentPayoutRatiosList.OrderBy(x => x.Sequence).First() : null;
                            List<ForcastRatio_ExplicitValues> DividentPayoutRatiosExpValList = DividentPayoutRatiosObj != null ? DividentPayoutRatiosObj.ForcastRatio_ExplicitValues : null;
                            bool TotalOngoing = false;
                            int DPSCount = 1;
                            foreach (ForcastRatioDatas Incomeobj in forcaastratiodatas_IncomeList)
                            {
                                forcastRatioDatasViewModelObj = new ForcastRatioDatasViewModel();

                                forcastRatioDatasViewModelObj = mapper.Map<ForcastRatioDatas, ForcastRatioDatasViewModel>(Incomeobj);

                                // for Historical Values
                                List<ForcastRatioValues> tempForcastValueList = ForcastRatioValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();
                                Incomeobj.ForcastRatioValues = tempForcastValueList;
                                forcastRatioDatasViewModelObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                foreach (var obj in tempForcastValueList)
                                {
                                    ForcastRatioValuesViewModel tempValues = mapper.Map<ForcastRatioValues, ForcastRatioValuesViewModel>(obj);
                                    forcastRatioDatasViewModelObj.ForcastRatioValuesVM.Add(tempValues);

                                }

                                // for Explicit Values
                                List<ForcastRatio_ExplicitValues> tempForcast_ExplicitValueList = ForcastRatio_ExplicitValuesListObj.FindAll(x => x.ForcastRatioDatasId == Incomeobj.Id).ToList();
                                forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM = new List<ForcastRatio_ExplicitValuesViewModel>();
                                string WeightedAverageValue = null;
                                int i = 1;

                                foreach (var obj in tempForcast_ExplicitValueList)
                                {
                                    ForcastRatio_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ForcastRatio_ExplicitValues, ForcastRatio_ExplicitValuesViewModel>(obj);
                                    if (Incomeobj.LineItem.Contains("Weighted Average Shares Outstanding - Basic") || Incomeobj.LineItem.Contains("Weighted Average Shares Outstanding - Diluted"))
                                    {
                                        ForcastRatioValues WeightedAverageForcastValue = ForcastRatioValuesListObj.Find(x => x.ForcastRatioDatasId == Incomeobj.Id && x.Year == Convert.ToString(Convert.ToInt32(obj.Year) - 1));
                                        if (i == 1)
                                        {
                                            tempExplicitValues.Value = WeightedAverageForcastValue != null ? WeightedAverageForcastValue.Value : null;
                                            WeightedAverageValue = WeightedAverageForcastValue != null ? WeightedAverageForcastValue.Value : null;
                                        }
                                        else
                                        {
                                            tempExplicitValues.Value = WeightedAverageValue;
                                        }
                                    }
                                    else if (Incomeobj.LineItem.Contains("DPS (Dividends per Share - Basic)"))
                                    {
                                        if (DPSCount == 1)
                                        {
                                            ForcastRatioDatasViewModel WASOB = HistForcastRatioList.Find(x => x.LineItem.Contains("Weighted Average Shares Outstanding - Basic"));
                                            ForcastRatio_ExplicitValuesViewModel WASOBExplisitvalue = WASOB != null && WASOB.ForcastRatio_ExplicitValuesVM != null && WASOB.ForcastRatio_ExplicitValuesVM.Count > 0 ? WASOB.ForcastRatio_ExplicitValuesVM.Find(x => x.Year == obj.Year) : null;
                                            Double DPSValue = 0;
                                            Integrated_ExplicitValues IEV = netIncomeExplicitList != null && netIncomeExplicitList.Count > 0 ? netIncomeExplicitList.Find(x => x.Year == obj.Year) : null;
                                            ForcastRatio_ExplicitValues FEV = DividentPayoutRatiosExpValList != null && DividentPayoutRatiosExpValList.Count > 0 ? DividentPayoutRatiosExpValList.Find(x => x.Year == obj.Year) : null;

                                            DPSValue = WASOBExplisitvalue != null && !string.IsNullOrEmpty(WASOBExplisitvalue.Value) ? ((IEV != null && !string.IsNullOrEmpty(IEV.Value) ? Convert.ToDouble(IEV.Value) : 0) * (FEV != null && !string.IsNullOrEmpty(FEV.Value) ? Convert.ToDouble(FEV.Value) : 0) / 100) / Convert.ToDouble(WASOBExplisitvalue.Value) : 0;
                                            tempExplicitValues.Value = DPSValue.ToString("0.##");
                                        }
                                        else
                                        {
                                            tempExplicitValues.Value = "0.1";
                                        }
                                    }
                                    else if (Incomeobj.LineItem.Contains("Total Ongoing Dividend Payout"))
                                    {
                                        if (TotalOngoing == true)
                                        {
                                            Double TODPValue = 0;
                                            Integrated_ExplicitValues IEV = netIncomeExplicitList != null && netIncomeExplicitList.Count > 0 ? netIncomeExplicitList.Find(x => x.Year == obj.Year) : null;
                                            ForcastRatio_ExplicitValues FEV = DividentPayoutRatiosExpValList != null && DividentPayoutRatiosExpValList.Count > 0 ? DividentPayoutRatiosExpValList.Find(x => x.Year == obj.Year) : null;
                                            TODPValue = (IEV != null && !string.IsNullOrEmpty(IEV.Value) ? Convert.ToDouble(IEV.Value) : 0) * (FEV != null && !string.IsNullOrEmpty(FEV.Value) ? Convert.ToDouble(FEV.Value) : 0) / 100;
                                            tempExplicitValues.Value = TODPValue.ToString("0.##");
                                        }
                                    }
                                    i = i + 1;
                                    forcastRatioDatasViewModelObj.ForcastRatio_ExplicitValuesVM.Add(tempExplicitValues);
                                }
                                HistForcastRatioList.Add(forcastRatioDatasViewModelObj);
                                if (Incomeobj.LineItem.Contains("Total Ongoing Dividend Payout"))
                                {
                                    TotalOngoing = true;
                                }

                                if (Incomeobj.LineItem.Contains("DPS (Dividends per Share - Basic)"))
                                {
                                    DPSCount = 2;
                                }
                            }
                            integratedFiling.ForcastRatioDatasVM = HistForcastRatioList;
                            integratedFilingsList.Add(integratedFiling);
                        }
                        renderResult.StatusCode = 1;
                        renderResult.Result = integratedFilingsList;
                    }
                    catch (Exception ss)
                    {
                        renderResult.StatusCode = 0;
                        renderResult.Message = "issue in edit case" + Convert.ToString(ss.Message.ToString());
                        renderResult.Result = integratedFilingsList;
                    }



                }
                else
                {
                    // get Integrated Data
                    List<IntegratedDatas> integratedDatasList = new List<IntegratedDatas>();
                    long integratedReveneId = 0;
                    long integratedCostOfSalesId = 0;
                    ForcastRatioDatasViewModel RevenueDatasIntegrated = new ForcastRatioDatasViewModel();
                    ForcastRatioDatasViewModel CostofSalesDatasIntegrated = new ForcastRatioDatasViewModel();
                    ForcastRatioDatasViewModel CostofSales_HistForcastRatio = new ForcastRatioDatasViewModel();
                    List<ForcastRatioDatasViewModel> integratedDatasVMList = new List<ForcastRatioDatasViewModel>();
                    ForcastRatioDatasViewModel IntegratedDatasVMobj = new ForcastRatioDatasViewModel();


                    integratedDatasList = InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.Id != 0 ? iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;

                    foreach (IntegratedDatas integratedDatasObj in integratedDatasList)
                    {
                        IntegratedDatasVMobj = new ForcastRatioDatasViewModel();
                        IntegratedDatasVMobj = mapper.Map<IntegratedDatas, ForcastRatioDatasViewModel>(integratedDatasObj);
                        integratedDatasVMList.Add(IntegratedDatasVMobj);
                    }


                    if (InitialSetup_IValuationObj != null)
                    {
                        int year = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);
                        for (int i = 1; i <= InitialSetup_IValuationObj.ExplicitYearCount + 1; i++)
                        {
                            explicitValue = new ForcastRatio_ExplicitValuesViewModel();
                            year = year + 1;
                            explicitValue.Year = Convert.ToString(year);
                            explicitValue.Value = "";
                            explicitValuesList.Add(explicitValue);
                        }
                    }




                    // for now
                    //integratedDatasList = iIntegratedDatas.AllIncluding().ToList();

                    if (integratedDatasVMList != null && integratedDatasVMList.Count > 0)
                    {
                        List<FilingsTable> filingsList = new List<FilingsTable>();
                        // get all values
                        //List<IIntegratedValues> integratedvalues = new List<IIntegratedValues>();
                        var AllIntegratedValuesList = iIntegratedValues.FindBy(t => integratedDatasVMList.Any(m => m.Id == t.IntegratedDatasId)).ToList();



                        // actual code
                        filingsList = iFilings.FindBy(x => x.CIK == cik).OrderBy(x => x.Sequence).ToList();
                        //filingsList = iFilings.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).OrderBy(x => x.Id).ToList();
                        //for now
                        //filingsList = iFilings.FindBy(x => x.CIK == cik).ToList();

                        foreach (var filing in filingsList)
                        {
                            HistForcastRatioList = new List<ForcastRatioDatasViewModel>();

                            integratedFiling = new ForcastRatioFilingsViewModel();
                            integratedFiling.CompanyName = filing.CompanyName;
                            integratedFiling.ReportName = filing.ReportName;
                            integratedFiling.StatementType = filing.StatementType;
                            integratedFiling.Unit = filing.Unit;
                            integratedFiling.CIK = filing.CIK;
                            ForcastRatioDatasViewModel ErrorObj = new ForcastRatioDatasViewModel();
                            if (integratedFiling.StatementType == "INCOME")
                            {
                                try
                                {
                                    // get IntegratedDats for Income Statement
                                    List<ForcastRatioDatasViewModel> incomeIntegratedDatas = new List<ForcastRatioDatasViewModel>();
                                    incomeIntegratedDatas = integratedDatasVMList.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement);
                                    List<ForcastRatioDatasViewModel> IntegratedTillRevenue = new List<ForcastRatioDatasViewModel>();

                                    bool Revenueflag = false;
                                    // Hard code for now                            
                                    string revenuesynonyms = "Net Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, netNet Sales%Net Revenue%Revenue%Total Revenues%Sales%Total Net Revenue%Total revenue%Total net sales%Sales to customers%Total net revenues%Total revenues (Note 4)%Revenue from Contract with Customer, Excluding Assessed Tax%Revenues%Net revenues%Revenue, net";
                                    List<string> synonyms = revenuesynonyms.Split('%').ToList(); // convert comma seperated values to list
                                                                                                 // for calculate values till revenue
                                    bool flag = false;
                                    int i = 0;
                                    foreach (ForcastRatioDatasViewModel obj in incomeIntegratedDatas)
                                    {
                                        i = i + 1;
                                        if (obj.IsParentItem != true)
                                        {
                                            IntegratedTillRevenue.Add(obj);
                                            integratedReveneId = obj.Id;
                                            //RevenueDatasIntegrated = obj;
                                            // check for Revenue or its synonyms 
                                            foreach (var syn in synonyms)
                                            {
                                                string data = syn.ToUpper();
                                                if (obj.LineItem.ToUpper() == syn.ToUpper())
                                                {
                                                    Revenueflag = true;
                                                    string ChildId = null;
                                                    foreach (var datasObj in IntegratedTillRevenue)
                                                    {
                                                        datasObj.LineItem = datasObj.LineItem + " YoY %";
                                                        // datasObj.Id = 0;
                                                        datasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                        datasObj.IsHistorical_editable = false;
                                                        datasObj.IsExplicit_editable = true;
                                                        datasObj.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                        var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == datasObj.Id);
                                                        foreach (var valueObj in Integratedvalues)
                                                        {
                                                            ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                            integratedValue.FilingDate = valueObj.FilingDate;
                                                            integratedValue.Year = valueObj.Year;
                                                            //integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;

                                                            //DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                            // integratedValue.Year = Convert.ToString(dateTime.Year);
                                                            //  var prevValue = Integratedvalues.Find(x => x.Year.Contains(Convert.ToString(dateTime.Year - 1)));
                                                            var prevValue = Integratedvalues.Find(x => x.Year.Contains(Convert.ToString(Convert.ToInt32(integratedValue.Year) - 1)));

                                                            // ((current-prev)*100)/prev
                                                            double value = prevValue != null && !string.IsNullOrEmpty(prevValue.Value) && prevValue.Value != "0" ? ((Convert.ToDouble(valueObj.Value) - (!string.IsNullOrEmpty(prevValue.Value) ? Convert.ToDouble(prevValue.Value) : 0)) / Convert.ToDouble(prevValue.Value)) * 100 : 0;
                                                            integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));

                                                            datasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                            if (integratedReveneId == datasObj.Id)
                                                            {
                                                                flag = true;
                                                            }

                                                        }
                                                        /////For parent Child relationship
                                                        if (flag == false)
                                                        {

                                                            ChildId = ChildId == null ? datasObj.Id.ToString() : ChildId + "," + datasObj.Id.ToString();
                                                            datasObj.ParentId = integratedReveneId;
                                                            datasObj.isParent = false;
                                                            //tempChildId = datasObj.Id.ToString();
                                                        }
                                                        else if (flag == true)
                                                        {
                                                            datasObj.ChildId = ChildId;
                                                            datasObj.ParentId = null;
                                                            datasObj.isParent = true;
                                                        }
                                                        ///////////////////////////////////
                                                        datasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                        datasObj.IntegratedDatasId = datasObj.Id;
                                                        datasObj.Id = 0;
                                                        // add values till Revenue to hist analysis and forcast ratio Datas
                                                        HistForcastRatioList.Add(datasObj);
                                                        if (flag == true)
                                                        {
                                                            RevenueDatasIntegrated = new ForcastRatioDatasViewModel
                                                            {
                                                                Category = obj.Category,
                                                                InitialSetupId = obj.InitialSetupId,
                                                                LineItem = obj.LineItem,
                                                                Id = obj.Id,
                                                                StatementTypeId = obj.StatementTypeId,
                                                                IsTally = obj.IsTally,
                                                                Sequence = obj.Sequence,
                                                                IsParentItem = obj.IsParentItem
                                                            };
                                                            RevenueDatasIntegrated.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                            foreach (var item in Integratedvalues)
                                                            {
                                                                ForcastRatioValuesViewModel IntegratedValueVMobj = mapper.Map<IntegratedValues, ForcastRatioValuesViewModel>(item);
                                                                RevenueDatasIntegrated.ForcastRatioValuesVM.Add(IntegratedValueVMobj);
                                                            }

                                                        }
                                                    }

                                                    // break in case of found                                            
                                                    break;
                                                }
                                            }
                                        }

                                        if (Revenueflag == true)
                                            break;

                                    }
                                    // if revenue not Exist
                                    if (Revenueflag == false)
                                    {
                                        renderResult.StatusCode = 0;
                                        renderResult.Message = "Revenue not found";
                                        renderResult.Result = integratedFilingsList;
                                        return BadRequest(renderResult);
                                    }


                                    // for calculate cost of goods sold
                                    List<ForcastRatioDatasViewModel> IntegratedTillCostofsales = new List<ForcastRatioDatasViewModel>();
                                    // Hard code for now                            
                                    string Costofsalesynonyms = "Cost of sales%COGS%Cost of Goods Sold%Cost of Revenue%Cost of Products Sold%Total cost of revenue%Total cost of revenues%Cost of products sold, excluding amortization of intangible assets%Costs of goods sold%Cost of equipment and services revenues%Cost of revenues%Cost of revenue (COR)";
                                    //Costofsalesynonyms = Costofsalesynonyms.Replace("TT", "");
                                    List<string> CostofsalesSynonyms = Costofsalesynonyms.Split('%').ToList(); // convert comma seperated values to list

                                    // cost of sales of His analysis and forcast
                                    //IntegratedDatas costofsales_HistForcast = new IntegratedDatas();
                                    flag = false;
                                    int j = 0;
                                    // for calculate values till Cost of Sales
                                    foreach (ForcastRatioDatasViewModel obj in incomeIntegratedDatas)
                                    {
                                        j = j + 1;
                                        if (j > i)
                                        {
                                            if (obj.IsParentItem != true)
                                            {
                                                IntegratedTillCostofsales.Add(obj);
                                                //CostofSalesDatasIntegrated = obj;
                                                integratedCostOfSalesId = obj.Id;
                                                // check for cost of sales or its synonyms 
                                                foreach (var syn in CostofsalesSynonyms)
                                                {
                                                    if (obj.LineItem.ToUpper() == syn.ToUpper())
                                                    {
                                                        string ChildId = null;
                                                        foreach (var datasObj in IntegratedTillCostofsales)
                                                        {
                                                            datasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                            datasObj.IsHistorical_editable = false;
                                                            datasObj.IsExplicit_editable = true;
                                                            datasObj.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                            datasObj.LineItem = datasObj.LineItem + " % of Sales";
                                                            var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == datasObj.Id);
                                                            List<ForcastRatioValuesViewModel> integratedValuLIst = new List<ForcastRatioValuesViewModel>();
                                                            foreach (var valueObj in Integratedvalues)
                                                            {
                                                                ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                                integratedValue.FilingDate = valueObj.FilingDate;
                                                                //integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;

                                                                // DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                                integratedValue.Year = valueObj.Year;
                                                                //integratedValue.Year = Convert.ToString(dateTime.Year);
                                                                ForcastRatioValuesViewModel RevenueValue = RevenueDatasIntegrated.ForcastRatioValuesVM.Find(x => x.Year == (integratedValue.Year));

                                                                // (cost of sales/Net Sales)*100
                                                                double value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && !string.IsNullOrEmpty(valueObj.Value) ? ((Convert.ToDouble(valueObj.Value) / Convert.ToDouble(RevenueValue.Value)) * 100) : 0;
                                                                value = -1 * value;
                                                                integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.00")));
                                                                datasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                                if (integratedCostOfSalesId == datasObj.Id)
                                                                {
                                                                    integratedValuLIst.Add(integratedValue);
                                                                    flag = true;
                                                                }
                                                            }
                                                            /////For parent Child relationship
                                                            if (flag == false)
                                                            {
                                                                ChildId = ChildId == null ? datasObj.Id.ToString() : ChildId + "," + datasObj.Id.ToString();
                                                                datasObj.ParentId = integratedCostOfSalesId;
                                                                datasObj.isParent = false;
                                                            }
                                                            else if (flag == true)
                                                            {
                                                                datasObj.ChildId = ChildId;
                                                                datasObj.ParentId = null;
                                                                datasObj.isParent = true;
                                                            }
                                                            ///////////////////////////////////
                                                            // add values till cost of sales to hist analysis and forcast ratio Datas
                                                            datasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                            datasObj.IntegratedDatasId = datasObj.Id;
                                                            datasObj.Id = 0;
                                                            HistForcastRatioList.Add(datasObj);
                                                            if (flag == true)
                                                            {
                                                                CostofSales_HistForcastRatio = datasObj;
                                                                CostofSales_HistForcastRatio.ForcastRatioValuesVM = integratedValuLIst;
                                                                //CostofSalesDatasIntegrated = obj;
                                                                //CostofSalesDatasIntegrated.IntegratedValues = new List<IntegratedValues>();
                                                                //CostofSalesDatasIntegrated.IntegratedValues = Integratedvalues;
                                                                CostofSalesDatasIntegrated = new ForcastRatioDatasViewModel
                                                                {
                                                                    Category = obj.Category,
                                                                    InitialSetupId = obj.InitialSetupId,
                                                                    LineItem = obj.LineItem,
                                                                    Id = obj.Id,
                                                                    StatementTypeId = obj.StatementTypeId,
                                                                    IsTally = obj.IsTally,
                                                                    Sequence = obj.Sequence,
                                                                    IsParentItem = obj.IsParentItem
                                                                };
                                                                CostofSalesDatasIntegrated.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                                foreach (var item in Integratedvalues)
                                                                {
                                                                    ForcastRatioValuesViewModel IntegratedValueVMobj = mapper.Map<IntegratedValues, ForcastRatioValuesViewModel>(item);
                                                                    CostofSalesDatasIntegrated.ForcastRatioValuesVM.Add(IntegratedValueVMobj);
                                                                }
                                                            }

                                                        }
                                                        //Break when found
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (flag == true)
                                            break;
                                    }

                                    int k = 0;
                                    // find Gross Margin by text or Gross Contain
                                    foreach (var IntegratedObj in incomeIntegratedDatas)
                                    {
                                        k = k + 1;
                                        //IntegratedDatas dataObj = new IntegratedDatas();
                                        if (j == 1 ? k > i : k > j)
                                        {

                                            IntegratedObj.IsHistorical_editable = false;
                                            IntegratedObj.IsExplicit_editable = true;
                                            IntegratedObj.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                            if (IntegratedObj.LineItem.Contains("Gross"))
                                            {

                                                IntegratedObj.IsExplicit_editable = false;
                                                // gross margin=100 - Cost of sales%
                                                var IntegratedDatasObj = IntegratedObj;
                                                IntegratedDatasObj.LineItem = IntegratedDatasObj.LineItem + " Margin %";
                                                IntegratedDatasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                foreach (var valueObj in CostofSales_HistForcastRatio.ForcastRatioValuesVM)
                                                {
                                                    ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                    integratedValue.FilingDate = valueObj.FilingDate;


                                                    // DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                    integratedValue.Year = valueObj.Year;

                                                    // gross margin=100 - Cost of sales%
                                                    double value = !string.IsNullOrEmpty(valueObj.Value) ? Convert.ToDouble(100 - Convert.ToDouble(valueObj.Value)) : 0;
                                                    integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));

                                                    IntegratedDatasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                }
                                                IntegratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                IntegratedDatasObj.IntegratedDatasId = IntegratedDatasObj.Id;
                                                IntegratedDatasObj.Id = 0;
                                                HistForcastRatioList.Add(IntegratedDatasObj);

                                            }
                                            else if (IntegratedObj.LineItem.Contains("Depreciation") && IntegratedObj.Category == "Operating")
                                            {
                                                // Depreciation of current year(Intergrated)/Net Property,plant & equipment of prev year(Integrated)

                                                // PP&E, Property and Equipment or  Net Property, Plant & Equipment or //Property, Plant & Equipment, Net
                                                ForcastRatioDatasViewModel NetPropertyDatas = integratedDatasVMList.Find(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && (x.LineItem.ToLower().Contains(("Net Property, Plant & Equipment").ToLower()) || x.LineItem.ToLower().Contains(("Property, Plant & Equipment, Net").ToLower()) || x.LineItem.ToLower().Contains(("PP&E, Property and Equipment").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("Equipment").ToLower())));

                                                var IntegratedDatasObj = IntegratedObj;

                                                IntegratedDatasObj.LineItem = IntegratedDatasObj.LineItem + " % of Net PP&E";
                                                IntegratedDatasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntegratedObj.Id);
                                                var NetPropertyValues = NetPropertyDatas != null ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == NetPropertyDatas.Id) : null;
                                                foreach (var valueObj in Integratedvalues)
                                                {
                                                    ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                    integratedValue.FilingDate = valueObj.FilingDate;
                                                    //integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;

                                                    // DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();

                                                    integratedValue.Year = valueObj.Year;
                                                    var NetPropertyprevValue = NetPropertyValues != null ? NetPropertyValues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(integratedValue.Year) - 1)) : null;

                                                    // Depreciation of current year(Intergrated)/Net Property,plant & equipment of prev year(Integrated)

                                                    double value = NetPropertyprevValue != null && !string.IsNullOrEmpty(NetPropertyprevValue.Value) && NetPropertyprevValue.Value != "0" ? ((!string.IsNullOrEmpty(valueObj.Value) ? Convert.ToDouble(valueObj.Value) : 0) / Convert.ToDouble(NetPropertyprevValue.Value)) * 100 : 0;
                                                    value = -1 * value;
                                                    integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));

                                                    IntegratedDatasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                }
                                                IntegratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                IntegratedDatasObj.IntegratedDatasId = IntegratedDatasObj.Id;
                                                IntegratedDatasObj.Id = 0;
                                                HistForcastRatioList.Add(IntegratedDatasObj);


                                            }
                                            else if (IntegratedObj.LineItem.ToLower().Contains("amortization") && IntegratedObj.Category == "Non-Operating")
                                            {
                                                // Amortization of current year(Intergrated)/Net Intensible sales of prev year(Integrated)
                                                // Intangible Assets, Net , Trademarks, Purchased Intangible Assets, Purchased and Other Intangibles, Acquisition-Related Intangibles, Other Intangible Assets

                                                ForcastRatioDatasViewModel IntangibleDatas = integratedDatasVMList.Find(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && (x.LineItem.ToLower().Contains(("Intangible Assets, Net").ToLower()) || x.LineItem.ToLower().Contains(("Trademarks").ToLower()) || x.LineItem.ToLower().Contains(("Purchased Intangible Assets").ToLower()) || x.LineItem.ToLower().Contains(("Purchased Intangible Assets").ToLower()) || x.LineItem.ToLower().Contains(("Other Intangible Assets").ToLower()) || x.LineItem.ToLower().Contains(("Intangible").ToLower()) || x.LineItem.ToLower().Contains(("Purchased and Other Intangibles").ToLower())));

                                                var IntegratedDatasObj = IntegratedObj;

                                                IntegratedDatasObj.LineItem = IntegratedDatasObj.LineItem + " % of Net Intengible assets";
                                                IntegratedDatasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntegratedObj.Id);
                                                var IntangibleValues = IntangibleDatas != null ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntangibleDatas.Id) : null;
                                                foreach (var valueObj in Integratedvalues)
                                                {
                                                    ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                    integratedValue.FilingDate = valueObj.FilingDate;
                                                    // integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;

                                                    // DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                    integratedValue.Year = valueObj.Year;
                                                    var IntangibleprevValue = IntangibleValues != null ? IntangibleValues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(valueObj.Year) - 1)) : null;

                                                    // Depreciation of current year(Intergrated)/Net Property,plant & equipment of prev year(Integrated)

                                                    double value = IntangibleprevValue != null && !string.IsNullOrEmpty(IntangibleprevValue.Value) && IntangibleprevValue.Value != "0" ? ((!string.IsNullOrEmpty(valueObj.Value) ? Convert.ToDouble(valueObj.Value) : 0) / Convert.ToDouble(IntangibleprevValue.Value)) * 100 : 0;
                                                    value = -1 * value;
                                                    integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));

                                                    IntegratedDatasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                }
                                                IntegratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                IntegratedDatasObj.IntegratedDatasId = IntegratedDatasObj.Id;
                                                IntegratedDatasObj.Id = 0;
                                                HistForcastRatioList.Add(IntegratedDatasObj);


                                            }
                                            else if (IntegratedObj.Category == "Non-Operating" || IntegratedObj.Category == "Financing")
                                            {
                                                //Consider only Single Non-Operating Item
                                                //only for Assets Held for Sale

                                                // if (IntegratedObj.LineItem.ToUpper().Contains("ASSTS HELD FOR SALE")) // no synonym exist in mapping table
                                                //{
                                                var IntegratedDatasObj = IntegratedObj;
                                                IntegratedDatasObj.LineItem = IntegratedDatasObj.LineItem + " YoY %";
                                                IntegratedObj.IsExplicit_editable = true;
                                                IntegratedDatasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntegratedObj.Id);
                                                foreach (var valueObj in Integratedvalues)
                                                {
                                                    ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                    integratedValue.FilingDate = valueObj.FilingDate;
                                                    //  integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;

                                                    //    DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                    integratedValue.Year = valueObj.Year;
                                                    var prevValue = Integratedvalues.Find(x => x.Year == (Convert.ToString(Convert.ToInt32(valueObj.Year) - 1)));

                                                    // ((current-prev)*100)/prev

                                                    double value = prevValue != null && !string.IsNullOrEmpty(prevValue.Value) && prevValue.Value != "0" ? ((Convert.ToDouble(valueObj.Value) - (!string.IsNullOrEmpty(prevValue.Value) ? Convert.ToDouble(prevValue.Value) : 0)) / Convert.ToDouble(prevValue.Value)) * 100 : 0;
                                                    //   value = -1 * value;
                                                    integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));

                                                    IntegratedDatasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                }
                                                IntegratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                IntegratedDatasObj.IntegratedDatasId = IntegratedDatasObj.Id;
                                                IntegratedDatasObj.Id = 0;
                                                HistForcastRatioList.Add(IntegratedDatasObj);
                                                //}
                                            }
                                            else
                                            {
                                                // for all other items 
                                                if (IntegratedObj.LineItem == "EBITDA" || IntegratedObj.LineItem == "EBITA" || IntegratedObj.LineItem == "EBIT" || IntegratedObj.LineItem == "EBT" || IntegratedObj.LineItem == "NET INCOME before extraordinary items" || IntegratedObj.LineItem == "NET INCOME after extraordinary items")
                                                {
                                                    IntegratedObj.LineItem = IntegratedObj.LineItem + " Margin %";
                                                    IntegratedObj.IsExplicit_editable = false;

                                                    // IntegratedObj.ForcastRatio_ExplicitValuesVM = new List<ForcastRatio_ExplicitValuesViewModel>();
                                                    var IntegratedDatasObj = IntegratedObj;

                                                    IntegratedDatasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntegratedObj.Id);
                                                    foreach (var valueObj in Integratedvalues)
                                                    {
                                                        ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                        integratedValue.FilingDate = valueObj.FilingDate;
                                                        // integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;
                                                        //  DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();

                                                        integratedValue.Year = valueObj.Year;
                                                        ForcastRatioValuesViewModel RevenueValue = RevenueDatasIntegrated.ForcastRatioValuesVM.Find(x => x.Year == valueObj.Year);

                                                        // (cost of sales/Net Sales)*100

                                                        double value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0" && valueObj.Value != null ? (((Convert.ToDouble(valueObj.Value)) / Convert.ToDouble(RevenueValue.Value)) * 100) : 0;
                                                        integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        IntegratedDatasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                    }
                                                    IntegratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                    IntegratedDatasObj.IntegratedDatasId = IntegratedDatasObj.Id;
                                                    IntegratedDatasObj.Id = 0;
                                                    HistForcastRatioList.Add(IntegratedDatasObj);

                                                }
                                                else
                                                {

                                                    IntegratedObj.LineItem = IntegratedObj.LineItem + " % of Sales";
                                                    var IntegratedDatasObj = IntegratedObj;

                                                    IntegratedDatasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntegratedObj.Id);
                                                    foreach (var valueObj in Integratedvalues)
                                                    {
                                                        ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                        integratedValue.FilingDate = valueObj.FilingDate;
                                                        // integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;
                                                        //  DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();

                                                        integratedValue.Year = valueObj.Year;
                                                        ForcastRatioValuesViewModel RevenueValue = RevenueDatasIntegrated.ForcastRatioValuesVM.Find(x => x.Year == valueObj.Year);

                                                        // (cost of sales/Net Sales)*100

                                                        double value = RevenueValue != null && !string.IsNullOrEmpty(RevenueValue.Value) && RevenueValue.Value != "0" && valueObj.Value != null ? (((Convert.ToDouble(valueObj.Value)) / Convert.ToDouble(RevenueValue.Value)) * 100) : 0;
                                                        value = -1 * value;
                                                        integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        IntegratedDatasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                    }
                                                    IntegratedDatasObj.StatementTypeId = (int)StatementTypeEnum.IncomeStatement;
                                                    IntegratedDatasObj.IntegratedDatasId = IntegratedDatasObj.Id;
                                                    IntegratedDatasObj.Id = 0;
                                                    HistForcastRatioList.Add(IntegratedDatasObj);
                                                }


                                            }

                                        }
                                    }
                                    integratedFiling.ForcastRatioDatasVM = HistForcastRatioList;
                                    integratedFilingsList.Add(integratedFiling);
                                }
                                catch (Exception ss)
                                {
                                    renderResult.StatusCode = 1;
                                    renderResult.Message = "Income Statement issue-" + Convert.ToString(ss.Message);
                                    renderResult.Result = integratedFilingsList;
                                }
                            }
                            else
                            if (integratedFiling.StatementType == "BALANCE_SHEET")
                            {
                                try
                                {

                                    // get IntegratedDats for Balance Sheet
                                    List<ForcastRatioDatasViewModel> balanceSheetIntegratedDatas = new List<ForcastRatioDatasViewModel>();
                                    balanceSheetIntegratedDatas = integratedDatasVMList.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet);
                                    HistForcastRatioList = new List<ForcastRatioDatasViewModel>();
                                    ForcastRatioDatasViewModel IntDataBalance = new ForcastRatioDatasViewModel();
                                    foreach (ForcastRatioDatasViewModel IntDatas in balanceSheetIntegratedDatas)
                                    {
                                        ErrorObj = IntDatas;
                                        ForcastRatioValuesViewModel intVal = new ForcastRatioValuesViewModel();
                                        IntDataBalance = new ForcastRatioDatasViewModel();
                                        //check for (Operating Cash)
                                        if (IntDatas.LineItem.Contains("(Operating Cash)"))
                                        {
                                        }
                                        else if (IntDatas.LineItem.Contains("(Excess Cash)"))
                                        {
                                            //find Excess Cash Values
                                            var IntegratedExcessCashvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);

                                            //find Operating cash
                                            ForcastRatioDatasViewModel operatingcashDatasVM = balanceSheetIntegratedDatas.Find(x => x.LineItem.Contains("(Operating Cash)"));
                                            // find Oparting Cash Values
                                            var IntegratedOperatingvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == operatingcashDatasVM.Id);

                                            // add cash and cash Equivalent 
                                            IntDataBalance = new ForcastRatioDatasViewModel();
                                            IntDataBalance.IsParentItem = false;
                                            IntDataBalance.LineItem = "Cash and Cash Equivalents";
                                            IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            IntDataBalance.IsTally = false;
                                            IntDataBalance.Category = "";
                                            IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                            IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                            IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                            IntDataBalance.IsHistorical_editable = false;
                                            IntDataBalance.IsExplicit_editable = false;

                                            //  var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                            ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                            List<ForcastRatioValuesViewModel> ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();

                                            if (IntegratedExcessCashvalues != null && IntegratedExcessCashvalues.Count > 0)
                                                foreach (var valueObj in IntegratedExcessCashvalues)
                                                {
                                                    integratedValue = new ForcastRatioValuesViewModel();
                                                    integratedValue.Year = valueObj.Year;
                                                    // integratedValue.Value = valueObj.Value;
                                                    double value = 0;
                                                    var OperatingValue = IntegratedOperatingvalues != null && IntegratedOperatingvalues.Count > 0 ? IntegratedOperatingvalues.Find(x => x.Year == valueObj.Year) : null;
                                                    value = (valueObj != null && !string.IsNullOrEmpty(valueObj.Value) ? Convert.ToDouble(valueObj.Value) : 0) + (OperatingValue != null && !string.IsNullOrEmpty(OperatingValue.Value) ? Convert.ToDouble(OperatingValue.Value) : 0);

                                                    integratedValue.Value = value.ToString("0.");
                                                    ForcastRatioValuesViewModelList.Add(integratedValue);
                                                }
                                            IntDataBalance.ForcastRatioValuesVM = ForcastRatioValuesViewModelList;
                                            HistForcastRatioList.Add(IntDataBalance);


                                            // add operating cash
                                            // ForcastRatioDatasViewModel operatingcashDatasVM = balanceSheetIntegratedDatas.Find(x => x.LineItem.Contains("(Operating Cash)"));
                                            IntDataBalance = new ForcastRatioDatasViewModel();
                                            IntDataBalance.IsParentItem = false;
                                            IntDataBalance.LineItem = operatingcashDatasVM.LineItem;
                                            IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            IntDataBalance.IsTally = false;
                                            IntDataBalance.Category = "";
                                            IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                            IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                            IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                            IntDataBalance.IsHistorical_editable = false;
                                            IntDataBalance.IsExplicit_editable = true;
                                            IntDataBalance.IntegratedDatasId = operatingcashDatasVM.Id;
                                            //  var IntegratedOperatingvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == operatingcashDatasVM.Id); 
                                            ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();
                                            foreach (var valueObj in IntegratedOperatingvalues)
                                            {
                                                integratedValue = new ForcastRatioValuesViewModel();
                                                integratedValue.FilingDate = valueObj.FilingDate;
                                                integratedValue.Year = valueObj.Year;
                                                double value = 0;
                                                //var ExcessValue = IntegratedExcessCashvalues != null && IntegratedExcessCashvalues.Count > 0 ? IntegratedExcessCashvalues.Find(x => x.Year == valueObj.Year) : null;
                                                var OperatingValue = IntegratedOperatingvalues != null && IntegratedOperatingvalues.Count > 0 ? IntegratedOperatingvalues.Find(x => x.Year == valueObj.Year) : null;
                                                value = (OperatingValue != null && !string.IsNullOrEmpty(OperatingValue.Value) ? Convert.ToDouble(OperatingValue.Value) : 0);

                                                integratedValue.Value = value.ToString("0.");
                                                ForcastRatioValuesViewModelList.Add(integratedValue);
                                            }
                                            IntDataBalance.ForcastRatioValuesVM = ForcastRatioValuesViewModelList;
                                            HistForcastRatioList.Add(IntDataBalance);

                                            //Excess cash
                                            IntDataBalance = new ForcastRatioDatasViewModel();
                                            IntDataBalance.IsParentItem = false;
                                            IntDataBalance.LineItem = IntDatas.LineItem;
                                            IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            IntDataBalance.IsTally = false;
                                            IntDataBalance.Category = "";
                                            IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                            IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                            IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                            IntDataBalance.IsHistorical_editable = false;
                                            IntDataBalance.IsExplicit_editable = true;
                                            IntDataBalance.IntegratedDatasId = IntDatas.Id;

                                            integratedValue = new ForcastRatioValuesViewModel();
                                            ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();
                                            foreach (var valueObj in IntegratedExcessCashvalues)
                                            {
                                                integratedValue = new ForcastRatioValuesViewModel();
                                                integratedValue.FilingDate = valueObj.FilingDate;
                                                integratedValue.Year = valueObj.Year;
                                                integratedValue.Value = valueObj.Value;
                                                ForcastRatioValuesViewModelList.Add(integratedValue);
                                            }
                                            IntDataBalance.ForcastRatioValuesVM = ForcastRatioValuesViewModelList;
                                            HistForcastRatioList.Add(IntDataBalance);
                                        }
                                        else if (IntDatas.LineItem.ToUpper().Contains("CASH AND CASH EQUIVALENTS") || IntDatas.LineItem.ToUpper().Contains("CASH AND EQUIVALENTS"))
                                        {
                                            IntDataBalance = new ForcastRatioDatasViewModel();
                                            IntDataBalance.IsParentItem = false;
                                            IntDataBalance.LineItem = IntDatas.LineItem;
                                            IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            IntDataBalance.IsTally = false;
                                            IntDataBalance.Category = "";
                                            IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                            IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                            IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                            IntDataBalance.IsHistorical_editable = false;
                                            IntDataBalance.IsExplicit_editable = false;
                                            IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                            var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                            ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                            List<ForcastRatioValuesViewModel> ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();
                                            foreach (var valueObj in Integratedvalues)
                                            {
                                                integratedValue = new ForcastRatioValuesViewModel();
                                                integratedValue.FilingDate = valueObj.FilingDate;
                                                //  DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                integratedValue.Year = valueObj.Year;
                                                integratedValue.Value = valueObj.Value;
                                                ForcastRatioValuesViewModelList.Add(integratedValue);
                                            }
                                            IntDataBalance.ForcastRatioValuesVM = ForcastRatioValuesViewModelList;
                                            HistForcastRatioList.Add(IntDataBalance);

                                            IntDataBalance = new ForcastRatioDatasViewModel();
                                            IntDataBalance.IsParentItem = false;
                                            IntDataBalance.LineItem = "Cash Needed for Operations (Working Capital)";
                                            IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            IntDataBalance.IsTally = false;
                                            IntDataBalance.Category = "";
                                            IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                            IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                            IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                            IntDataBalance.IsHistorical_editable = true;
                                            IntDataBalance.IsExplicit_editable = true;
                                            IntDataBalance.IntegratedDatasId = null;
                                            //IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                            ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();
                                            foreach (var valueObj in Integratedvalues)
                                            {
                                                integratedValue = new ForcastRatioValuesViewModel();
                                                integratedValue.FilingDate = valueObj.FilingDate;
                                                //DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                integratedValue.Year = valueObj.Year;
                                                integratedValue.Value = null;
                                                ForcastRatioValuesViewModelList.Add(integratedValue);
                                            }
                                            IntDataBalance.ForcastRatioValuesVM = ForcastRatioValuesViewModelList;
                                            HistForcastRatioList.Add(IntDataBalance);

                                            IntDataBalance = new ForcastRatioDatasViewModel();
                                            IntDataBalance.IsParentItem = false;
                                            IntDataBalance.LineItem = "Excess Cash";
                                            IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            IntDataBalance.IsTally = false;
                                            IntDataBalance.Category = "";
                                            IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                            IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                            IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                            IntDataBalance.IsHistorical_editable = false;
                                            IntDataBalance.IsExplicit_editable = true;
                                            IntDataBalance.IntegratedDatasId = null;
                                            ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();
                                            foreach (var valueObj in Integratedvalues)
                                            {
                                                integratedValue = new ForcastRatioValuesViewModel();
                                                integratedValue.FilingDate = valueObj.FilingDate;
                                                //  DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                integratedValue.Year = valueObj.Year;
                                                integratedValue.Value = valueObj.Value;
                                                ForcastRatioValuesViewModelList.Add(integratedValue);
                                            }
                                            IntDataBalance.ForcastRatioValuesVM = ForcastRatioValuesViewModelList;
                                            HistForcastRatioList.Add(IntDataBalance);
                                        }
                                        else
                                        {
                                            if (IntDatas.IsParentItem == true)
                                            {
                                                IntDataBalance = new ForcastRatioDatasViewModel();
                                                IntDataBalance.IsParentItem = true;
                                                IntDataBalance.LineItem = IntDatas.LineItem;
                                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                IntDataBalance.IsTally = false;
                                                IntDataBalance.Category = "";
                                                IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                IntDataBalance.IsHistorical_editable = false;
                                                IntDataBalance.IsExplicit_editable = false;
                                                IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                List<ForcastRatioValuesViewModel> ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();
                                                foreach (var valueObj in Integratedvalues)
                                                {
                                                    integratedValue = new ForcastRatioValuesViewModel();
                                                    integratedValue.FilingDate = valueObj.FilingDate;
                                                    // DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                    integratedValue.Year = valueObj.Year;
                                                    integratedValue.Value = valueObj.Value;
                                                    ForcastRatioValuesViewModelList.Add(integratedValue);
                                                }
                                                IntDataBalance.ForcastRatioValuesVM = ForcastRatioValuesViewModelList;
                                                HistForcastRatioList.Add(IntDataBalance);
                                            }
                                            else
                                            {

                                                if (IntDatas.LineItem.ToUpper().Contains("NET RECEIVABLE") || IntDatas.LineItem.ToUpper().Contains("ACCOUNTS RECEIVABLE") || IntDatas.LineItem.ToUpper().Contains("TRADE ACCOUNTS RECEIVABLE") || IntDatas.LineItem.ToUpper().Contains("TRADE RECEIVABLE") || IntDatas.LineItem.ToUpper().Contains("ACCOUNTS RECEIVABLE-TRADE"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem + " % of Sales";
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = true;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    //ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                    //List<ForcastRatioValuesViewModel> ForcastRatioValuesViewModelList = new List<ForcastRatioValuesViewModel>();
                                                    foreach (IntegratedValues IVReceivable in Integratedvalues)
                                                    {
                                                        intVal = new ForcastRatioValuesViewModel();
                                                        foreach (ForcastRatioValuesViewModel IVRevenue in RevenueDatasIntegrated.ForcastRatioValuesVM)
                                                        {
                                                            if (IVReceivable.Year == IVRevenue.Year)
                                                            {
                                                                intVal.FilingDate = IVReceivable.FilingDate;
                                                                intVal.Year = IVRevenue.Year;

                                                                double value = 0;
                                                                value = IVRevenue.Value != null && !string.IsNullOrEmpty(IVRevenue.Value) && IVRevenue.Value != "0" ? (IVReceivable.Value != null && !string.IsNullOrEmpty(IVReceivable.Value) ? Math.Round(Convert.ToDouble(IVReceivable.Value) * 100) : 0) / Convert.ToDouble(IVRevenue.Value) : 0;
                                                                intVal.Value = value.ToString("0.##");
                                                                IntDataBalance.ForcastRatioValuesVM.Add(intVal);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else if (IntDatas.LineItem.ToUpper().Contains("INVENTORY") || IntDatas.LineItem.ToUpper().Contains("INVENTORIES"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem + " % of COGS";
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = true;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    foreach (IntegratedValues IVINVENTORY in Integratedvalues)
                                                    {
                                                        intVal = new ForcastRatioValuesViewModel();
                                                        foreach (ForcastRatioValuesViewModel IVCOGS in CostofSalesDatasIntegrated.ForcastRatioValuesVM)
                                                        {
                                                            if (IVINVENTORY.Year == IVCOGS.Year)
                                                            {
                                                                intVal.FilingDate = IVINVENTORY.FilingDate;

                                                                //   DateTime dateTime = !string.IsNullOrEmpty(intVal.FilingDate) ? Convert.ToDateTime(intVal.FilingDate) : new DateTime();
                                                                intVal.Year = IVINVENTORY.Year;
                                                                double value = 0;

                                                                value = IVCOGS.Value != null && !string.IsNullOrEmpty(IVCOGS.Value) && IVCOGS.Value != "0" ? (IVINVENTORY.Value != null && !string.IsNullOrEmpty(IVINVENTORY.Value) ? Convert.ToDouble(IVINVENTORY.Value) * 100 : 0) / Convert.ToDouble(IVCOGS.Value) : 0;
                                                                value = -1 * value;
                                                                intVal.Value = value.ToString("0.##");
                                                                IntDataBalance.ForcastRatioValuesVM.Add(intVal);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else if (IntDatas.LineItem.ToUpper().Contains("OTHER CURRENT ASSETS"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem + " % of Sales";
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = true;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    foreach (IntegratedValues IVOCA in Integratedvalues)
                                                    {
                                                        intVal = new ForcastRatioValuesViewModel();
                                                        foreach (ForcastRatioValuesViewModel IVRevenue in RevenueDatasIntegrated.ForcastRatioValuesVM)
                                                        {
                                                            if (IVOCA.Year == IVRevenue.Year)
                                                            {
                                                                intVal.FilingDate = IVOCA.FilingDate;

                                                                // DateTime dateTime = !string.IsNullOrEmpty(intVal.FilingDate) ? Convert.ToDateTime(intVal.FilingDate) : new DateTime();
                                                                intVal.Year = IVOCA.Year;
                                                                double value = 0;
                                                                value = IVRevenue.Value != null && !string.IsNullOrEmpty(IVRevenue.Value) && IVRevenue.Value != "0" ? (IVOCA.Value != null && !string.IsNullOrEmpty(IVOCA.Value) ? Convert.ToDouble(IVOCA.Value) * 100 : 0) / Convert.ToDouble(IVRevenue.Value) : 0;
                                                                intVal.Value = value.ToString("0.##");
                                                                IntDataBalance.ForcastRatioValuesVM.Add(intVal);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else if (IntDatas.LineItem.ToUpper().Contains("PP&E") || IntDatas.LineItem.ToUpper().Contains("PROPERTY AND EQUIPMENT") || IntDatas.LineItem.ToUpper().Contains("PROPERTY, PLANT AND EQUIPMENT") || IntDatas.LineItem.ToUpper().Contains("PROPERTY PLANT AND EQUIPMENT"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem + " % of Sales";
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = true;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    foreach (IntegratedValues IVPPE in Integratedvalues)
                                                    {
                                                        intVal = new ForcastRatioValuesViewModel();
                                                        foreach (ForcastRatioValuesViewModel IVRevenue in RevenueDatasIntegrated.ForcastRatioValuesVM)
                                                        {
                                                            if (IVPPE.Year == IVRevenue.Year)
                                                            {
                                                                intVal.FilingDate = IVPPE.FilingDate;

                                                                //  DateTime dateTime = !string.IsNullOrEmpty(intVal.FilingDate) ? Convert.ToDateTime(intVal.FilingDate) : new DateTime();
                                                                intVal.Year = IVPPE.Year;
                                                                double value = 0;

                                                                value = IVRevenue.Value != null && !string.IsNullOrEmpty(IVRevenue.Value) && IVRevenue.Value != "0" ? (IVPPE.Value != null && !string.IsNullOrEmpty(IVPPE.Value) ? Convert.ToDouble(IVPPE.Value) * 100 : 0) / Convert.ToDouble(IVRevenue.Value) : 0;
                                                                intVal.Value = value.ToString("0.##");
                                                                IntDataBalance.ForcastRatioValuesVM.Add(intVal);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else if (IntDatas.LineItem.ToUpper().Contains("ACCOUNTS PAYABLE") || IntDatas.LineItem.ToUpper().Contains("PAYABLE") || IntDatas.LineItem.ToUpper().Contains("TRADE PAYABLE") || IntDatas.LineItem.ToUpper().Contains("TRADE ACCOUNTS PAYABLE"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem + " % of COGS";
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = true;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    foreach (IntegratedValues IVAP in Integratedvalues)
                                                    {
                                                        intVal = new ForcastRatioValuesViewModel();
                                                        foreach (ForcastRatioValuesViewModel IVCOGS in CostofSalesDatasIntegrated.ForcastRatioValuesVM)
                                                        {
                                                            if (IVAP.Year == IVCOGS.Year)
                                                            {
                                                                intVal.FilingDate = IVAP.FilingDate;

                                                                //  DateTime dateTime = !string.IsNullOrEmpty(intVal.FilingDate) ? Convert.ToDateTime(intVal.FilingDate) : new DateTime();
                                                                intVal.Year = IVAP.Year;
                                                                double value = 0;
                                                                value = IVCOGS.Value != null && !string.IsNullOrEmpty(IVCOGS.Value) && IVCOGS.Value != "0" ? (IVAP.Value != null && !string.IsNullOrEmpty(IVAP.Value) ? Convert.ToDouble(IVAP.Value) * 100 : 0) / Convert.ToDouble(IVCOGS.Value) : 0;
                                                                value = -1 * value;
                                                                intVal.Value = value.ToString("0.##");
                                                                IntDataBalance.ForcastRatioValuesVM.Add(intVal);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else if (IntDatas.LineItem.ToUpper().Contains("DEFERRED REVENUE") || IntDatas.LineItem.ToUpper().Contains("DEFERRED INCOME") || IntDatas.LineItem.ToUpper().Contains("UNEARNED REVENUE"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem + " % of Sales";
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = true;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    foreach (IntegratedValues IVDR in Integratedvalues)
                                                    {
                                                        intVal = new ForcastRatioValuesViewModel();
                                                        foreach (ForcastRatioValuesViewModel IVRevenue in RevenueDatasIntegrated.ForcastRatioValuesVM)
                                                        {
                                                            if (IVDR.Year == IVRevenue.Year)
                                                            {
                                                                intVal.FilingDate = IVDR.FilingDate;

                                                                //DateTime dateTime = !string.IsNullOrEmpty(intVal.FilingDate) ? Convert.ToDateTime(intVal.FilingDate) : new DateTime();
                                                                intVal.Year = IVDR.Year;
                                                                double value = 0;

                                                                value = IVRevenue.Value != null && !string.IsNullOrEmpty(IVRevenue.Value) && IVRevenue.Value != "0" ? (IVDR.Value != null && !string.IsNullOrEmpty(IVDR.Value) ? Convert.ToDouble(IVDR.Value) * 100 : 0) / Convert.ToDouble(IVRevenue.Value) : 0;
                                                                intVal.Value = value.ToString("0.##");
                                                                IntDataBalance.ForcastRatioValuesVM.Add(intVal);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else if (IntDatas.LineItem.ToUpper().Contains("ACCRUED EXPENSES") || IntDatas.LineItem.ToUpper().Contains("ACCRUED SALARIES") || IntDatas.LineItem.ToUpper().Contains("ACCRUED COMPENSATION") || IntDatas.LineItem.ToUpper().Contains("COMPENSATION AND BENEFIT") || IntDatas.LineItem.ToUpper().Contains("ACCRUED PAYROLL AND RELATED") || IntDatas.LineItem.ToUpper().Contains("ACCRUED PAYROLL AND OTHER BENEFITS RELATED LIABILITIES") || IntDatas.LineItem.ToUpper().Contains("OTHER ACCRUED LIABILITIES") || IntDatas.LineItem.ToUpper().Contains("ACCRUED LIABILITIES"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem + " % of Sales";
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = true;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    foreach (IntegratedValues IVAE in Integratedvalues)
                                                    {
                                                        intVal = new ForcastRatioValuesViewModel();
                                                        foreach (ForcastRatioValuesViewModel IVRevenue in RevenueDatasIntegrated.ForcastRatioValuesVM)
                                                        {
                                                            if (IVAE.Year == IVRevenue.Year)
                                                            {
                                                                intVal.FilingDate = IVAE.FilingDate;

                                                                //  DateTime dateTime = !string.IsNullOrEmpty(intVal.FilingDate) ? Convert.ToDateTime(intVal.FilingDate) : new DateTime();
                                                                intVal.Year = IVAE.Year;
                                                                double value = 0;

                                                                value = IVRevenue.Value != null && !string.IsNullOrEmpty(IVRevenue.Value) && IVRevenue.Value != "0" ? (IVAE.Value != null && !string.IsNullOrEmpty(IVAE.Value) ? Convert.ToDouble(IVAE.Value) * 100 : 0) / Convert.ToDouble(IVRevenue.Value) : 0;
                                                                intVal.Value = value.ToString("0.##");
                                                                IntDataBalance.ForcastRatioValuesVM.Add(intVal);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else if (IntDatas.LineItem.ToUpper().Contains("CURRENT LIABILITIES") || IntDatas.LineItem.ToUpper().Contains("CURRENT LIABILITY") || IntDatas.LineItem.ToUpper().Contains("TOTAL LIABILITY") || IntDatas.LineItem.ToUpper().Contains("TOTAL LIABILITIES") || IntDatas.LineItem.ToUpper().Contains("TOTAL STOCKHOLDER") || IntDatas.LineItem.ToUpper().Contains("TOTAL EQUITY") || IntDatas.LineItem.ToUpper().Contains("TEMPORATY EQUITY AND STOCKHOLDER") || IntDatas.LineItem.ToUpper().Contains("TOTAL LIABILITIES AND STOCKHOLDER"))
                                                {
                                                    IntDataBalance = new ForcastRatioDatasViewModel();
                                                    IntDataBalance.IsParentItem = false;
                                                    IntDataBalance.LineItem = IntDatas.LineItem;
                                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                                    IntDataBalance.IsTally = false;
                                                    IntDataBalance.Category = "";
                                                    IntDataBalance.Sequence = HistForcastRatioList.Count + 1;
                                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntDataBalance.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntDataBalance.IsHistorical_editable = false;
                                                    IntDataBalance.IsExplicit_editable = false;
                                                    IntDataBalance.IntegratedDatasId = IntDatas.Id;
                                                    IntDataBalance.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                    foreach (var valueObj in Integratedvalues)
                                                    {
                                                        integratedValue = new ForcastRatioValuesViewModel();
                                                        integratedValue.FilingDate = valueObj.FilingDate;
                                                        //DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                        integratedValue.Year = valueObj.Year;
                                                        integratedValue.Value = valueObj.Value;
                                                        IntDataBalance.ForcastRatioValuesVM.Add(integratedValue);
                                                    }
                                                    //IntDataBalance.ForcastRatioValuesVM = IntDatas.ForcastRatioValuesVM;
                                                    HistForcastRatioList.Add(IntDataBalance);
                                                }
                                                else
                                                {
                                                    var IntegratedDatasObj = IntDatas;
                                                    IntegratedDatasObj.LineItem = IntegratedDatasObj.LineItem + " YoY %";
                                                    IntegratedDatasObj.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                                    IntegratedDatasObj.StatementTypeId = (int)StatementTypeEnum.BalanceSheet;
                                                    IntegratedDatasObj.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                                                    IntegratedDatasObj.IsHistorical_editable = false;
                                                    IntegratedDatasObj.IsExplicit_editable = false;
                                                    IntegratedDatasObj.IntegratedDatasId = IntDatas.Id;
                                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntDatas.Id);
                                                    foreach (var valueObj in Integratedvalues)
                                                    {
                                                        ForcastRatioValuesViewModel integratedValue = new ForcastRatioValuesViewModel();
                                                        integratedValue.FilingDate = valueObj.FilingDate;
                                                        //integratedValue.IntegratedDatasId = valueObj.IntegratedDatasId;

                                                        //DateTime dateTime = !string.IsNullOrEmpty(integratedValue.FilingDate) ? Convert.ToDateTime(integratedValue.FilingDate) : new DateTime();
                                                        integratedValue.Year = valueObj.Year;
                                                        var prevValue = Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(valueObj.Year) - 1));

                                                        // ((current-prev)*100)/prev
                                                        double value = prevValue != null && prevValue.Value != null && !string.IsNullOrEmpty(prevValue.Value) && prevValue.Value != "0" ? (((valueObj.Value != null && !string.IsNullOrEmpty(valueObj.Value) ? Convert.ToDouble(valueObj.Value) : 0) - (prevValue.Value != null && !string.IsNullOrEmpty(prevValue.Value) ? Convert.ToDouble(prevValue.Value) : 0)) / Convert.ToDouble(prevValue.Value)) * 100 : 0; integratedValue.Value = Convert.ToString(Convert.ToDouble(value.ToString("0.##")));
                                                        IntegratedDatasObj.ForcastRatioValuesVM.Add(integratedValue);
                                                    }
                                                    IntegratedDatasObj.Id = 0;
                                                    HistForcastRatioList.Add(IntegratedDatasObj);
                                                }
                                            }
                                        }
                                    }
                                    integratedFiling.ForcastRatioDatasVM = HistForcastRatioList;
                                    integratedFilingsList.Add(integratedFiling);
                                }
                                catch (Exception ss)
                                {
                                    renderResult.StatusCode = 1;
                                    renderResult.Message = "Balance Sheet issue-" + ErrorObj.LineItem + Convert.ToString(ss.Message);
                                    renderResult.Result = integratedFilingsList;
                                }
                            }



                        }

                        // #region Bind Payout Policy
                        try
                        {
                            /////////Bind Payout Policy////////////////////////////////////

                            //////////////////Integrated Data Binding//////////////////
                            List<ForcastRatioDatasViewModel> incomeIntegratedDatasPayoutPolicy = new List<ForcastRatioDatasViewModel>();
                            incomeIntegratedDatasPayoutPolicy = integratedDatasVMList.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement && x.LineItem == "NET INCOME after extraordinary items");
                            List<ForcastRatioValuesViewModel> IvaluePayoutPolicy = new List<ForcastRatioValuesViewModel>();
                            foreach (ForcastRatioDatasViewModel IDS in incomeIntegratedDatasPayoutPolicy)
                            {
                                IvaluePayoutPolicy = new List<ForcastRatioValuesViewModel>();
                                var IvaluePayoutPolicyObj = iIntegratedValues.FindBy(x => x.IntegratedDatasId == IDS.Id).ToList();
                                IDS.ForcastRatioValuesVM = IvaluePayoutPolicy;
                            }
                            //////////////////////////////////////////////////////////////////////////////////////////

                            //////////////////List Of Payout Policy//////////////////
                            ForcastRatioFilingsViewModel integratedFiling3 = new ForcastRatioFilingsViewModel();
                            integratedFiling3.CompanyName = filingsList[0].CompanyName;
                            integratedFiling3.ReportName = "PAYOUT POLIOCY FORECAST";
                            integratedFiling3.StatementType = "PAYOUT POLIOCY FORECAST";
                            integratedFiling3.Unit = filingsList[0].Unit;
                            integratedFiling3.CIK = filingsList[0].CIK;
                            List<ForcastRatioDatasViewModel> PayOutIntegratedDatas = new List<ForcastRatioDatasViewModel>();

                            ForcastRatioDatasViewModel IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = true;
                            IntData.LineItem = "PAYOUT INFORMATION";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 1;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 2;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 3;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 4;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 5;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 6;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 7;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 8;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = true;
                            IntData.LineItem = "PAYOUT ANALYSIS & FORECAST RATIOS";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 9;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = true;
                            IntData.LineItem = "Ongoing Dividends";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 10;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "Dividend Payout Ratio %";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 11;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = true;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "DPS (Dividends per Share - Basic) ($)";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 12;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "Total Ongoing Dividend Payout - Annual";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 13;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = true;
                            IntData.LineItem = "One Time Dividend";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 14;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "Dividend Payout Ratio %";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 15;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = true;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "DPS (Dividends per Share - Basic) ($)";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 16;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "One Time Dividend Payout";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 17;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = true;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);


                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = true;
                            IntData.LineItem = "Stock Buybacks";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 18;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = false;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "Stock Buyback Amount";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 19;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = true;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);

                            IntData = new ForcastRatioDatasViewModel();
                            IntData.IsParentItem = false;
                            IntData.LineItem = "Shares Repurchased";
                            IntData.InitialSetupId = InitialSetup_IValuationObj.Id;
                            IntData.IsTally = false;
                            IntData.Category = "";
                            IntData.Sequence = 20;
                            IntData.StatementTypeId = (int)StatementTypeEnum.PayoutPolicyForcast;
                            IntData.IsHistorical_editable = false;
                            IntData.IsExplicit_editable = true;
                            IntData.ForcastRatio_ExplicitValuesVM = explicitValuesList;
                            PayOutIntegratedDatas.Add(IntData);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////



                            List<PayoutPolicy_IValuation> PayoutPolicy_IValuation = iPayoutPolicy_IValuation.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList();
                            var firstElement = PayoutPolicy_IValuation.First();
                            /////Add LineItem///////////////////////////////////
                            foreach (PayoutPolicy_IValuation itm in PayoutPolicy_IValuation)
                            {

                                foreach (ForcastRatioDatasViewModel intDt in PayOutIntegratedDatas)
                                {
                                    if (intDt.Sequence == 2)
                                    {
                                        intDt.LineItem = "Weighted Average Shares Outstanding - Basic(" + itm.Unit_WASOBasic + ")";
                                    }
                                    else if (intDt.Sequence == 3)
                                    {
                                        intDt.LineItem = "Weighted Average Shares Outstanding - Diluted(" + itm.Unit_WASODiluted + ")";
                                    }
                                    else if (intDt.Sequence == 4)
                                    {
                                        intDt.LineItem = "Annual DPS $";
                                    }
                                    else if (intDt.Sequence == 5)
                                    {
                                        intDt.LineItem = "Total Ongoing Dividend Payout -Annual(" + itm.Unit_TotalOngoingDividend + ")";
                                    }
                                    else if (intDt.Sequence == 6)
                                    {
                                        intDt.LineItem = "One Time Dividend Payout(" + itm.Unit_OneTimeDividend + ")";
                                    }
                                    else if (intDt.Sequence == 7)
                                    {
                                        intDt.LineItem = "Stock Buyback Amount(" + itm.Unit_StockBuyback + ")";
                                    }
                                    else if (intDt.Sequence == 8)
                                    {
                                        intDt.LineItem = "Shares Repurchased(" + itm.Unit_ShareRepurchased + ")";
                                    }
                                }
                                break;
                            }
                            ////////////////////////////////////////////////////////////
                            /////Add Values/////////////////////////////////////////////
                            List<ForcastRatioValuesViewModel> TotOnDivPayAnual = new List<ForcastRatioValuesViewModel>();
                            List<ForcastRatioValuesViewModel> OnDivPay = new List<ForcastRatioValuesViewModel>();
                            foreach (ForcastRatioDatasViewModel intDtVal in PayOutIntegratedDatas)
                            {

                                intDtVal.ForcastRatioValuesVM = new List<ForcastRatioValuesViewModel>();
                                ForcastRatioValuesViewModel intVal = new ForcastRatioValuesViewModel();
                                foreach (PayoutPolicy_IValuation itm in PayoutPolicy_IValuation)
                                {
                                    intVal = new ForcastRatioValuesViewModel();
                                    if (intDtVal.Sequence == 1)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = null;
                                    }
                                    else if (intDtVal.Sequence == 2)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.WeightedAvgShares_Basic != "" ? itm.WeightedAvgShares_Basic : null;
                                    }
                                    else if (intDtVal.Sequence == 3)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.WeightedAvgShares_Diluted != "" ? itm.WeightedAvgShares_Diluted : null;
                                    }
                                    else if (intDtVal.Sequence == 4)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.Annual_DPS != "" ? itm.Annual_DPS : null;
                                    }
                                    else if (intDtVal.Sequence == 5)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.TotalAnnualDividendPayout != "" ? itm.TotalAnnualDividendPayout : null;
                                        TotOnDivPayAnual.Add(intVal);
                                    }
                                    else if (intDtVal.Sequence == 6)
                                    {
                                        // intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.OneTimeDividendPayout != "" ? itm.OneTimeDividendPayout : null;
                                        OnDivPay.Add(intVal);
                                    }
                                    else if (intDtVal.Sequence == 7)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.StockPayBackAmount != "" ? itm.StockPayBackAmount : null;
                                    }
                                    else if (intDtVal.Sequence == 8)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.SharePurchased != "" ? itm.SharePurchased : null;
                                    }
                                    else if (intDtVal.Sequence == 9)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = null;
                                    }
                                    else if (intDtVal.Sequence == 10)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = null;
                                    }
                                    else if (intDtVal.Sequence == 11)
                                    {
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        bool ischk = false;
                                        foreach (ForcastRatioValuesViewModel Ival1 in IvaluePayoutPolicy)
                                        {
                                            foreach (ForcastRatioValuesViewModel Ival2 in TotOnDivPayAnual)
                                            {
                                                if (Convert.ToDateTime(Ival2.FilingDate).Year == Convert.ToDateTime(Ival1.FilingDate).Year && Convert.ToDateTime(Ival2.FilingDate).Year == itm.Year)
                                                {
                                                    //intVal.IntegratedDatasId = itm.Id;

                                                    intVal.Value = Ival1.Value != null && !string.IsNullOrEmpty(Ival1.Value) ? Convert.ToString(Math.Round(Ival2.Value != null && !string.IsNullOrEmpty(Ival2.Value) ? (Convert.ToDouble(Ival2.Value) * 100) : 0 / (Ival1.Value != null && !string.IsNullOrEmpty(Ival1.Value) ? Convert.ToDouble(Ival1.Value) : 0), 2)) : "0";
                                                    ischk = true;
                                                    break;
                                                }
                                            }
                                            if (ischk == true)
                                            { break; }
                                        }
                                        // intVal.Value = intDtVal.IsParentItem == false ? itm.SharePurchased : null;
                                    }
                                    else if (intDtVal.Sequence == 12)
                                    {
                                        // intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false ? itm.Annual_DPS : null;
                                    }
                                    else if (intDtVal.Sequence == 13)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false ? itm.TotalAnnualDividendPayout : null;
                                        //TotOnDivPayAnual.Add(intVal);
                                    }
                                    else if (intDtVal.Sequence == 14)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = null;
                                    }
                                    else if (intDtVal.Sequence == 15)
                                    {
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        bool ischk = false;
                                        foreach (ForcastRatioValuesViewModel Ival3 in IvaluePayoutPolicy)
                                        {
                                            foreach (ForcastRatioValuesViewModel Ival4 in OnDivPay)
                                            {
                                                if (Convert.ToDateTime(Ival4.FilingDate).Year == itm.Year)
                                                {
                                                    // intVal.IntegratedDatasId = itm.Id;
                                                    intVal.Value = Convert.ToString(Math.Round(Convert.ToDouble(Ival4.Value) * 100 / Convert.ToDouble(Ival3.Value), 2));
                                                    ischk = true;
                                                    break;
                                                }
                                            }
                                            if (ischk == true)
                                            { break; }
                                        }
                                        // intVal.Value = intDtVal.IsParentItem == false ? itm.SharePurchased : null;
                                    }
                                    else if (intDtVal.Sequence == 16)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false && itm.OneTimeDividendPayout != "" ? Convert.ToString(Math.Round(Convert.ToDouble(itm.OneTimeDividendPayout) / Convert.ToDouble(itm.WeightedAvgShares_Basic), 2)) : null;
                                        //TotOnDivPayAnual.Add(intVal);
                                    }
                                    else if (intDtVal.Sequence == 17)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false ? itm.OneTimeDividendPayout : null;
                                        //OnDivPay.Add(intVal);
                                    }
                                    else if (intDtVal.Sequence == 18)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = null;
                                    }
                                    else if (intDtVal.Sequence == 19)
                                    {
                                        //intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false ? itm.StockPayBackAmount : null;
                                    }
                                    else if (intDtVal.Sequence == 20)
                                    {
                                        // intVal.IntegratedDatasId = itm.Id;
                                        intVal.FilingDate = "01-Jan-" + itm.Year;
                                        intVal.Year = Convert.ToString(itm.Year);
                                        intVal.Value = intDtVal.IsParentItem == false ? itm.SharePurchased : null;
                                    }
                                    if (Convert.ToInt32(itm.Year) >= startYear && Convert.ToInt32(itm.Year) <= endYear)
                                    {
                                        intDtVal.ForcastRatioValuesVM.Add(intVal);
                                    }

                                }
                            }
                            ///////////////////////////////////////////////////////////////
                            integratedFiling3.ForcastRatioDatasVM = PayOutIntegratedDatas;
                            integratedFilingsList.Add(integratedFiling3);
                        }
                        catch (Exception ss)
                        {
                            renderResult.StatusCode = 1;
                            renderResult.Message = "Payout Sheet issue-" + Convert.ToString(ss.Message);
                            renderResult.Result = integratedFilingsList;
                        }
                        //#endregion

                        renderResult.StatusCode = 1;
                        renderResult.Result = integratedFilingsList;
                    }


                    else
                    {
                        renderResult.StatusCode = 0;
                        renderResult.Message = "No data available in Integrated Financial Statement";
                        renderResult.Result = integratedFilingsList;

                    }
                }
                return (ActionResult)this.Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj

                });
            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }

        #endregion

        #region Reorganized Financial Statements
        [HttpGet]
        [Route("GetReorganizedData/{UserId}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult GetReorganizedData(long UserId, string cik, int? startYear = null, int? endYear = null)
        {
            ReorganizedResult renderResult = new ReorganizedResult();
            List<ReorganizedFilingsViewModel> ReorganizedFilingsList = new List<ReorganizedFilingsViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasLiabilityList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasInvestedCapitalExcludList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasInvestedCapitalList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasTotalFundsList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> DatasListTotIncmAvlblToInvntrs = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasNOPLATList = new List<ReorganizedDatasViewModel>();
            ReorganizedFilingsViewModel ReorganizedFiling = new ReorganizedFilingsViewModel();
            List<ReorganizedDatas> tempReorganizedDatasListObj = new List<ReorganizedDatas>();

            try
            {
                List<Reorganized_ExplicitValuesViewModel> explicitValuesList = new List<Reorganized_ExplicitValuesViewModel>();
                List<ReorganizedValuesViewModel> ValuesList = new List<ReorganizedValuesViewModel>();
                // obj = Mapper.Map<IntegratedDatas,IntegratedDatasViewModel>(CostofSales_HistForcastRatio);
                //actual code
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();

                //check in the database if exist then get by DB else go with the flow
                List<ReorganizedDatas> tblReorganizedListObj = InitialSetup_IValuationObj != null ? iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;
                if (tblReorganizedListObj != null && tblReorganizedListObj.Count > 0)
                {
                    //Bind the Saved Reorganized DATA 
                    //get all Historical Values
                    List<ReorganizedValues> ReorganizedValuesListObj = iReorganizedValues.FindBy(x => tblReorganizedListObj.Any(m => m.Id == x.ReorganizedDatasId)).ToList();

                    //get all Explicit Values 
                    List<Reorganized_ExplicitValues> Reorganized_explicitValuesAfterListObj = iReorganized_ExplicitValues.FindBy(x => tblReorganizedListObj.Any(m => m.Id == x.ReorganizedDatasId)).ToList();

                    List<FilingsTable> filingsList = new List<FilingsTable>();
                    filingsList = iFilings.FindBy(x => x.CIK == cik).OrderBy(x => x.Sequence).ToList();
                    // filingsList = iFilings.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList();


                    foreach (var filing in filingsList)
                    {
                        ReorganizedDatasList = new List<ReorganizedDatasViewModel>();
                        tempReorganizedDatasListObj = new List<ReorganizedDatas>();

                        ReorganizedFiling = new ReorganizedFilingsViewModel();
                        ReorganizedFiling.CompanyName = filing.CompanyName;

                        ReorganizedFiling.Unit = filing.Unit;
                        ReorganizedFiling.CIK = filing.CIK;
                        if (filing.StatementType == "INCOME")
                        {
                            ReorganizedFiling.ReportName = "NOPLAT CALCULATIONS";
                            ReorganizedFiling.StatementType = "NOPLAT CALCULATIONS";
                            // add Balance items to datas here
                            tempReorganizedDatasListObj = tblReorganizedListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.NoplatCalculations).ToList();
                        }
                        else if (filing.StatementType == "BALANCE_SHEET")
                        {
                            ReorganizedFiling.ReportName = "INVESTED CAPITAL CALCULATIONS";
                            ReorganizedFiling.StatementType = "INVESTED CAPITAL CALCULATIONS";
                            // add Balance items to datas here
                            tempReorganizedDatasListObj = tblReorganizedListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.InvestedCapitalCalculations).ToList();
                        }
                        if (tempReorganizedDatasListObj != null && tempReorganizedDatasListObj.Count > 0)
                        {
                            ReorganizedDatasViewModel ReorganizedDatasVm = new ReorganizedDatasViewModel();
                            foreach (ReorganizedDatas Incomeobj in tempReorganizedDatasListObj)
                            {
                                ReorganizedDatasVm = new ReorganizedDatasViewModel();

                                ReorganizedDatasVm = mapper.Map<ReorganizedDatas, ReorganizedDatasViewModel>(Incomeobj);

                                // for Historical Values
                                List<ReorganizedValues> tempForcastValueList = ReorganizedValuesListObj.FindAll(x => x.ReorganizedDatasId == Incomeobj.Id).ToList();
                                //Incomeobj.ForcastRatioValues = tempForcastValueList;
                                ReorganizedDatasVm.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                foreach (var obj in tempForcastValueList)
                                {
                                    ReorganizedValuesViewModel tempValues = mapper.Map<ReorganizedValues, ReorganizedValuesViewModel>(obj);
                                    ReorganizedDatasVm.ReorganizedValuesVM.Add(tempValues);
                                }
                                // for Explicit Values
                                List<Reorganized_ExplicitValues> tempForcast_ExplicitValueList = Reorganized_explicitValuesAfterListObj.FindAll(x => x.ReorganizedDatasId == Incomeobj.Id).ToList();
                                ReorganizedDatasVm.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                foreach (var obj in tempForcast_ExplicitValueList)
                                {
                                    Reorganized_ExplicitValuesViewModel tempExplicitValues = mapper.Map<Reorganized_ExplicitValues, Reorganized_ExplicitValuesViewModel>(obj);
                                    ReorganizedDatasVm.Reorganized_ExplicitValuesVM.Add(tempExplicitValues);
                                }
                                ReorganizedDatasList.Add(ReorganizedDatasVm);
                            }
                            //ReorganizedDatasList.Add();
                            ReorganizedFiling.ReorganizedDatasVM = ReorganizedDatasList;
                            ReorganizedFilingsList.Add(ReorganizedFiling);


                        }
                    }
                    renderResult.StatusCode = 1;
                    renderResult.Result = ReorganizedFilingsList;
                    ///////////////////////////////////////////////////
                }
                return (ActionResult)this.Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj
                });

            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }

        [HttpGet]
        [Route("SaveReorganizedData/{UserId}/{cik}/{startYear?}/{endYear?}")]
        public ActionResult SaveReorganizedData(long UserId, string cik, int? startYear = null, int? endYear = null)
        {
            ReorganizedResult renderResult = new ReorganizedResult();
            List<ReorganizedFilingsViewModel> ReorganizedFilingsList = new List<ReorganizedFilingsViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasLiabilityList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasInvestedCapitalExcludList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasInvestedCapitalList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasTotalFundsList = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> DatasListTotIncmAvlblToInvntrs = new List<ReorganizedDatasViewModel>();
            List<ReorganizedDatasViewModel> ReorganizedDatasNOPLATList = new List<ReorganizedDatasViewModel>();
            ReorganizedFilingsViewModel ReorganizedFiling = new ReorganizedFilingsViewModel();
            List<ReorganizedDatas> tempReorganizedDatasListObj = new List<ReorganizedDatas>();

            try
            {
                List<Reorganized_ExplicitValuesViewModel> explicitValuesList = new List<Reorganized_ExplicitValuesViewModel>();
                List<ReorganizedValuesViewModel> ValuesList = new List<ReorganizedValuesViewModel>();
                Reorganized_ExplicitValuesViewModel explicitValue;
                ReorganizedValuesViewModel ReorgValue;
                // obj = Mapper.Map<IntegratedDatas,IntegratedDatasViewModel>(CostofSales_HistForcastRatio);
                //actual code
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();

                //check in the database if exist then get by DB else go with the flow
                List<ReorganizedDatas> tblReorganizedListObj = InitialSetup_IValuationObj != null ? iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;
                if (tblReorganizedListObj != null && tblReorganizedListObj.Count > 0)
                {
                    //Delete Reorganize datas
                    //////Integrated Data and value
                    List<ReorganizedDatas> ReorganizedDtList = new List<ReorganizedDatas>();
                    ReorganizedDtList = iReorganizedDatas.FindBy(x => x.InitialSetupId == (InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.Id : 0)).ToList();
                    if (ReorganizedDtList != null && ReorganizedDtList.Count > 0)
                    {
                        //Delete Reorganize data,Value and Exp_Value
                        List<ReorganizedValues> AllReorganizedValuesList = iReorganizedValues.FindBy(t => ReorganizedDtList.Any(m => m.Id == t.ReorganizedDatasId)).ToList();
                        if (AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0)
                        {
                            iReorganizedValues.DeleteMany(AllReorganizedValuesList);
                            iReorganizedValues.Commit();
                        }

                        List<Reorganized_ExplicitValues> AllReorganized_ExplicitValuesList = iReorganized_ExplicitValues.FindBy(t => ReorganizedDtList.Any(m => m.Id == t.ReorganizedDatasId)).ToList();
                        if (AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0)
                        {
                            iReorganized_ExplicitValues.DeleteMany(AllReorganized_ExplicitValuesList);
                            iReorganizedValues.Commit();
                        }

                        iReorganizedDatas.DeleteMany(ReorganizedDtList);
                        iReorganizedDatas.Commit();
                    }
                    //////////////////////////////////////////
                    ////////////////////////////////////
                }

                // get Integrated Data
                List<IntegratedDatas> integratedDatasList = new List<IntegratedDatas>();
                List<ReorganizedDatasViewModel> ReorganizedDatasVMList = new List<ReorganizedDatasViewModel>();
                ReorganizedDatasViewModel ReorganizedDatasVMobj = new ReorganizedDatasViewModel();
                TaxRates_IValuation tblTaxRatesObj = new TaxRates_IValuation();
                tblTaxRatesObj = iTaxRates_IValuation.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id);
                integratedDatasList = InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.Id != 0 ? iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).ToList() : null;

                foreach (IntegratedDatas integratedDatasObj in integratedDatasList)
                {
                    ReorganizedDatasVMobj = new ReorganizedDatasViewModel();
                    ReorganizedDatasVMobj = mapper.Map<IntegratedDatas, ReorganizedDatasViewModel>(integratedDatasObj);
                    ReorganizedDatasVMList.Add(ReorganizedDatasVMobj);
                }

                if (InitialSetup_IValuationObj != null)
                {
                    int year = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);
                    for (int i = 1; i <= InitialSetup_IValuationObj.ExplicitYearCount + 1; i++)
                    {
                        explicitValue = new Reorganized_ExplicitValuesViewModel();
                        year = year + 1;
                        explicitValue.Year = Convert.ToString(year);
                        explicitValue.Value = "";
                        explicitValuesList.Add(explicitValue);
                    }

                    int Startyear = Convert.ToInt32(InitialSetup_IValuationObj.YearFrom);
                    int Endyear = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);
                    int Count = Endyear - Startyear + 1;
                    for (int j = 1; j <= Count; j++)
                    {
                        ReorgValue = new ReorganizedValuesViewModel();
                        ReorgValue.Year = Convert.ToString(Startyear);
                        ReorgValue.Value = "";
                        ValuesList.Add(ReorgValue);
                        Startyear = Startyear + 1;
                    }
                }


                if (ReorganizedDatasVMList != null && ReorganizedDatasVMList.Count > 0)
                {
                    List<FilingsTable> filingsList = new List<FilingsTable>();
                    // get all values                       
                    var AllIntegratedValuesList = iIntegratedValues.FindBy(t => ReorganizedDatasVMList.Any(m => m.Id == t.IntegratedDatasId)).ToList();
                    // get all Explicit values                       
                    var AllIntegratedExplicitValuesList = iIntegrated_ExplicitValues.FindBy(t => ReorganizedDatasVMList.Any(m => m.Id == t.IntegratedDatasId)).ToList();
                    // actual code
                    filingsList = iFilings.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id).OrderBy(x => x.Sequence).ToList();
                    foreach (var filing in filingsList)
                    {
                        ReorganizedDatasList = new List<ReorganizedDatasViewModel>();

                        ReorganizedFiling = new ReorganizedFilingsViewModel();
                        ReorganizedFiling.CompanyName = filing.CompanyName;
                        ReorganizedFiling.Unit = filing.Unit;
                        ReorganizedFiling.CIK = filing.CIK;
                        if (filing.StatementType == "INCOME")
                        {
                            ReorganizedFiling.ReportName = "NOPLAT CALCULATIONS";
                            ReorganizedFiling.StatementType = "NOPLAT CALCULATIONS";
                            try
                            {
                                List<ReorganizedDatasViewModel> IncomeIntegratedDatas = new List<ReorganizedDatasViewModel>();
                                IncomeIntegratedDatas = ReorganizedDatasVMList.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.IncomeStatement);
                                ReorganizedDatasList = new List<ReorganizedDatasViewModel>();

                                ReorganizedDatasViewModel IntDataIncome = new ReorganizedDatasViewModel();
                                ReorganizedDatasViewModel IntDataOperatingTAX = new ReorganizedDatasViewModel();
                                ReorganizedDatasViewModel IntDataIncreasDecrOptDefTax = new ReorganizedDatasViewModel();
                                ReorganizedValuesViewModel integratedValue;
                                Reorganized_ExplicitValuesViewModel integratedExplicitValue;
                                List<ReorganizedValuesViewModel> EBITAValueList = new List<ReorganizedValuesViewModel>();
                                List<Reorganized_ExplicitValuesViewModel> EBITAExplicitValueList = new List<Reorganized_ExplicitValuesViewModel>();

                                List<ReorganizedValuesViewModel> AdjustedEBITAValueList = new List<ReorganizedValuesViewModel>();
                                List<Reorganized_ExplicitValuesViewModel> AdjustedEBITAExplicitValueList = new List<Reorganized_ExplicitValuesViewModel>();

                                List<ReorganizedValuesViewModel> NetIncomeValueList = new List<ReorganizedValuesViewModel>();
                                List<Reorganized_ExplicitValuesViewModel> NetIncomeExplicitValueList = new List<Reorganized_ExplicitValuesViewModel>();
                                //All the Items before EBITA
                                foreach (ReorganizedDatasViewModel ReorganizedDatasObj in IncomeIntegratedDatas)
                                {
                                    IntDataIncome = new ReorganizedDatasViewModel();
                                    if (ReorganizedDatasObj.LineItem.ToUpper() == "EBITA")
                                    {
                                        break;
                                    }
                                    if (ReorganizedDatasObj.IsParentItem != true && ReorganizedDatasObj.LineItem.ToUpper() != "EBITDA" && !ReorganizedDatasObj.LineItem.ToUpper().Contains("GROSS"))
                                    {
                                        IntDataIncome.IsParentItem = false;
                                        IntDataIncome.IsTally = false;
                                        IntDataIncome.LineItem = ReorganizedDatasObj.LineItem;
                                        IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                        IntDataIncome.Category = ReorganizedDatasObj.Category;
                                        IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                        IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                        IntDataIncome.IsHistorical_editable = false;
                                        IntDataIncome.IsExplicit_editable = false;
                                        IntDataIncome.IntegratedDatasId = ReorganizedDatasObj.Id;
                                        IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                        IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();

                                        var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == ReorganizedDatasObj.Id);
                                        var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == ReorganizedDatasObj.Id);

                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();

                                        List<ReorganizedValuesViewModel> ReorganizedValuesViewModelList = new List<ReorganizedValuesViewModel>();
                                        List<Reorganized_ExplicitValuesViewModel> ReorganizedExplict_ValuesViewModelList = new List<Reorganized_ExplicitValuesViewModel>();
                                        foreach (var valueObj in Integratedvalues)
                                        {
                                            integratedValue = new ReorganizedValuesViewModel();
                                            integratedValue.FilingDate = valueObj.FilingDate;
                                            integratedValue.Year = valueObj.Year;
                                            integratedValue.Value = valueObj.Value;
                                            ReorganizedValuesViewModelList.Add(integratedValue);
                                        }
                                        IntDataIncome.ReorganizedValuesVM = ReorganizedValuesViewModelList;
                                        foreach (var valueObj in IntegratedExplicit_values)
                                        {
                                            integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                            integratedExplicitValue.Year = valueObj.Year;
                                            integratedExplicitValue.Value = valueObj.Value;
                                            ReorganizedExplict_ValuesViewModelList.Add(integratedExplicitValue);
                                        }
                                        IntDataIncome.Reorganized_ExplicitValuesVM = ReorganizedExplict_ValuesViewModelList;
                                        ReorganizedDatasList.Add(IntDataIncome);
                                    }
                                }
                                //EBITA (SUM)
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = true;
                                IntDataIncome.LineItem = "EBITA";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "General";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    integratedExplicitValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    EBITAExplicitValueList.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    integratedValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                    EBITAValueList.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                //////////////////////////////////////
                                //Operating Lease Interest
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = false;
                                IntDataIncome.LineItem = "Operating Lease Interest";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    integratedExplicitValue.Value = "0";
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    integratedValue.Value = "0";
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                //////////////////////////////////////

                                //Adjusted EBITA
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = true;
                                IntDataIncome.LineItem = "Adjusted EBITA";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "General";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        if (item.LineItem != "EBITA")
                                        {
                                            var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                            OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                        }
                                    }
                                    integratedExplicitValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    AdjustedEBITAExplicitValueList.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        if (item.LineItem != "EBITA")
                                        {
                                            var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                            OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                        }
                                    }
                                    integratedValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                    AdjustedEBITAValueList.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                //////////////////////////////////////
                                //Operating Taxes (Only Calculation Can't Add at this seq.)
                                IntDataOperatingTAX = new ReorganizedDatasViewModel();
                                IntDataOperatingTAX.IsParentItem = false;
                                IntDataOperatingTAX.IsTally = false;
                                IntDataOperatingTAX.LineItem = "Operating Taxes";
                                IntDataOperatingTAX.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataOperatingTAX.Category = "General";
                                IntDataOperatingTAX.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataOperatingTAX.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataOperatingTAX.IsHistorical_editable = false;
                                IntDataOperatingTAX.IsExplicit_editable = false;
                                IntDataOperatingTAX.IntegratedDatasId = null;
                                IntDataOperatingTAX.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataOperatingTAX.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OTExpValue = 0;
                                    OTExpValue = (EBITAExplicitValueList != null && EBITAExplicitValueList.Count > 0 && EBITAExplicitValueList.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(EBITAExplicitValueList.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(EBITAExplicitValueList.Find(x => x.Year == ReExpValue.Year).Value) : 0) * (tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100;
                                    integratedExplicitValue.Value = OTExpValue.ToString("0.");
                                    IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OTValue = 0;
                                    OTValue = (EBITAValueList != null && EBITAValueList.Count > 0 && EBITAValueList.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(EBITAValueList.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(EBITAValueList.Find(x => x.Year == ReValue.Year).Value) : 0) * (tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100;
                                    integratedValue.Value = OTValue.ToString("0.");
                                    IntDataOperatingTAX.ReorganizedValuesVM.Add(integratedValue);
                                }
                                //////////////////////////////////////
                                //Increase (Decrease) in Operating Deferred Taxes (Only Calculation Can't Add at this seq.)
                                IntDataIncreasDecrOptDefTax = new ReorganizedDatasViewModel();
                                IntDataIncreasDecrOptDefTax.IsParentItem = false;
                                IntDataIncreasDecrOptDefTax.IsTally = false;
                                IntDataIncreasDecrOptDefTax.LineItem = "Increase (Decrease) in Operating Deferred Taxes";
                                IntDataIncreasDecrOptDefTax.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncreasDecrOptDefTax.Category = "General";
                                IntDataIncreasDecrOptDefTax.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncreasDecrOptDefTax.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncreasDecrOptDefTax.IsHistorical_editable = false;
                                IntDataIncreasDecrOptDefTax.IsExplicit_editable = false;
                                IntDataIncreasDecrOptDefTax.IntegratedDatasId = null;
                                IntDataIncreasDecrOptDefTax.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    integratedExplicitValue.Value = "0";
                                    IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    integratedValue.Value = "0";
                                    IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Add(integratedValue);
                                }
                                //////////////////////////////////////
                                //Operating Cash Taxes (CHILD)
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = false;
                                IntDataIncome.LineItem = "Operating Cash Taxes";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCTExpValue = 0;
                                    OCTExpValue = -1 * ((IntDataOperatingTAX != null && IntDataOperatingTAX.Reorganized_ExplicitValuesVM != null && IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Count > 0 && IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) : 0));
                                    integratedExplicitValue.Value = OCTExpValue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCTValue = 0;
                                    OCTValue = -1 * ((IntDataOperatingTAX != null && IntDataOperatingTAX.ReorganizedValuesVM != null && IntDataOperatingTAX.ReorganizedValuesVM.Count > 0 && IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) : 0));
                                    integratedValue.Value = OCTValue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                //////////////////////////////////////
                                //NOPLAT
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = true;
                                IntDataIncome.LineItem = "NOPLAT";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCTExpValue = 0;
                                    OCTExpValue = (AdjustedEBITAExplicitValueList != null && AdjustedEBITAExplicitValueList.Count > 0 && AdjustedEBITAExplicitValueList.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(AdjustedEBITAExplicitValueList.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(AdjustedEBITAExplicitValueList.Find(x => x.Year == ReExpValue.Year).Value) : 0) + (-1 * ((IntDataOperatingTAX != null && IntDataOperatingTAX.Reorganized_ExplicitValuesVM != null && IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Count > 0 && IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) : 0)));
                                    integratedExplicitValue.Value = OCTExpValue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCTValue = 0;
                                    OCTValue = (AdjustedEBITAValueList != null && AdjustedEBITAValueList.Count > 0 && AdjustedEBITAValueList.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(AdjustedEBITAValueList.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(AdjustedEBITAValueList.Find(x => x.Year == ReValue.Year).Value) : 0) + (-1 * ((IntDataOperatingTAX != null && IntDataOperatingTAX.ReorganizedValuesVM != null && IntDataOperatingTAX.ReorganizedValuesVM.Count > 0 && IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) : 0)));
                                    integratedValue.Value = OCTValue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                //////////////////////////////////////

                                //Operating Taxes
                                if (IntDataOperatingTAX != null)
                                {
                                    IntDataOperatingTAX.Sequence = ReorganizedDatasList.Count + 1;
                                    ReorganizedDatasList.Add(IntDataOperatingTAX);
                                }
                                //////////////////////////////////////

                                //Increase (Decrease) in Operating Deferred Taxes
                                if (IntDataIncreasDecrOptDefTax != null)
                                {
                                    IntDataIncreasDecrOptDefTax.LineItem = "Increase (Decrease) in Operating Deferred Taxes";
                                    IntDataIncreasDecrOptDefTax.Sequence = ReorganizedDatasList.Count + 1;
                                    ReorganizedDatasList.Add(IntDataIncreasDecrOptDefTax);
                                }
                                //////////////////////////////////////

                                //Operating Cash Taxes (PARENT)
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = true;
                                IntDataIncome.LineItem = "Operating Cash Taxes";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCTExpValue = 0;
                                    OCTExpValue = (IntDataOperatingTAX != null && IntDataOperatingTAX.Reorganized_ExplicitValuesVM != null && IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Count > 0 && IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntDataOperatingTAX.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) : 0);
                                    integratedExplicitValue.Value = OCTExpValue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCTValue = 0;
                                    OCTValue = (IntDataOperatingTAX != null && IntDataOperatingTAX.ReorganizedValuesVM != null && IntDataOperatingTAX.ReorganizedValuesVM.Count > 0 && IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(IntDataOperatingTAX.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) : 0);
                                    integratedValue.Value = OCTValue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                //////////////////////////////////////

                                //NET INCOME                                    
                                var IntdataNE = IncomeIntegratedDatas.Find(x => x.LineItem.Contains("NET INCOME after extraordinary items"));
                                if (IntdataNE != null)
                                {
                                    IntDataIncome = new ReorganizedDatasViewModel();
                                    IntDataIncome.IsParentItem = false;
                                    IntDataIncome.IsTally = false;
                                    IntDataIncome.LineItem = IntdataNE.LineItem;
                                    IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    IntDataIncome.Category = IntdataNE.Category;
                                    IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                    IntDataIncome.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                    IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                    IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                    IntDataIncome.IsHistorical_editable = false;
                                    IntDataIncome.IsExplicit_editable = false;
                                    IntDataIncome.IntegratedDatasId = IntdataNE.Id;
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataNE.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataNE.Id);
                                    foreach (var valueObj in Integratedvalues)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.FilingDate = valueObj.FilingDate;
                                        integratedValue.Year = valueObj.Year;
                                        integratedValue.Value = valueObj.Value;
                                        IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                        NetIncomeValueList.Add(integratedValue);

                                    }
                                    foreach (var valueObj in IntegratedExplicit_values)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = valueObj.Year;
                                        integratedExplicitValue.Value = valueObj.Value;
                                        IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                        NetIncomeExplicitValueList.Add(integratedExplicitValue);
                                    }
                                    ReorganizedDatasList.Add(IntDataIncome);
                                }
                                //////////////////////////////////////

                                //Decrease (Increase) in Operating Deferred taxes
                                if (IntDataIncreasDecrOptDefTax != null)
                                {
                                    IntDataIncreasDecrOptDefTax.LineItem = "Decrease (Increase) in Operating Deferred taxes";
                                    IntDataIncreasDecrOptDefTax.Sequence = ReorganizedDatasList.Count + 1;
                                    ReorganizedDatasList.Add(IntDataIncreasDecrOptDefTax);
                                }
                                //////////////////////////////////////

                                //ADJUSTED NET INCOME 
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = true;
                                IntDataIncome.LineItem = "Adjusted Net Income";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCTExpValue = 0;
                                    OCTExpValue = (NetIncomeExplicitValueList != null && NetIncomeExplicitValueList.Count > 0 && NetIncomeExplicitValueList.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(NetIncomeExplicitValueList.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(NetIncomeExplicitValueList.Find(x => x.Year == ReExpValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM != null && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year).Value) : 0);
                                    integratedExplicitValue.Value = OCTExpValue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCTValue = 0;
                                    OCTValue = (NetIncomeValueList != null && NetIncomeValueList.Count > 0 && NetIncomeValueList.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(NetIncomeValueList.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(NetIncomeValueList.Find(x => x.Year == ReValue.Year).Value) : 0) + (IntDataIncreasDecrOptDefTax != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM != null && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Count > 0 && IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(IntDataIncreasDecrOptDefTax.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year).Value) : 0);
                                    integratedValue.Value = OCTValue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                DatasListTotIncmAvlblToInvntrs.Add(IntDataIncome);
                                //////////////////////////////////////
                                //After-Tax Interest Expense                                  
                                var IntdataIE = IncomeIntegratedDatas.Find(x => x.LineItem.ToUpper().Contains("INTEREST EXPENSE") || x.LineItem.ToUpper().Contains("INTEREST AND DEBT EXPENSE") || x.LineItem.ToUpper().Contains("INTEREST AND OTHER EXPENSE"));
                                if (IntdataIE != null)
                                {
                                    IntDataIncome = new ReorganizedDatasViewModel();
                                    IntDataIncome.IsParentItem = false;
                                    IntDataIncome.IsTally = false;
                                    IntDataIncome.LineItem = "After-Tax Interest Expense";
                                    IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    IntDataIncome.Category = IntdataIE.Category;
                                    IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                    IntDataIncome.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                    IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                    IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                    IntDataIncome.IsHistorical_editable = false;
                                    IntDataIncome.IsExplicit_editable = false;
                                    IntDataIncome.IntegratedDatasId = IntdataIE.Id;
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataIE.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataIE.Id);
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = ReExpValue.Year;
                                        integratedExplicitValue.Id = 0;
                                        double OCTExpValue = 0;
                                        OCTExpValue = (IntegratedExplicit_values != null && IntegratedExplicit_values.Count > 0 && IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year).Value) : 0) * (1 - ((tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100));
                                        integratedExplicitValue.Value = OCTExpValue.ToString("0.");
                                        IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    }
                                    integratedValue = new ReorganizedValuesViewModel();
                                    foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.Year = ReValue.Year;
                                        integratedValue.Id = 0;
                                        double OCTValue = 0;
                                        OCTValue = (Integratedvalues != null && Integratedvalues.Count > 0 && Integratedvalues.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(Integratedvalues.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(Integratedvalues.Find(x => x.Year == ReValue.Year).Value) : 0) * (1 - ((tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100));
                                        integratedValue.Value = OCTValue.ToString("0.");
                                        IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                    }
                                    ReorganizedDatasList.Add(IntDataIncome);
                                    DatasListTotIncmAvlblToInvntrs.Add(IntDataIncome);
                                }
                                //////////////////////////////////////
                                //After-Tax Operating Lease Interest Expense
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = false;
                                IntDataIncome.LineItem = "After-Tax Operating Lease Interest Expense";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    integratedExplicitValue.Value = "0";
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    integratedValue.Value = "0";
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                DatasListTotIncmAvlblToInvntrs.Add(IntDataIncome);
                                //////////////////////////////////////
                                //Total Income Available to Investors (SUM)
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = true;
                                IntDataIncome.LineItem = "Total Income Available to Investors";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in DatasListTotIncmAvlblToInvntrs)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    integratedExplicitValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in DatasListTotIncmAvlblToInvntrs)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    integratedValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                ReorganizedDatasNOPLATList.Add(IntDataIncome);
                                //////////////////////////////////////
                                //Nonoperating Taxes
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = false;
                                IntDataIncome.LineItem = "Nonoperating Taxes";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    integratedExplicitValue.Value = "0";
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    integratedValue.Value = "0";
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                ReorganizedDatasNOPLATList.Add(IntDataIncome);
                                //////////////////////////////////////
                                //Loss (Gain) from Discontinued Operations
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = false;
                                IntDataIncome.LineItem = "Loss (Gain) from Discontinued Operations";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    integratedExplicitValue.Value = "0";
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    integratedValue.Value = "0";
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                ReorganizedDatasNOPLATList.Add(IntDataIncome);
                                //////////////////////////////////////
                                //After-Tax Nonrecurring Charges
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = false;
                                IntDataIncome.LineItem = "After-Tax Nonrecurring Charges";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    integratedExplicitValue.Value = "0";
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                integratedValue = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    integratedValue.Value = "0";
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                ReorganizedDatasNOPLATList.Add(IntDataIncome);
                                //////////////////////////////////////
                                //After-Tax Amortization of Intangibles
                                var IntdataEBITA = IncomeIntegratedDatas.Find(x => x.LineItem == "EBITA");
                                var IntdataAI = IntdataEBITA != null && IntdataEBITA.Id != null && IntdataEBITA.Id != 0 ? IncomeIntegratedDatas.Find(x => x.Id == IntdataEBITA.Id + 1 && x.LineItem.ToUpper().Contains("AMORTIZATION")) : null;
                                //var IntdataAI = IncomeIntegratedDatas.OrderByDescending(x => x.Id).First(x => x.LineItem.ToUpper().Contains("AMORTIZATION"));
                                if (IntdataAI != null)
                                {
                                    IntDataIncome = new ReorganizedDatasViewModel();
                                    IntDataIncome.IsParentItem = false;
                                    IntDataIncome.IsTally = false;
                                    IntDataIncome.LineItem = "After-Tax Amortization of Intangibles";
                                    IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    IntDataIncome.Category = IntdataAI.Category;
                                    IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                    IntDataIncome.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                    IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                    IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                    IntDataIncome.IsHistorical_editable = false;
                                    IntDataIncome.IsExplicit_editable = false;
                                    IntDataIncome.IntegratedDatasId = IntdataAI.Id;
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataAI.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataAI.Id);
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = ReExpValue.Year;
                                        integratedExplicitValue.Id = 0;
                                        double OCTExpValue = 0;
                                        OCTExpValue = (IntegratedExplicit_values != null && IntegratedExplicit_values.Count > 0 && IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year).Value) : 0) * (1 - ((tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100));
                                        integratedExplicitValue.Value = OCTExpValue.ToString("0.");
                                        IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    }
                                    integratedValue = new ReorganizedValuesViewModel();
                                    foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.Year = ReValue.Year;
                                        integratedValue.Id = 0;
                                        double OCTValue = 0;
                                        OCTValue = (Integratedvalues != null && Integratedvalues.Count > 0 && Integratedvalues.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(Integratedvalues.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(Integratedvalues.Find(x => x.Year == ReValue.Year).Value) : 0) * (1 - ((tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100));
                                        integratedValue.Value = OCTValue.ToString("0.");
                                        IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                    }
                                    ReorganizedDatasList.Add(IntDataIncome);
                                    ReorganizedDatasNOPLATList.Add(IntDataIncome);
                                }
                                //////////////////////////////////////
                                //After-Tax Interest Income
                                var IntdataII = IncomeIntegratedDatas.Find(x => x.LineItem.ToUpper().Contains("INTEREST INCOME"));
                                if (IntdataII != null)
                                {
                                    IntDataIncome = new ReorganizedDatasViewModel();
                                    IntDataIncome.IsParentItem = false;
                                    IntDataIncome.IsTally = false;
                                    IntDataIncome.LineItem = "After-Tax Interest Income";
                                    IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    IntDataIncome.Category = IntdataII.Category;
                                    IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                    IntDataIncome.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                    IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                    IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                    IntDataIncome.IsHistorical_editable = false;
                                    IntDataIncome.IsExplicit_editable = false;
                                    IntDataIncome.IntegratedDatasId = IntdataII.Id;
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataII.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataII.Id);
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = ReExpValue.Year;
                                        integratedExplicitValue.Id = 0;
                                        double OCTExpValue = 0;
                                        OCTExpValue = (IntegratedExplicit_values != null && IntegratedExplicit_values.Count > 0 && IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(IntegratedExplicit_values.Find(x => x.Year == ReExpValue.Year).Value) : 0) * (1 - ((tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100));
                                        integratedExplicitValue.Value = OCTExpValue.ToString("0.");
                                        IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    }
                                    integratedValue = new ReorganizedValuesViewModel();
                                    foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.Year = ReValue.Year;
                                        integratedValue.Id = 0;
                                        double OCTValue = 0;
                                        OCTValue = (Integratedvalues != null && Integratedvalues.Count > 0 && Integratedvalues.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(Integratedvalues.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(Integratedvalues.Find(x => x.Year == ReValue.Year).Value) : 0) * (1 - ((tblTaxRatesObj != null && tblTaxRatesObj.Operating != null ? Convert.ToDouble(tblTaxRatesObj.Operating) : 0) / 100));
                                        integratedValue.Value = OCTValue.ToString("0.");
                                        IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                    }
                                    ReorganizedDatasList.Add(IntDataIncome);
                                    ReorganizedDatasNOPLATList.Add(IntDataIncome);
                                }
                                //////////////////////////////////////
                                //NOPLAT (SUM)
                                IntDataIncome = new ReorganizedDatasViewModel();
                                IntDataIncome.IsParentItem = false;
                                IntDataIncome.IsTally = true;
                                IntDataIncome.LineItem = "NOPLAT";
                                IntDataIncome.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataIncome.Category = "";
                                IntDataIncome.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataIncome.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                IntDataIncome.IsHistorical_editable = false;
                                IntDataIncome.IsExplicit_editable = false;
                                IntDataIncome.IntegratedDatasId = null;
                                IntDataIncome.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataIncome.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                    integratedExplicitValue.Year = ReExpValue.Year;
                                    integratedExplicitValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasNOPLATList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    integratedExplicitValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                }
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    integratedValue = new ReorganizedValuesViewModel();
                                    integratedValue.Year = ReValue.Year;
                                    integratedValue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasNOPLATList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    integratedValue.Value = OCAvalue.ToString("0.");
                                    IntDataIncome.ReorganizedValuesVM.Add(integratedValue);
                                }
                                ReorganizedDatasList.Add(IntDataIncome);
                                ReorganizedDatasNOPLATList.Add(IntDataIncome);
                                //////////////////////////////////////
                                ReorganizedFiling.ReorganizedDatasVM = ReorganizedDatasList;
                                ReorganizedFilingsList.Add(ReorganizedFiling);
                            }
                            catch (Exception ss)
                            {
                                renderResult.StatusCode = 1;
                                renderResult.Message = "INVESTED CAPITAL CALCULATIONS ISSUE" + Convert.ToString(ss.Message);
                                renderResult.Result = ReorganizedFilingsList;
                            }
                            // Save NOPLAT CALCULATIONS data in ReorganizedDatas  Values and Exp_Values
                            try
                            {
                                var ReOrganizedDatasIncomChk = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.StatementTypeId == (int)StatementTypeEnum.NoplatCalculations).ToList();
                                if (ReOrganizedDatasIncomChk == null || ReOrganizedDatasIncomChk.Count == 0) ///////If data is not avlbl in IntegratedData save then only.
                                {
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        if (item.LineItem != null)
                                        {

                                            ReorganizedDatas ReDatasObj = new ReorganizedDatas();
                                            ReDatasObj.Id = 0;
                                            ReDatasObj.Category = item.Category;
                                            ReDatasObj.Sequence = item.Sequence;
                                            ReDatasObj.LineItem = item.LineItem;
                                            ReDatasObj.IsTally = item.IsTally;
                                            ReDatasObj.IsParentItem = item.IsParentItem;
                                            ReDatasObj.StatementTypeId = (int)StatementTypeEnum.NoplatCalculations;
                                            ReDatasObj.ReorganizedValues = new List<ReorganizedValues>();
                                            ReDatasObj.Reorganized_ExplicitValues = new List<Reorganized_ExplicitValues>();
                                            foreach (var valueobj in item.ReorganizedValuesVM)
                                            {
                                                ReorganizedValues obj = new ReorganizedValues();
                                                obj.Id = 0;
                                                obj.Value = valueobj.Value;
                                                obj.Year = valueobj.Year;
                                                ReDatasObj.ReorganizedValues.Add(obj);
                                            }
                                            foreach (var valueobj in item.Reorganized_ExplicitValuesVM)
                                            {
                                                Reorganized_ExplicitValues obj = new Reorganized_ExplicitValues();
                                                obj.Id = 0;
                                                obj.Value = valueobj.Value;
                                                obj.Year = valueobj.Year;
                                                ReDatasObj.Reorganized_ExplicitValues.Add(obj);
                                            }
                                            ReDatasObj.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            iReorganizedDatas.Add(ReDatasObj);
                                            iReorganizedDatas.Commit();
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                renderResult.StatusCode = 1;
                                renderResult.Message = "NOPLAT CALCULATIONS DATA SAVING ISSUE";
                                renderResult.Result = ReorganizedFilingsList;
                            }
                            /////////////////////////////////////////////////////////////
                        }
                        else if (filing.StatementType == "BALANCE_SHEET")
                        {
                            ReorganizedFiling.ReportName = "INVESTED CAPITAL CALCULATIONS";
                            ReorganizedFiling.StatementType = "INVESTED CAPITAL CALCULATIONS";
                            try
                            {
                                // get IntegratedDats for Balance Sheet
                                List<ReorganizedDatasViewModel> balanceSheetIntegratedDatas = new List<ReorganizedDatasViewModel>();
                                balanceSheetIntegratedDatas = ReorganizedDatasVMList.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet);
                                ReorganizedDatasList = new List<ReorganizedDatasViewModel>();
                                bool isTotalCurrentAsset = false;
                                bool isTotalAsset = false;
                                bool isCurrentLiblities = false;
                                List<ReorganizedDatasViewModel> TempTotalCurrentAssetOperatingList = new List<ReorganizedDatasViewModel>();
                                List<ReorganizedDatasViewModel> TempCurrentLiabilityOperatingList = new List<ReorganizedDatasViewModel>();
                                List<ReorganizedDatasViewModel> TempTotalAssetNonOperatingList = new List<ReorganizedDatasViewModel>();
                                ReorganizedDatasViewModel IntDataBalance = new ReorganizedDatasViewModel();
                                ReorganizedValuesViewModel integratedValue;
                                Reorganized_ExplicitValuesViewModel integratedExplicitValue;
                                /// Make 3 temporary list
                                foreach (ReorganizedDatasViewModel ReorganizedDatasObj in balanceSheetIntegratedDatas)
                                {
                                    IntDataBalance = new ReorganizedDatasViewModel();
                                    //All operating Items Before Total Current Assets
                                    if (ReorganizedDatasObj.IsParentItem != true && ReorganizedDatasObj.LineItem.ToUpper() == "TOTAL CURRENT ASSETS")
                                    {
                                        isTotalCurrentAsset = true;
                                    }
                                    if (ReorganizedDatasObj.IsParentItem != true && ReorganizedDatasObj.Category == "Operating" && isTotalCurrentAsset == false)
                                    {
                                        IntDataBalance.IsParentItem = false;
                                        IntDataBalance.IsTally = false;
                                        IntDataBalance.LineItem = ReorganizedDatasObj.LineItem;
                                        IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                        IntDataBalance.Category = ReorganizedDatasObj.Category;
                                        IntDataBalance.Sequence = TempTotalCurrentAssetOperatingList.Count + 1;
                                        IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                        IntDataBalance.Reorganized_ExplicitValuesVM = explicitValuesList;
                                        IntDataBalance.IsHistorical_editable = false;
                                        IntDataBalance.IsExplicit_editable = false;
                                        IntDataBalance.IntegratedDatasId = ReorganizedDatasObj.Id;
                                        TempTotalCurrentAssetOperatingList.Add(IntDataBalance);
                                    }

                                    if (ReorganizedDatasObj.IsParentItem != true && (ReorganizedDatasObj.LineItem.ToUpper().Contains("CURRENT LIABILITY") || ReorganizedDatasObj.LineItem.ToUpper().Contains("CURRENT LIABILITIES")))
                                    {
                                        isCurrentLiblities = true;
                                        break;
                                    }
                                    //All Non-operating Items except EXCESS CASH Before Total Assets
                                    if (ReorganizedDatasObj.IsParentItem != true && ReorganizedDatasObj.Category == "Non-Operating" && isTotalAsset == false && ReorganizedDatasObj.LineItem.ToUpper() != "EXCESS CASH")
                                    {
                                        IntDataBalance.IsParentItem = false;
                                        IntDataBalance.IsTally = false;
                                        IntDataBalance.LineItem = ReorganizedDatasObj.LineItem;
                                        IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                        IntDataBalance.Category = ReorganizedDatasObj.Category;
                                        IntDataBalance.Sequence = TempTotalAssetNonOperatingList.Count + 1;
                                        IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                        IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                        IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                        IntDataBalance.IsHistorical_editable = false;
                                        IntDataBalance.IsExplicit_editable = false;
                                        IntDataBalance.IntegratedDatasId = ReorganizedDatasObj.Id;
                                        var Integratedvalues = AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0 ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == ReorganizedDatasObj.Id) : null;
                                        var IntegratedExplicit_values = AllIntegratedExplicitValuesList != null && AllIntegratedExplicitValuesList.Count > 0 ? AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == ReorganizedDatasObj.Id) : null;
                                        foreach (var valueObj in Integratedvalues)
                                        {
                                            integratedValue = new ReorganizedValuesViewModel();
                                            integratedValue.FilingDate = valueObj.FilingDate;
                                            integratedValue.Year = valueObj.Year;
                                            integratedValue.Value = valueObj.Value;
                                            IntDataBalance.ReorganizedValuesVM.Add(integratedValue);
                                        }
                                        foreach (var valueObj in IntegratedExplicit_values)
                                        {
                                            integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                            integratedExplicitValue.Year = valueObj.Year;
                                            integratedExplicitValue.Value = valueObj.Value;
                                            IntDataBalance.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                        }
                                        TempTotalAssetNonOperatingList.Add(IntDataBalance);
                                    }
                                    //All operating Items After Total Assets Before Current Liablities
                                    if (ReorganizedDatasObj.IsParentItem != true && ReorganizedDatasObj.Category == "Operating" && isTotalAsset == true && isCurrentLiblities == false)
                                    {
                                        IntDataBalance.IsParentItem = false;
                                        IntDataBalance.IsTally = false;
                                        IntDataBalance.LineItem = ReorganizedDatasObj.LineItem;
                                        IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                        IntDataBalance.Category = ReorganizedDatasObj.Category;
                                        IntDataBalance.Sequence = TempCurrentLiabilityOperatingList.Count + 1;
                                        IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                        IntDataBalance.Reorganized_ExplicitValuesVM = explicitValuesList;
                                        IntDataBalance.IsHistorical_editable = false;
                                        IntDataBalance.IsExplicit_editable = false;
                                        IntDataBalance.IntegratedDatasId = ReorganizedDatasObj.Id;
                                        TempCurrentLiabilityOperatingList.Add(IntDataBalance);
                                    }
                                    if (ReorganizedDatasObj.IsParentItem != true && ReorganizedDatasObj.LineItem.ToUpper() == "TOTAL ASSETS")
                                    {
                                        isTotalAsset = true;
                                    }

                                }
                                /////// Fill Main List From First temp List
                                foreach (ReorganizedDatasViewModel DataObj in TempTotalCurrentAssetOperatingList)
                                {
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == DataObj.IntegratedDatasId);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == DataObj.IntegratedDatasId);

                                    integratedValue = new ReorganizedValuesViewModel();
                                    Reorganized_ExplicitValuesViewModel integratedExplicit_Value = new Reorganized_ExplicitValuesViewModel();

                                    List<ReorganizedValuesViewModel> ReorganizedValuesViewModelList = new List<ReorganizedValuesViewModel>();
                                    List<Reorganized_ExplicitValuesViewModel> ReorganizedExplict_ValuesViewModelList = new List<Reorganized_ExplicitValuesViewModel>();
                                    foreach (var valueObj in Integratedvalues)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.FilingDate = valueObj.FilingDate;
                                        integratedValue.Year = valueObj.Year;
                                        integratedValue.Value = valueObj.Value;
                                        ReorganizedValuesViewModelList.Add(integratedValue);
                                    }
                                    DataObj.ReorganizedValuesVM = ReorganizedValuesViewModelList;
                                    foreach (var valueObj in IntegratedExplicit_values)
                                    {
                                        integratedExplicit_Value = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicit_Value.Year = valueObj.Year;
                                        integratedExplicit_Value.Value = valueObj.Value;
                                        ReorganizedExplict_ValuesViewModelList.Add(integratedExplicit_Value);
                                    }
                                    DataObj.Reorganized_ExplicitValuesVM = ReorganizedExplict_ValuesViewModelList;
                                    ReorganizedDatasList.Add(DataObj);
                                }

                                //Opertaing Current Assets (SUM)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = true;
                                IntDataBalance.LineItem = "Operating Current Assets";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "General";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                Reorganized_ExplicitValuesViewModel expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    expvalue.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                ReorganizedValuesViewModel OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    OCAvalueObj.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                /////////////////////////////////////

                                /////// Make Main List From Second temp List
                                foreach (ReorganizedDatasViewModel DataObj in TempCurrentLiabilityOperatingList)
                                {
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == DataObj.IntegratedDatasId);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == DataObj.IntegratedDatasId);

                                    integratedValue = new ReorganizedValuesViewModel();
                                    Reorganized_ExplicitValuesViewModel integratedExplicit_Value = new Reorganized_ExplicitValuesViewModel();

                                    List<ReorganizedValuesViewModel> ReorganizedValuesViewModelList = new List<ReorganizedValuesViewModel>();
                                    List<Reorganized_ExplicitValuesViewModel> ReorganizedExplict_ValuesViewModelList = new List<Reorganized_ExplicitValuesViewModel>();
                                    foreach (var valueObj in Integratedvalues)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.FilingDate = valueObj.FilingDate;
                                        integratedValue.Year = valueObj.Year;
                                        integratedValue.Value = valueObj.Value;
                                        ReorganizedValuesViewModelList.Add(integratedValue);
                                    }
                                    DataObj.ReorganizedValuesVM = ReorganizedValuesViewModelList;
                                    foreach (var valueObj in IntegratedExplicit_values)
                                    {
                                        integratedExplicit_Value = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicit_Value.Year = valueObj.Year;
                                        integratedExplicit_Value.Value = valueObj.Value;
                                        ReorganizedExplict_ValuesViewModelList.Add(integratedExplicit_Value);
                                    }
                                    DataObj.Reorganized_ExplicitValuesVM = ReorganizedExplict_ValuesViewModelList;
                                    ReorganizedDatasList.Add(DataObj);
                                    ReorganizedDatasLiabilityList.Add(DataObj);
                                }


                                //Operating Current Liabilities (SUM)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = true;
                                IntDataBalance.LineItem = "Operating Current Liabilities";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "General";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasLiabilityList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    expvalue.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasLiabilityList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    OCAvalueObj.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Operating Working Capital
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Operating Working Capital";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "General";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                var OprCurrentAssetExpValue = ReorganizedDatasList.Find(x => x.LineItem == "Operating Current Assets").Reorganized_ExplicitValuesVM;
                                var OprCurrentLiabExpValue = ReorganizedDatasList.Find(x => x.LineItem == "Operating Current Liabilities").Reorganized_ExplicitValuesVM;
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    double OCAvalue = 0;
                                    OCAvalue = (OprCurrentAssetExpValue != null && OprCurrentAssetExpValue.Count > 0 && OprCurrentAssetExpValue.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(OprCurrentAssetExpValue.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(OprCurrentAssetExpValue.Find(x => x.Year == ReExpValue.Year).Value) : 0) - (OprCurrentLiabExpValue != null && OprCurrentLiabExpValue.Count > 0 && OprCurrentLiabExpValue.Find(x => x.Year == ReExpValue.Year) != null && !string.IsNullOrEmpty(OprCurrentLiabExpValue.Find(x => x.Year == ReExpValue.Year).Value) ? Convert.ToDouble(OprCurrentLiabExpValue.Find(x => x.Year == ReExpValue.Year).Value) : 0);
                                    expvalue.Value = Convert.ToString(OCAvalue);
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                var OprCurrentAssetValue = ReorganizedDatasList.Find(x => x.LineItem == "Operating Current Assets").ReorganizedValuesVM;
                                var OprCurrentLiabValue = ReorganizedDatasList.Find(x => x.LineItem == "Operating Current Liabilities").ReorganizedValuesVM;
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    double OCAvalue = 0;
                                    OCAvalue = (OprCurrentAssetValue != null && OprCurrentAssetValue.Count > 0 && OprCurrentAssetValue.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(OprCurrentAssetValue.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(OprCurrentAssetValue.Find(x => x.Year == ReValue.Year).Value) : 0) - (OprCurrentLiabValue != null && OprCurrentLiabValue.Count > 0 && OprCurrentLiabValue.Find(x => x.Year == ReValue.Year) != null && !string.IsNullOrEmpty(OprCurrentLiabValue.Find(x => x.Year == ReValue.Year).Value) ? Convert.ToDouble(OprCurrentLiabValue.Find(x => x.Year == ReValue.Year).Value) : 0);
                                    OCAvalueObj.Value = Convert.ToString(OCAvalue);
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasInvestedCapitalExcludList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Property Plant & Equipment
                                var IntdataPPE = balanceSheetIntegratedDatas.Find(x => x.LineItem.ToUpper().Contains("PP&E") || x.LineItem.ToUpper().Contains("PROPERTY AND EQUIPMENT") || x.LineItem.ToUpper().Contains("PROPERTY, PLANT AND EQUIPMENT") || x.LineItem.ToUpper().Contains("PROPERTY PLANT AND EQUIPMENT"));
                                if (IntdataPPE != null)
                                {
                                    IntDataBalance = new ReorganizedDatasViewModel();
                                    IntDataBalance.IsParentItem = false;
                                    IntDataBalance.IsTally = false;
                                    IntDataBalance.LineItem = IntdataPPE.LineItem;
                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    IntDataBalance.Category = IntdataPPE.Category;
                                    IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                    IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                    IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                    IntDataBalance.IsHistorical_editable = false;
                                    IntDataBalance.IsExplicit_editable = false;
                                    IntDataBalance.IntegratedDatasId = IntdataPPE.Id;
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataPPE.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataPPE.Id);
                                    foreach (var valueObj in Integratedvalues)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.FilingDate = valueObj.FilingDate;
                                        integratedValue.Year = valueObj.Year;
                                        integratedValue.Value = valueObj.Value;
                                        IntDataBalance.ReorganizedValuesVM.Add(integratedValue);
                                    }
                                    foreach (var valueObj in IntegratedExplicit_values)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = valueObj.Year;
                                        integratedExplicitValue.Value = valueObj.Value;
                                        IntDataBalance.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    }
                                    ReorganizedDatasList.Add(IntDataBalance);
                                    ReorganizedDatasInvestedCapitalExcludList.Add(IntDataBalance);
                                }
                                /////////////////////////////////////

                                //Capitalized Operating Leases  (PLACEHOLDER)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Capitalized Operating Leases";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    expvalue.Value = "0";
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    OCAvalueObj.Value = "0";
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasInvestedCapitalExcludList.Add(IntDataBalance);
                                /////////////////////////////////////
                                //Other Long-Term Assets, Net of Liabilities  (PLACEHOLDER)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Other Long-Term Assets, Net of Liabilities";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    expvalue.Value = null;
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    OCAvalueObj.Value = null;
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasInvestedCapitalExcludList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Invested Capital (Excluding Goodwill & Acquired Intangibles) (SUM)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = true;
                                IntDataBalance.LineItem = "Invested Capital (Excluding Goodwill & Acquired Intangibles)";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "General";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasInvestedCapitalExcludList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    expvalue.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasInvestedCapitalExcludList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    OCAvalueObj.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasInvestedCapitalList.Add(IntDataBalance);
                                ReorganizedDatasList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Goodwill
                                var IntdataGoodwill = balanceSheetIntegratedDatas.Find(x => x.LineItem.ToUpper().Contains("GOODWILL") || x.LineItem.ToUpper().Contains("GOOD WILL"));


                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Goodwill";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = IntdataGoodwill != null ? IntdataGoodwill.Category : "";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                if (IntdataGoodwill != null)
                                {
                                    IntDataBalance.IntegratedDatasId = IntdataGoodwill.Id;
                                }

                                if (IntdataGoodwill != null)
                                {
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataGoodwill.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataGoodwill.Id);
                                    foreach (var valueObj in Integratedvalues)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.FilingDate = valueObj.FilingDate;
                                        integratedValue.Year = valueObj.Year;
                                        integratedValue.Value = valueObj.Value;
                                        IntDataBalance.ReorganizedValuesVM.Add(integratedValue);
                                    }
                                    foreach (var valueObj in IntegratedExplicit_values)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = valueObj.Year;
                                        integratedExplicitValue.Value = valueObj.Value;
                                        IntDataBalance.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    }
                                }
                                else
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                    {
                                        expvalue = new Reorganized_ExplicitValuesViewModel();
                                        expvalue.Year = ReExpValue.Year;
                                        expvalue.Id = 0;
                                        expvalue.Value = null;
                                        IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                    }
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                    {
                                        OCAvalueObj = new ReorganizedValuesViewModel();
                                        OCAvalueObj.Year = ReValue.Year;
                                        OCAvalueObj.Id = 0;
                                        OCAvalueObj.Value = null;
                                        IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                    }
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasInvestedCapitalList.Add(IntDataBalance);
                                /////////////////////////////////////
                                //Net Intangible Assets
                                var IntdataNetIntAssets = balanceSheetIntegratedDatas.Find(x => x.LineItem.ToUpper().Contains("INTANGIBLE ASSETS"));
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Net Intangible Assets";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = IntdataNetIntAssets != null ? IntdataNetIntAssets.Category : "";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                if (IntdataNetIntAssets != null)
                                {
                                    IntDataBalance.IntegratedDatasId = IntdataNetIntAssets.Id;
                                }
                                if (IntdataNetIntAssets != null)
                                {
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataNetIntAssets.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataNetIntAssets.Id);
                                    foreach (var valueObj in Integratedvalues)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.FilingDate = valueObj.FilingDate;
                                        integratedValue.Year = valueObj.Year;
                                        integratedValue.Value = valueObj.Value;
                                        IntDataBalance.ReorganizedValuesVM.Add(integratedValue);
                                    }
                                    foreach (var valueObj in IntegratedExplicit_values)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = valueObj.Year;
                                        integratedExplicitValue.Value = valueObj.Value;
                                        IntDataBalance.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    }
                                }
                                else
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                    {
                                        expvalue = new Reorganized_ExplicitValuesViewModel();
                                        expvalue.Year = ReExpValue.Year;
                                        expvalue.Id = 0;
                                        expvalue.Value = null;
                                        IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                    }
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                    {
                                        OCAvalueObj = new ReorganizedValuesViewModel();
                                        OCAvalueObj.Year = ReValue.Year;
                                        OCAvalueObj.Id = 0;
                                        OCAvalueObj.Value = null;
                                        IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                    }
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasInvestedCapitalList.Add(IntDataBalance);
                                /////////////////////////////////////
                                //Cumulative Amortization and Unrecorded Goodwill  (PLACEHOLDER)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Cumulative Amortization and Unrecorded Goodwill";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    expvalue.Value = "0";
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    OCAvalueObj.Value = "0";
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasInvestedCapitalList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Invested Capital (SUM)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = true;
                                IntDataBalance.LineItem = "Invested Capital";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "General";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasInvestedCapitalList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    expvalue.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasInvestedCapitalList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    OCAvalueObj.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasTotalFundsList.Add(IntDataBalance);
                                ReorganizedDatasList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Excess Cash
                                var IntdataExcessCash = balanceSheetIntegratedDatas.Find(x => x.LineItem.ToUpper().Contains("EXCESS CASH"));
                                if (IntdataExcessCash != null)
                                {
                                    IntDataBalance = new ReorganizedDatasViewModel();
                                    IntDataBalance.IsParentItem = false;
                                    IntDataBalance.IsTally = false;
                                    IntDataBalance.LineItem = IntdataExcessCash.LineItem;
                                    IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    IntDataBalance.Category = IntdataExcessCash.Category;
                                    IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                    IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                    IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                    IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                    IntDataBalance.IsHistorical_editable = false;
                                    IntDataBalance.IsExplicit_editable = false;
                                    IntDataBalance.IntegratedDatasId = IntdataExcessCash.Id;
                                    var Integratedvalues = AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == IntdataExcessCash.Id);
                                    var IntegratedExplicit_values = AllIntegratedExplicitValuesList.FindAll(x => x.IntegratedDatasId == IntdataExcessCash.Id);
                                    foreach (var valueObj in Integratedvalues)
                                    {
                                        integratedValue = new ReorganizedValuesViewModel();
                                        integratedValue.FilingDate = valueObj.FilingDate;
                                        integratedValue.Year = valueObj.Year;
                                        integratedValue.Value = valueObj.Value;
                                        IntDataBalance.ReorganizedValuesVM.Add(integratedValue);
                                    }
                                    foreach (var valueObj in IntegratedExplicit_values)
                                    {
                                        integratedExplicitValue = new Reorganized_ExplicitValuesViewModel();
                                        integratedExplicitValue.Year = valueObj.Year;
                                        integratedExplicitValue.Value = valueObj.Value;
                                        IntDataBalance.Reorganized_ExplicitValuesVM.Add(integratedExplicitValue);
                                    }
                                    ReorganizedDatasList.Add(IntDataBalance);
                                    ReorganizedDatasTotalFundsList.Add(IntDataBalance);
                                }
                                /////////////////////////////////////

                                //Nonconsolidated Investments
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Nonconsolidated Investments";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in TempTotalAssetNonOperatingList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    expvalue.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in TempTotalAssetNonOperatingList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    OCAvalueObj.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasTotalFundsList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Tax Loss Carry-Forwards  (PLACEHOLDER)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = false;
                                IntDataBalance.LineItem = "Tax Loss Carry-Forwards";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    expvalue.Value = "0";
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    OCAvalueObj.Value = "0";
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                ReorganizedDatasTotalFundsList.Add(IntDataBalance);
                                /////////////////////////////////////

                                //Total Funds Invested (SUM)
                                IntDataBalance = new ReorganizedDatasViewModel();
                                IntDataBalance.IsParentItem = false;
                                IntDataBalance.IsTally = true;
                                IntDataBalance.LineItem = "Total Funds Invested";
                                IntDataBalance.InitialSetupId = InitialSetup_IValuationObj.Id;
                                IntDataBalance.Category = "General";
                                IntDataBalance.Sequence = ReorganizedDatasList.Count + 1;
                                IntDataBalance.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                IntDataBalance.Reorganized_ExplicitValuesVM = new List<Reorganized_ExplicitValuesViewModel>();
                                IntDataBalance.ReorganizedValuesVM = new List<ReorganizedValuesViewModel>();
                                IntDataBalance.IsHistorical_editable = false;
                                IntDataBalance.IsExplicit_editable = false;
                                IntDataBalance.IntegratedDatasId = null;
                                expvalue = new Reorganized_ExplicitValuesViewModel();
                                foreach (Reorganized_ExplicitValuesViewModel ReExpValue in explicitValuesList)
                                {
                                    expvalue = new Reorganized_ExplicitValuesViewModel();
                                    expvalue.Year = ReExpValue.Year;
                                    expvalue.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasTotalFundsList)
                                    {
                                        var tempExplicitValue = item.Reorganized_ExplicitValuesVM != null && item.Reorganized_ExplicitValuesVM.Count > 0 ? item.Reorganized_ExplicitValuesVM.Find(x => x.Year == ReExpValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                                    }
                                    expvalue.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.Reorganized_ExplicitValuesVM.Add(expvalue);
                                }
                                OCAvalueObj = new ReorganizedValuesViewModel();
                                foreach (ReorganizedValuesViewModel ReValue in ValuesList)
                                {
                                    OCAvalueObj = new ReorganizedValuesViewModel();
                                    OCAvalueObj.Year = ReValue.Year;
                                    OCAvalueObj.Id = 0;
                                    double OCAvalue = 0;
                                    foreach (var item in ReorganizedDatasTotalFundsList)
                                    {
                                        var tempValue = item.ReorganizedValuesVM != null && item.ReorganizedValuesVM.Count > 0 ? item.ReorganizedValuesVM.Find(x => x.Year == ReValue.Year) : null;
                                        OCAvalue = OCAvalue + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                                    }
                                    OCAvalueObj.Value = OCAvalue.ToString("0.");
                                    IntDataBalance.ReorganizedValuesVM.Add(OCAvalueObj);
                                }
                                ReorganizedDatasList.Add(IntDataBalance);
                                /////////////////////////////////////

                                ReorganizedFiling.ReorganizedDatasVM = ReorganizedDatasList;
                                ReorganizedFilingsList.Add(ReorganizedFiling);
                            }
                            catch (Exception ss)
                            {
                                renderResult.StatusCode = 1;
                                renderResult.Message = "INVESTED CAPITAL CALCULATIONS ISSUE" + Convert.ToString(ss.Message);
                                renderResult.Result = ReorganizedFilingsList;
                            }
                            // Save INVESTED CAPITAL CALCULATIONS data in ReorganizedDatas  Values and Exp_Values
                            try
                            {
                                var ReOrganizedDatasChk = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.StatementTypeId == (int)StatementTypeEnum.InvestedCapitalCalculations).ToList();
                                if (ReOrganizedDatasChk == null || ReOrganizedDatasChk.Count == 0) ///////If data is not avlbl in ReorganizedData save then only.
                                {
                                    foreach (var item in ReorganizedDatasList)
                                    {
                                        if (item.LineItem != null)
                                        {

                                            ReorganizedDatas ReDatasObj = new ReorganizedDatas();
                                            ReDatasObj.Id = 0;
                                            ReDatasObj.Category = item.Category;
                                            ReDatasObj.Sequence = item.Sequence;
                                            ReDatasObj.LineItem = item.LineItem;
                                            ReDatasObj.IsTally = item.IsTally;
                                            ReDatasObj.IsParentItem = item.IsParentItem;
                                            ReDatasObj.StatementTypeId = (int)StatementTypeEnum.InvestedCapitalCalculations;
                                            ReDatasObj.ReorganizedValues = new List<ReorganizedValues>();
                                            ReDatasObj.Reorganized_ExplicitValues = new List<Reorganized_ExplicitValues>();
                                            foreach (var valueobj in item.ReorganizedValuesVM)
                                            {
                                                ReorganizedValues obj = new ReorganizedValues();
                                                obj.Id = 0;
                                                obj.Value = valueobj.Value;
                                                obj.Year = valueobj.Year;
                                                ReDatasObj.ReorganizedValues.Add(obj);
                                            }
                                            foreach (var valueobj in item.Reorganized_ExplicitValuesVM)
                                            {
                                                Reorganized_ExplicitValues obj = new Reorganized_ExplicitValues();
                                                obj.Id = 0;
                                                obj.Value = valueobj.Value;
                                                obj.Year = valueobj.Year;
                                                ReDatasObj.Reorganized_ExplicitValues.Add(obj);
                                            }
                                            ReDatasObj.InitialSetupId = InitialSetup_IValuationObj.Id;
                                            iReorganizedDatas.Add(ReDatasObj);
                                            iReorganizedDatas.Commit();
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                renderResult.StatusCode = 1;
                                renderResult.Message = "INVESTED CAPITAL CALCULATIONS DATA SAVING ISSUE";
                                renderResult.Result = ReorganizedFilingsList;
                            }
                            /////////////////////////////////////////////////////////////
                        }
                    }
                    renderResult.StatusCode = 1;
                    renderResult.Result = ReorganizedFilingsList;
                }
                else
                {
                    renderResult.StatusCode = 0;
                    renderResult.Message = "No data available in Integrated Financial Statement";
                    renderResult.Result = ReorganizedFilingsList;

                }

                return (ActionResult)this.Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj

                });

            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }
        #endregion



        #region ROIC FCF DCF and value of Oper.
        [HttpGet]
        [Route("GetROIC_FCF_DCF_Data/{UserId}")]
        public ActionResult GetROIC_FCF_DCF_Data(long UserId)
        {
            ROICResult renderResult = new ROICResult();
            List<ROICFilingsViewModel> ROICFilingsList = new List<ROICFilingsViewModel>();
            List<ROICDatasViewModel> ROICDatasList = new List<ROICDatasViewModel>();
            List<ROICDatasViewModel> GrossInvROICDatasList = new List<ROICDatasViewModel>();
            List<ROICDatasViewModel> FCF_ROICDatasList = new List<ROICDatasViewModel>();
            ROICFilingsViewModel ROICFiling = new ROICFilingsViewModel();
            List<ReorganizedDatas> ReorganizedDatasList = null;
            List<ReorganizedValues> AllReorganizedValuesList = null;
            List<Reorganized_ExplicitValues> AllReorganized_ExplicitValuesList = null;

            List<IntegratedDatas> IntegratedDatasList = null;
            List<IntegratedValues> AllIntegratedValuesList = null;
            List<Integrated_ExplicitValues> AllIntegrated_ExplicitValuesList = null;
            ROICDatasViewModel ROICData = new ROICDatasViewModel();
            ROIC_ExplicitValuesViewModel ROICexplicitValue;
            ROICValuesViewModel ROICValue;
            List<ROIC_ExplicitValuesViewModel> explicitValuesList = new List<ROIC_ExplicitValuesViewModel>();
            List<ROICValuesViewModel> ValuesList = new List<ROICValuesViewModel>();
            try
            {
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                long? InitialsetupId = null;
                if (InitialSetup_IValuationObj != null)
                {
                    InitialsetupId = InitialSetup_IValuationObj.Id;

                    int year = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);
                    for (int i = 1; i <= InitialSetup_IValuationObj.ExplicitYearCount + 1; i++)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        year = year + 1;
                        ROICexplicitValue.Year = Convert.ToString(year);
                        ROICexplicitValue.Value = "";
                        explicitValuesList.Add(ROICexplicitValue);
                    }

                    int Startyear = Convert.ToInt32(InitialSetup_IValuationObj.YearFrom);
                    int Endyear = Convert.ToInt32(InitialSetup_IValuationObj.YearTo);
                    int Count = Endyear - Startyear + 1;
                    for (int j = 1; j <= Count; j++)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = Convert.ToString(Startyear);
                        ROICValue.Value = "";
                        ValuesList.Add(ROICValue);
                        Startyear = Startyear + 1;
                    }
                }

                ReorganizedDatasList = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList();
                AllReorganizedValuesList = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? iReorganizedValues.FindBy(x => ReorganizedDatasList.Any(m => m.Id == x.ReorganizedDatasId)).ToList() : null;
                AllReorganized_ExplicitValuesList = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? iReorganized_ExplicitValues.FindBy(x => ReorganizedDatasList.Any(m => m.Id == x.ReorganizedDatasId)).ToList() : null;

                IntegratedDatasList = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList();
                AllIntegratedValuesList = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? iIntegratedValues.FindBy(x => IntegratedDatasList.Any(m => m.Id == x.IntegratedDatasId)).ToList() : null;
                AllIntegrated_ExplicitValuesList = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? iIntegrated_ExplicitValues.FindBy(x => IntegratedDatasList.Any(m => m.Id == x.IntegratedDatasId)).ToList() : null;

                List<ROICDatas> tblROICListObj = InitialsetupId != null ? iROICDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList() : null;
                if (tblROICListObj != null && tblROICListObj.Count > 0)  //when data is saved 
                {
                    //Bind the Saved ROIC_DCF_FCF DATA 
                    //get all Historical Values
                    List<ROICValues> ROICValuesListObj = iROICValues.FindBy(x => tblROICListObj.Any(m => m.Id == x.ROICDatasId)).ToList();

                    //get all Explicit Values 
                    List<ROIC_ExplicitValues> ROIC_explicitValuesAfterListObj = iROIC_ExplicitValues.FindBy(x => tblROICListObj.Any(m => m.Id == x.ROICDatasId)).ToList();

                    #region get Saved ROIC Data
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "Millions U.S. Dollars";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "ROIC";
                    ROICFiling.StatementType = "ROIC";
                    ROICDatasViewModel ROICDatasVm;
                    List<ROICDatas> tempROICDatasListObj = tblROICListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.ROIC).ToList();

                    if (tempROICDatasListObj != null && tempROICDatasListObj.Count > 0)
                    {
                        foreach (ROICDatas obj in tempROICDatasListObj)
                        {
                            ROICDatasVm = new ROICDatasViewModel();

                            ROICDatasVm = mapper.Map<ROICDatas, ROICDatasViewModel>(obj);

                            // for Historical Values
                            List<ROICValues> tempROICValueList = ROICValuesListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            //Incomeobj.ForcastRatioValues = tempForcastValueList;
                            ROICDatasVm.ROICValuesVM = new List<ROICValuesViewModel>();
                            foreach (var tmpobj in tempROICValueList)
                            {
                                ROICValuesViewModel tempValues = mapper.Map<ROICValues, ROICValuesViewModel>(tmpobj);
                                ROICDatasVm.ROICValuesVM.Add(tempValues);
                            }
                            // for Explicit Values
                            List<ROIC_ExplicitValues> tempROIC_ExplicitValueList = ROIC_explicitValuesAfterListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            ROICDatasVm.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                            foreach (var objtmp in tempROIC_ExplicitValueList)
                            {
                                ROIC_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(objtmp);
                                ROICDatasVm.ROIC_ExplicitValuesVM.Add(tempExplicitValues);
                            }
                            ROICDatasList.Add(ROICDatasVm);
                        }

                    }
                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region get Saved FCF Data
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "Millions U.S. Dollars";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "Free Cash Flow";
                    ROICFiling.StatementType = "Free Cash Flow";
                    tempROICDatasListObj = new List<ROICDatas>();
                    tempROICDatasListObj = tblROICListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.FCF).ToList();
                    if (tempROICDatasListObj != null && tempROICDatasListObj.Count > 0)
                    {
                        foreach (ROICDatas obj in tempROICDatasListObj)
                        {
                            ROICDatasVm = new ROICDatasViewModel();

                            ROICDatasVm = mapper.Map<ROICDatas, ROICDatasViewModel>(obj);

                            // for Historical Values
                            List<ROICValues> tempROICValueList = ROICValuesListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            //Incomeobj.ForcastRatioValues = tempForcastValueList;
                            ROICDatasVm.ROICValuesVM = new List<ROICValuesViewModel>();
                            foreach (var tmpobj in tempROICValueList)
                            {
                                ROICValuesViewModel tempValues = mapper.Map<ROICValues, ROICValuesViewModel>(tmpobj);
                                ROICDatasVm.ROICValuesVM.Add(tempValues);
                            }
                            // for Explicit Values
                            List<ROIC_ExplicitValues> tempROIC_ExplicitValueList = ROIC_explicitValuesAfterListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            ROICDatasVm.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                            foreach (var objtmp in tempROIC_ExplicitValueList)
                            {
                                ROIC_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(objtmp);
                                ROICDatasVm.ROIC_ExplicitValuesVM.Add(tempExplicitValues);
                            }
                            ROICDatasList.Add(ROICDatasVm);
                        }

                    }
                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region get Saved/Not Saved DCF1 Data
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "Discounted Cash Flow Calculation(DCFC)";
                    ROICFiling.StatementType = "DCF1";
                    tempROICDatasListObj = new List<ROICDatas>();
                    tempROICDatasListObj = tblROICListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.DCF1).ToList();
                    if (tempROICDatasListObj != null && tempROICDatasListObj.Count > 0)  //Saved data
                    {
                        foreach (ROICDatas obj in tempROICDatasListObj)
                        {
                            ROICDatasVm = new ROICDatasViewModel();

                            ROICDatasVm = mapper.Map<ROICDatas, ROICDatasViewModel>(obj);

                            // for Historical Values
                            List<ROICValues> tempROICValueList = ROICValuesListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            //Incomeobj.ForcastRatioValues = tempForcastValueList;
                            ROICDatasVm.ROICValuesVM = new List<ROICValuesViewModel>();
                            foreach (var tmpobj in tempROICValueList)
                            {
                                ROICValuesViewModel tempValues = mapper.Map<ROICValues, ROICValuesViewModel>(tmpobj);
                                ROICDatasVm.ROICValuesVM.Add(tempValues);
                            }
                            // for Explicit Values
                            List<ROIC_ExplicitValues> tempROIC_ExplicitValueList = ROIC_explicitValuesAfterListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            ROICDatasVm.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                            foreach (var objtmp in tempROIC_ExplicitValueList)
                            {
                                ROIC_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(objtmp);
                                ROICDatasVm.ROIC_ExplicitValuesVM.Add(tempExplicitValues);
                            }
                            ROICDatasList.Add(ROICDatasVm);
                        }

                    }
                    else  //Not Saved data
                    {
                        var CostOfcapital = iCostOfCapital_IValuation.GetSingle(x => x.InitialSetupId == InitialsetupId);

                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "Discount Rate";
                        ROICData.Sequence = 1;
                        ROICData.IsExplicit_editable = false;
                        ROICData.IsHistorical_editable = false;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = false;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF1;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = CostOfcapital != null ? Convert.ToDouble(CostOfcapital.WeightedAverage).ToString("0.##") : null;
                        ROICDatasList.Add(ROICData);

                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "Growth During Terminal Period";
                        ROICData.Sequence = 2;
                        ROICData.IsExplicit_editable = true;
                        ROICData.IsHistorical_editable = true;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = false;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF1;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = null;
                        ROICDatasList.Add(ROICData);

                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "Return on New Invested Capital (RONIC)";
                        ROICData.Sequence = 3;
                        ROICData.IsExplicit_editable = true;
                        ROICData.IsHistorical_editable = true;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = false;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF1;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = null;
                        ROICDatasList.Add(ROICData);
                    }
                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region get Saved/Not Saved DCF2 Data
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "Millions U.S. Dollars";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "";
                    ROICFiling.StatementType = "DCF2";
                    tempROICDatasListObj = new List<ROICDatas>();
                    tempROICDatasListObj = tblROICListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.DCF2).ToList();
                    if (tempROICDatasListObj != null && tempROICDatasListObj.Count > 0)
                    {
                        foreach (ROICDatas obj in tempROICDatasListObj)
                        {
                            ROICDatasVm = new ROICDatasViewModel();

                            ROICDatasVm = mapper.Map<ROICDatas, ROICDatasViewModel>(obj);

                            // for Historical Values
                            List<ROICValues> tempROICValueList = ROICValuesListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            //Incomeobj.ForcastRatioValues = tempForcastValueList;
                            ROICDatasVm.ROICValuesVM = new List<ROICValuesViewModel>();
                            foreach (var tmpobj in tempROICValueList)
                            {
                                ROICValuesViewModel tempValues = mapper.Map<ROICValues, ROICValuesViewModel>(tmpobj);
                                ROICDatasVm.ROICValuesVM.Add(tempValues);
                            }
                            // for Explicit Values
                            List<ROIC_ExplicitValues> tempROIC_ExplicitValueList = ROIC_explicitValuesAfterListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            ROICDatasVm.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                            foreach (var objtmp in tempROIC_ExplicitValueList)
                            {
                                ROIC_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(objtmp);
                                ROICDatasVm.ROIC_ExplicitValuesVM.Add(tempExplicitValues);
                            }
                            ROICDatasList.Add(ROICDatasVm);
                        }

                    }
                    else
                    {
                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "DCF";
                        ROICData.Sequence = 1;
                        ROICData.IsExplicit_editable = true;
                        ROICData.IsHistorical_editable = true;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = false;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF2;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = null;
                        foreach (ROICValuesViewModel ROICitem in ValuesList)
                        {
                            ROICValue = new ROICValuesViewModel();
                            ROICValue.Year = ROICitem.Year;
                            ROICValue.Id = 0;
                            ROICValue.Value = null;
                            ROICData.ROICValuesVM.Add(ROICValue);
                        }
                        foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                        {
                            ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                            ROICexplicitValue.Year = ROICitem.Year;
                            ROICexplicitValue.Id = 0;
                            ROICexplicitValue.Value = null;
                            ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                        }
                        ROICDatasList.Add(ROICData);
                    }
                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region get Saved/Not Saved DCF3 Data
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "";
                    ROICFiling.StatementType = "DCF3";
                    tempROICDatasListObj = new List<ROICDatas>();
                    tempROICDatasListObj = tblROICListObj.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.DCF3).ToList();
                    if (tempROICDatasListObj != null && tempROICDatasListObj.Count > 0)
                    {
                        foreach (ROICDatas obj in tempROICDatasListObj)
                        {
                            ROICDatasVm = new ROICDatasViewModel();

                            ROICDatasVm = mapper.Map<ROICDatas, ROICDatasViewModel>(obj);

                            // for Historical Values
                            List<ROICValues> tempROICValueList = ROICValuesListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            //Incomeobj.ForcastRatioValues = tempForcastValueList;
                            ROICDatasVm.ROICValuesVM = new List<ROICValuesViewModel>();
                            foreach (var tmpobj in tempROICValueList)
                            {
                                ROICValuesViewModel tempValues = mapper.Map<ROICValues, ROICValuesViewModel>(tmpobj);
                                ROICDatasVm.ROICValuesVM.Add(tempValues);
                            }
                            // for Explicit Values
                            List<ROIC_ExplicitValues> tempROIC_ExplicitValueList = ROIC_explicitValuesAfterListObj.FindAll(x => x.ROICDatasId == obj.Id).ToList();
                            ROICDatasVm.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                            foreach (var objtmp in tempROIC_ExplicitValueList)
                            {
                                ROIC_ExplicitValuesViewModel tempExplicitValues = mapper.Map<ROIC_ExplicitValues, ROIC_ExplicitValuesViewModel>(objtmp);
                                ROICDatasVm.ROIC_ExplicitValuesVM.Add(tempExplicitValues);
                            }
                            ROICDatasList.Add(ROICDatasVm);
                        }

                    }
                    else
                    {
                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "PV of FCF During Explicit Forecast Period";
                        ROICData.Sequence = 1;
                        ROICData.IsExplicit_editable = false;
                        ROICData.IsHistorical_editable = false;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = false;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = null;
                        ROICDatasList.Add(ROICData);

                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "Base for Terminal Value";
                        ROICData.Sequence = 2;
                        ROICData.IsExplicit_editable = false;
                        ROICData.IsHistorical_editable = false;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = false;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = null;
                        ROICDatasList.Add(ROICData);

                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "PV of Terminal Value";
                        ROICData.Sequence = 3;
                        ROICData.IsExplicit_editable = false;
                        ROICData.IsHistorical_editable = false;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = false;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = null;
                        ROICDatasList.Add(ROICData);

                        ROICData = new ROICDatasViewModel();
                        ROICData.LineItem = "Total Value of Operations";
                        ROICData.Sequence = 4;
                        ROICData.IsExplicit_editable = false;
                        ROICData.IsHistorical_editable = false;
                        ROICData.IsParentItem = false;
                        ROICData.IsTally = true;
                        ROICData.Category = "";
                        ROICData.InitialSetupId = InitialsetupId;
                        ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                        ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                        ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                        ROICData.DtValue = null;
                        ROICDatasList.Add(ROICData);

                    }
                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion
                }
                else //when data is not saved 
                {


                    var NOPLAT_ReorganizedDatas = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? ReorganizedDatasList.OrderBy(x => x.Id).First(x => x.LineItem.ToUpper() == "NOPLAT") : null;

                    var NOPLAT_Reorganizedvalues = NOPLAT_ReorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.FindAll(x => x.ReorganizedDatasId == NOPLAT_ReorganizedDatas.Id) : null;
                    var NOPLAT_ReorganizedExpvalues = NOPLAT_ReorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.FindAll(x => x.ReorganizedDatasId == NOPLAT_ReorganizedDatas.Id) : null;

                    var IC_EX_ReorganizedDatas = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? ReorganizedDatasList.Find(x => x.LineItem == "Invested Capital (Excluding Goodwill & Acquired Intangibles)") : null;
                    var IC_EX_Reorganizedvalues = IC_EX_ReorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.FindAll(x => x.ReorganizedDatasId == IC_EX_ReorganizedDatas.Id) : null;
                    var IC_EX_ReorganizedExpvalues = IC_EX_ReorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.FindAll(x => x.ReorganizedDatasId == IC_EX_ReorganizedDatas.Id) : null;

                    var IC_ReorganizedDatas = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? ReorganizedDatasList.Find(x => x.LineItem == "Invested Capital") : null;
                    var IC_Reorganizedvalues = IC_ReorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.FindAll(x => x.ReorganizedDatasId == IC_ReorganizedDatas.Id) : null;
                    var IC_ReorganizedExpvalues = IC_ReorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.FindAll(x => x.ReorganizedDatasId == IC_ReorganizedDatas.Id) : null;

                    var OWC_ReorganizedDatas = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? ReorganizedDatasList.Find(x => x.LineItem == "Operating Working Capital") : null;
                    var OWC_Reorganizedvalues = OWC_ReorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.FindAll(x => x.ReorganizedDatasId == OWC_ReorganizedDatas.Id) : null;
                    var OWC_ReorganizedExpvalues = OWC_ReorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.FindAll(x => x.ReorganizedDatasId == OWC_ReorganizedDatas.Id) : null;

                    var COL_ReorganizedDatas = ReorganizedDatasList != null && ReorganizedDatasList.Count > 0 ? ReorganizedDatasList.Find(x => x.LineItem == "Capitalized Operating Leases") : null;
                    var COL_Reorganizedvalues = COL_ReorganizedDatas != null && AllReorganizedValuesList != null && AllReorganizedValuesList.Count > 0 ? AllReorganizedValuesList.FindAll(x => x.ReorganizedDatasId == COL_ReorganizedDatas.Id) : null;
                    var COL_ReorganizedExpvalues = COL_ReorganizedDatas != null && AllReorganized_ExplicitValuesList != null && AllReorganized_ExplicitValuesList.Count > 0 ? AllReorganized_ExplicitValuesList.FindAll(x => x.ReorganizedDatasId == COL_ReorganizedDatas.Id) : null;


                    var EBITDA_IntegratedDatas = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.Find(x => x.LineItem.ToUpper().Contains("EBITDA")) : null;
                    var Depreciation_IntegratedDatas = IntegratedDatasList != null && IntegratedDatasList.Count > 0 && EBITDA_IntegratedDatas != null && EBITDA_IntegratedDatas.Id != null && EBITDA_IntegratedDatas.Id != 0 ? IntegratedDatasList.Find(x => x.Id == EBITDA_IntegratedDatas.Id + 1 && x.LineItem.ToUpper().Contains("DEPRECIATION")) : null;
                    var Depreciation_Integratedvalues = Depreciation_IntegratedDatas != null && AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0 ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == Depreciation_IntegratedDatas.Id) : null;
                    var Depreciation_IntegratedExpvalues = Depreciation_IntegratedDatas != null && AllIntegrated_ExplicitValuesList != null && AllIntegrated_ExplicitValuesList.Count > 0 ? AllIntegrated_ExplicitValuesList.FindAll(x => x.IntegratedDatasId == Depreciation_IntegratedDatas.Id) : null;

                    var PPE_IntegratedDatas = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.Find(x => x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())) : null;
                    var PPE_Integratedvalues = PPE_IntegratedDatas != null && AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0 ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == PPE_IntegratedDatas.Id) : null;
                    var PPE_IntegratedExpvalues = PPE_IntegratedDatas != null && AllIntegrated_ExplicitValuesList != null && AllIntegrated_ExplicitValuesList.Count > 0 ? AllIntegrated_ExplicitValuesList.FindAll(x => x.IntegratedDatasId == PPE_IntegratedDatas.Id) : null;

                    var IntdataEBITA = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.Find(x => x.LineItem == "EBITA") : null;
                    var Amor_IntegratedDatas = IntegratedDatasList != null && IntegratedDatasList.Count > 0 && IntdataEBITA != null && IntdataEBITA.Id != null && IntdataEBITA.Id != 0 ? IntegratedDatasList.Find(x => x.Id == IntdataEBITA.Id + 1 && x.LineItem.ToUpper().Contains("AMORTIZATION")) : null;
                    var Amor_Integratedvalues = Amor_IntegratedDatas != null && AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0 ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == Amor_IntegratedDatas.Id) : null;
                    var Amor_IntegratedExpvalues = Amor_IntegratedDatas != null && AllIntegrated_ExplicitValuesList != null && AllIntegrated_ExplicitValuesList.Count > 0 ? AllIntegrated_ExplicitValuesList.FindAll(x => x.IntegratedDatasId == Amor_IntegratedDatas.Id) : null;

                    var GdWl_IntegratedDatas = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.Find(x => x.LineItem.ToUpper().Contains("GOODWILL") || x.LineItem.ToUpper().Contains("GOOD WILL")) : null;
                    var GdWl_Integratedvalues = GdWl_IntegratedDatas != null && AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0 ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == GdWl_IntegratedDatas.Id) : null;
                    var GdWl_IntegratedExpvalues = GdWl_IntegratedDatas != null && AllIntegrated_ExplicitValuesList != null && AllIntegrated_ExplicitValuesList.Count > 0 ? AllIntegrated_ExplicitValuesList.FindAll(x => x.IntegratedDatasId == GdWl_IntegratedDatas.Id) : null;

                    var NIA_IntegratedDatas = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.Find(x => x.LineItem.ToUpper().Contains("INTANGIBLE ASSETS")) : null;
                    var NIA_Integratedvalues = NIA_IntegratedDatas != null && AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0 ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == NIA_IntegratedDatas.Id) : null;
                    var NIA_IntegratedExpvalues = NIA_IntegratedDatas != null && AllIntegrated_ExplicitValuesList != null && AllIntegrated_ExplicitValuesList.Count > 0 ? AllIntegrated_ExplicitValuesList.FindAll(x => x.IntegratedDatasId == NIA_IntegratedDatas.Id) : null;

                    var AOCI_IntegratedDatas = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.Find(x => x.LineItem.ToUpper().Contains("COMPREHENSIVE INCOME") || x.LineItem.ToUpper().Contains("COMPREHENSIVE LOSS")) : null;
                    var AOCI_Integratedvalues = AOCI_IntegratedDatas != null && AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0 ? AllIntegratedValuesList.FindAll(x => x.IntegratedDatasId == AOCI_IntegratedDatas.Id) : null;
                    var AOCI_IntegratedExpvalues = AOCI_IntegratedDatas != null && AllIntegrated_ExplicitValuesList != null && AllIntegrated_ExplicitValuesList.Count > 0 ? AllIntegrated_ExplicitValuesList.FindAll(x => x.IntegratedDatasId == AOCI_IntegratedDatas.Id) : null;

                    List<ROICDatasViewModel> ROICDatasVMList = new List<ROICDatasViewModel>();

                    //List<FilingsTable> filingsList = new List<FilingsTable>();
                    #region ROIC
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "Millions U.S. Dollars";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "ROIC";
                    ROICFiling.StatementType = "ROIC";

                    ROICData.LineItem = "ROIC Excluding Goodwill and Intangibles";
                    ROICData.Sequence = 1;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.ROIC;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;

                        value = IC_EX_Reorganizedvalues != null && IC_EX_Reorganizedvalues.Count > 0 && IC_EX_Reorganizedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(IC_EX_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) && IC_EX_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value != "0" ? (NOPLAT_Reorganizedvalues != null && NOPLAT_Reorganizedvalues.Count > 0 && NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) * 100 / Convert.ToDouble(IC_EX_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0;
                        ROICValue.Value = value.ToString("0.#");
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;

                        value = IC_EX_ReorganizedExpvalues != null && IC_EX_ReorganizedExpvalues.Count > 0 && IC_EX_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(IC_EX_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) && IC_EX_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value != "0" ? (NOPLAT_ReorganizedExpvalues != null && NOPLAT_ReorganizedExpvalues.Count > 0 && NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) * 100 / Convert.ToDouble(IC_EX_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0;
                        ROICexplicitValue.Value = value.ToString("0.#");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "ROIC Including Goodwill and Intangibles";
                    ROICData.Sequence = 2;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.ROIC;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        value = IC_Reorganizedvalues != null && IC_Reorganizedvalues.Count > 0 && IC_Reorganizedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(IC_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) && IC_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value != "0" ? (NOPLAT_Reorganizedvalues != null && NOPLAT_Reorganizedvalues.Count > 0 && NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) * 100 / Convert.ToDouble(IC_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0;
                        ROICValue.Value = value.ToString("0.#");
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;

                        value = IC_ReorganizedExpvalues != null && IC_ReorganizedExpvalues.Count > 0 && IC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(IC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) && IC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value != "0" ? (NOPLAT_ReorganizedExpvalues != null && NOPLAT_ReorganizedExpvalues.Count > 0 && NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) * 100 / Convert.ToDouble(IC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0;
                        ROICexplicitValue.Value = value.ToString("0.#");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);

                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region SAVE_ROIC
                    // Save ROIC data 
                    try
                    {
                        var ROICChk = iROICDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.StatementTypeId == (int)StatementTypeEnum.ROIC).ToList();
                        if (ROICChk == null || ROICChk.Count == 0) ///////If data is not avlbl in ROIC save then only.
                        {
                            foreach (var item in ROICDatasList)
                            {
                                if (item.LineItem != null)
                                {

                                    ROICDatas ROICDatasObj = new ROICDatas();
                                    ROICDatasObj.Id = 0;
                                    ROICDatasObj.Category = item.Category;
                                    ROICDatasObj.Sequence = item.Sequence;
                                    ROICDatasObj.LineItem = item.LineItem;
                                    ROICDatasObj.IsTally = item.IsTally;
                                    ROICDatasObj.IsParentItem = item.IsParentItem;
                                    ROICDatasObj.StatementTypeId = (int)StatementTypeEnum.ROIC;
                                    ROICDatasObj.ROICValues = new List<ROICValues>();
                                    ROICDatasObj.ROIC_ExplicitValues = new List<ROIC_ExplicitValues>();
                                    foreach (var valueobj in item.ROICValuesVM)
                                    {
                                        ROICValues obj = new ROICValues();
                                        obj.Id = 0;
                                        obj.Value = valueobj.Value;
                                        obj.Year = valueobj.Year;
                                        ROICDatasObj.ROICValues.Add(obj);
                                    }
                                    foreach (var valueobj in item.ROIC_ExplicitValuesVM)
                                    {
                                        ROIC_ExplicitValues obj = new ROIC_ExplicitValues();
                                        obj.Id = 0;
                                        obj.Value = valueobj.Value;
                                        obj.Year = valueobj.Year;
                                        ROICDatasObj.ROIC_ExplicitValues.Add(obj);
                                    }
                                    ROICDatasObj.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    iROICDatas.Add(ROICDatasObj);
                                    iReorganizedDatas.Commit();
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        renderResult.StatusCode = 1;
                        renderResult.Message = "ROIC DATA SAVING ISSUE";
                        renderResult.Result = ROICFilingsList;
                    }
                    /////////////////////////////////////////////////////////////
                    #endregion

                    #region FCF
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "Millions U.S. Dollars";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "Free Cash Flow";
                    ROICFiling.StatementType = "Free Cash Flow";

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "NOPLAT";
                    ROICData.Sequence = 1;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        ROICValue.Value = NOPLAT_Reorganizedvalues != null && NOPLAT_Reorganizedvalues.Count > 0 && NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) ? NOPLAT_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value : null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        ROICexplicitValue.Value = NOPLAT_ReorganizedExpvalues != null && NOPLAT_ReorganizedExpvalues.Count > 0 && NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? NOPLAT_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value : null;
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Depreciation";
                    ROICData.Sequence = 2;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        ROICValue.Value = Depreciation_Integratedvalues != null && Depreciation_Integratedvalues.Count > 0 && Depreciation_Integratedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Depreciation_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToString(-1 * Convert.ToDouble(Depreciation_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value)) : null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        ROICexplicitValue.Value = Depreciation_IntegratedExpvalues != null && Depreciation_IntegratedExpvalues.Count > 0 && Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToString(-1 * Convert.ToDouble(Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value)) : null;
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Gross Cash Flow";
                    ROICData.Sequence = 3;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = true;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        foreach (var item in ROICDatasList)
                        {
                            var tempValue = item.ROICValuesVM != null && item.ROICValuesVM.Count > 0 ? item.ROICValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                            value = value + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                        }
                        ROICValue.Value = value.ToString("0.");
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        foreach (var item in ROICDatasList)
                        {
                            var tempExplicitValue = item.ROIC_ExplicitValuesVM != null && item.ROIC_ExplicitValuesVM.Count > 0 ? item.ROIC_ExplicitValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                            value = value + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);
                    FCF_ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Change in Operating Working capital";
                    ROICData.Sequence = 4;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    int k = 0;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        if (k != 0)
                        {
                            value = -1 * ((OWC_Reorganizedvalues != null && OWC_Reorganizedvalues.Count > 0 && OWC_Reorganizedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(OWC_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(OWC_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (OWC_Reorganizedvalues != null && OWC_Reorganizedvalues.Count > 0 && OWC_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(OWC_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(OWC_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                        }
                        ROICValue.Value = k != 0 ? value.ToString("0.") : null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                        k = k + 1;
                    }
                    k = 0;
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        if (k == 0)
                        {
                            value = -1 * ((OWC_ReorganizedExpvalues != null && OWC_ReorganizedExpvalues.Count > 0 && OWC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(OWC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(OWC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (OWC_Reorganizedvalues != null && OWC_Reorganizedvalues.Count > 0 && OWC_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(OWC_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(OWC_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                        }
                        else
                        {
                            value = -1 * ((OWC_ReorganizedExpvalues != null && OWC_ReorganizedExpvalues.Count > 0 && OWC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(OWC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(OWC_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (OWC_ReorganizedExpvalues != null && OWC_ReorganizedExpvalues.Count > 0 && OWC_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(OWC_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(OWC_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                        k = k + 1;
                    }
                    ROICDatasList.Add(ROICData);
                    GrossInvROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Net Capital Expenditures";
                    ROICData.Sequence = 5;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    k = 0;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        if (k != 0)
                        {
                            value = -1 * ((PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && PPE_Integratedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Depreciation_Integratedvalues != null && Depreciation_Integratedvalues.Count > 0 && Depreciation_Integratedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Depreciation_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Depreciation_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        ROICValue.Value = k != 0 ? value.ToString("0.") : null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                        k = k + 1;
                    }
                    k = 0;
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        if (k == 0)
                        {
                            value = -1 * ((PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_Integratedvalues != null && PPE_Integratedvalues.Count > 0 && PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Depreciation_IntegratedExpvalues != null && Depreciation_IntegratedExpvalues.Count > 0 && Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        else
                        {
                            value = -1 * ((PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (PPE_IntegratedExpvalues != null && PPE_IntegratedExpvalues.Count > 0 && PPE_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(PPE_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(PPE_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Depreciation_IntegratedExpvalues != null && Depreciation_IntegratedExpvalues.Count > 0 && Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Depreciation_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                        k = k + 1;
                    }
                    ROICDatasList.Add(ROICData);
                    GrossInvROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Decrease (increase) in Capital Operating Leases";
                    ROICData.Sequence = 6;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    k = 0;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        if (k != 0)
                        {
                            value = -1 * ((COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && COL_Reorganizedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        ROICValue.Value = k != 0 ? value.ToString("0.") : null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                        k = k + 1;
                    }
                    k = 0;
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        if (k == 0)
                        {
                            value = -1 * ((COL_Reorganizedvalues != null && COL_Reorganizedvalues.Count > 0 && COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_Reorganizedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        else
                        {
                            value = -1 * ((COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && COL_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (COL_ReorganizedExpvalues != null && COL_ReorganizedExpvalues.Count > 0 && COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(COL_ReorganizedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                        k = k + 1;
                    }
                    ROICDatasList.Add(ROICData);
                    GrossInvROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Investments in Goodwill and Acquired Intangibles";
                    ROICData.Sequence = 7;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    k = 0;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        if (k != 0)
                        {
                            value = -1 * ((GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && GdWl_Integratedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && NIA_Integratedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_Integratedvalues != null && Amor_Integratedvalues.Count > 0 && Amor_Integratedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Amor_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        ROICValue.Value = k != 0 ? value.ToString("0.") : null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                        k = k + 1;
                    }
                    k = 0;
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        if (k == 0)
                        {
                            value = -1 * ((GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_Integratedvalues != null && GdWl_Integratedvalues.Count > 0 && GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_Integratedvalues != null && NIA_Integratedvalues.Count > 0 && NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_IntegratedExpvalues != null && Amor_IntegratedExpvalues.Count > 0 && Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        else
                        {
                            value = -1 * ((GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) + (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (GdWl_IntegratedExpvalues != null && GdWl_IntegratedExpvalues.Count > 0 && GdWl_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(GdWl_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(GdWl_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (NIA_IntegratedExpvalues != null && NIA_IntegratedExpvalues.Count > 0 && NIA_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(NIA_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(NIA_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0) - (Amor_IntegratedExpvalues != null && Amor_IntegratedExpvalues.Count > 0 && Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(Amor_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0));
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                        k = k + 1;
                    }
                    ROICDatasList.Add(ROICData);
                    GrossInvROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Decrease (increase) in Net Other Operating Assets";
                    ROICData.Sequence = 8;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        ROICValue.Value = null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        ROICexplicitValue.Value = null;
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);
                    GrossInvROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Increase (Decrease) in AOCI";
                    ROICData.Sequence = 9;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    k = 0;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        if (k != 0)
                        {
                            value = -1 * ((AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && AOCI_Integratedvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                        }
                        ROICValue.Value = k != 0 ? value.ToString("0.") : null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                        k = k + 1;
                    }
                    k = 0;
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        if (k == 0)
                        {
                            value = -1 * ((AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_Integratedvalues != null && AOCI_Integratedvalues.Count > 0 && AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_Integratedvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                        }
                        else
                        {
                            value = -1 * ((AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year) != null && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == ROICitem.Year).Value) : 0) - (AOCI_IntegratedExpvalues != null && AOCI_IntegratedExpvalues.Count > 0 && AOCI_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)) != null && !string.IsNullOrEmpty(AOCI_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) ? Convert.ToDouble(AOCI_IntegratedExpvalues.Find(x => x.Year == Convert.ToString(Convert.ToInt32(ROICitem.Year) - 1)).Value) : 0));
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                        k = k + 1;
                    }
                    ROICDatasList.Add(ROICData);
                    GrossInvROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Gross Investment";
                    ROICData.Sequence = 10;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = true;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        foreach (var item in GrossInvROICDatasList)
                        {
                            var tempValue = item.ROICValuesVM != null && item.ROICValuesVM.Count > 0 ? item.ROICValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                            value = value + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                        }
                        ROICValue.Value = value.ToString("0.");
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        foreach (var item in GrossInvROICDatasList)
                        {
                            var tempExplicitValue = item.ROIC_ExplicitValuesVM != null && item.ROIC_ExplicitValuesVM.Count > 0 ? item.ROIC_ExplicitValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                            value = value + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);
                    FCF_ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Free Cash Flow (FCF)";
                    ROICData.Sequence = 11;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = true;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.FCF;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        double value = 0;
                        foreach (var item in FCF_ROICDatasList)
                        {
                            var tempValue = item.ROICValuesVM != null && item.ROICValuesVM.Count > 0 ? item.ROICValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                            value = value + (tempValue != null && !string.IsNullOrEmpty(tempValue.Value) ? Convert.ToDouble(tempValue.Value) : 0);
                        }
                        ROICValue.Value = value.ToString("0.");
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        double value = 0;
                        foreach (var item in FCF_ROICDatasList)
                        {
                            var tempExplicitValue = item.ROIC_ExplicitValuesVM != null && item.ROIC_ExplicitValuesVM.Count > 0 ? item.ROIC_ExplicitValuesVM.Find(x => x.Year == ROICitem.Year) : null;
                            value = value + (tempExplicitValue != null && !string.IsNullOrEmpty(tempExplicitValue.Value) ? Convert.ToDouble(tempExplicitValue.Value) : 0);
                        }
                        ROICexplicitValue.Value = value.ToString("0.");
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);

                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region SAVE_FCF                   
                    // Save FCF data 
                    try
                    {
                        var FCFChk = iROICDatas.FindBy(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.StatementTypeId == (int)StatementTypeEnum.FCF).ToList();
                        if (FCFChk == null || FCFChk.Count == 0) ///////If data is not avlbl in FCF save then only.
                        {
                            foreach (var item in ROICDatasList)
                            {
                                if (item.LineItem != null)
                                {

                                    ROICDatas ROICDatasObj = new ROICDatas();
                                    ROICDatasObj.Id = 0;
                                    ROICDatasObj.Category = item.Category;
                                    ROICDatasObj.Sequence = item.Sequence;
                                    ROICDatasObj.LineItem = item.LineItem;
                                    ROICDatasObj.IsTally = item.IsTally;
                                    ROICDatasObj.IsParentItem = item.IsParentItem;
                                    ROICDatasObj.StatementTypeId = (int)StatementTypeEnum.FCF;
                                    ROICDatasObj.ROICValues = new List<ROICValues>();
                                    ROICDatasObj.ROIC_ExplicitValues = new List<ROIC_ExplicitValues>();
                                    foreach (var valueobj in item.ROICValuesVM)
                                    {
                                        ROICValues obj = new ROICValues();
                                        obj.Id = 0;
                                        obj.Value = valueobj.Value;
                                        obj.Year = valueobj.Year;
                                        ROICDatasObj.ROICValues.Add(obj);
                                    }
                                    foreach (var valueobj in item.ROIC_ExplicitValuesVM)
                                    {
                                        ROIC_ExplicitValues obj = new ROIC_ExplicitValues();
                                        obj.Id = 0;
                                        obj.Value = valueobj.Value;
                                        obj.Year = valueobj.Year;
                                        ROICDatasObj.ROIC_ExplicitValues.Add(obj);
                                    }
                                    ROICDatasObj.InitialSetupId = InitialSetup_IValuationObj.Id;
                                    iROICDatas.Add(ROICDatasObj);
                                    iReorganizedDatas.Commit();
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        renderResult.StatusCode = 1;
                        renderResult.Message = "ROIC DATA SAVING ISSUE";
                        renderResult.Result = ROICFilingsList;
                    }
                    /////////////////////////////////////////////////////////////

                    #endregion


                    #region DCF1
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "Discounted Cash Flow Calculation(DCFC)";
                    ROICFiling.StatementType = "DCF1";

                    var CostOfcapital = iCostOfCapital_IValuation.GetSingle(x => x.InitialSetupId == InitialsetupId);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Discount Rate";
                    ROICData.Sequence = 1;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF1;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = CostOfcapital != null ? Convert.ToDouble(CostOfcapital.WeightedAverage).ToString("0.##") : null;
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Growth During Terminal Period";
                    ROICData.Sequence = 2;
                    ROICData.IsExplicit_editable = true;
                    ROICData.IsHistorical_editable = true;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF1;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Return on New Invested Capital (RONIC)";
                    ROICData.Sequence = 3;
                    ROICData.IsExplicit_editable = true;
                    ROICData.IsHistorical_editable = true;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF1;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    ROICDatasList.Add(ROICData);

                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region DCF2
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "Millions U.S. Dollars";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "";
                    ROICFiling.StatementType = "DCF2";

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "DCF";
                    ROICData.Sequence = 1;
                    ROICData.IsExplicit_editable = true;
                    ROICData.IsHistorical_editable = true;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF2;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    foreach (ROICValuesViewModel ROICitem in ValuesList)
                    {
                        ROICValue = new ROICValuesViewModel();
                        ROICValue.Year = ROICitem.Year;
                        ROICValue.Id = 0;
                        ROICValue.Value = null;
                        ROICData.ROICValuesVM.Add(ROICValue);
                    }
                    foreach (ROIC_ExplicitValuesViewModel ROICitem in explicitValuesList)
                    {
                        ROICexplicitValue = new ROIC_ExplicitValuesViewModel();
                        ROICexplicitValue.Year = ROICitem.Year;
                        ROICexplicitValue.Id = 0;
                        ROICexplicitValue.Value = null;
                        ROICData.ROIC_ExplicitValuesVM.Add(ROICexplicitValue);
                    }
                    ROICDatasList.Add(ROICData);

                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                    #region DCF3
                    ROICDatasList = new List<ROICDatasViewModel>();
                    ROICFiling = new ROICFilingsViewModel();
                    ROICFiling.CompanyName = "";
                    ROICFiling.Unit = "";
                    ROICFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    ROICFiling.ReportName = "";
                    ROICFiling.StatementType = "DCF3";

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "PV of FCF During Explicit Forecast Period";
                    ROICData.Sequence = 1;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Base for Terminal Value";
                    ROICData.Sequence = 2;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "PV of Terminal Value";
                    ROICData.Sequence = 3;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = false;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    ROICDatasList.Add(ROICData);

                    ROICData = new ROICDatasViewModel();
                    ROICData.LineItem = "Total Value of Operations";
                    ROICData.Sequence = 4;
                    ROICData.IsExplicit_editable = false;
                    ROICData.IsHistorical_editable = false;
                    ROICData.IsParentItem = false;
                    ROICData.IsTally = true;
                    ROICData.Category = "";
                    ROICData.InitialSetupId = InitialsetupId;
                    ROICData.StatementTypeId = (int)StatementTypeEnum.DCF3;
                    ROICData.ROICValuesVM = new List<ROICValuesViewModel>();
                    ROICData.ROIC_ExplicitValuesVM = new List<ROIC_ExplicitValuesViewModel>();
                    ROICData.DtValue = null;
                    ROICDatasList.Add(ROICData);

                    ROICFiling.ROICDatasVM = ROICDatasList;
                    ROICFilingsList.Add(ROICFiling);
                    #endregion

                }
                renderResult.StatusCode = 1;
                renderResult.Result = ROICFilingsList;
                return (ActionResult)this.Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj

                });
            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }

        [HttpPost]
        [Route("SAVE_ROIC_FCF_DCF_Data")]
        public ActionResult SAVE_ROIC_FCF_DCF_Data([FromBody] List<ROICFilingsViewModel> ROICFilingsvmList)
        {
            try
            {
                if (ROICFilingsvmList != null && ROICFilingsvmList.Count > 0)
                {
                    long? initialSetupId = 0;
                    foreach (ROICFilingsViewModel ROICFilingsObj in ROICFilingsvmList)
                    {
                        if (ROICFilingsObj.StatementType.ToUpper().Contains("DCF")) //Only last 3 tables (DCF) Save condition
                        {
                            initialSetupId = ROICFilingsObj.ROICDatasVM.First().InitialSetupId != null ? ROICFilingsObj.ROICDatasVM.First().InitialSetupId : 0;
                            if (ROICFilingsObj.ROICDatasVM != null && ROICFilingsObj.ROICDatasVM.Count > 0)
                            {
                                foreach (ROICDatasViewModel ROICDatasVMObj in ROICFilingsObj.ROICDatasVM)
                                {
                                    ROICDatas tblROICDatasObj = new ROICDatas();

                                    // map ROICDatasViewModel to ROICDatas
                                    tblROICDatasObj = mapper.Map<ROICDatasViewModel, ROICDatas>(ROICDatasVMObj);

                                    // Explicit Values FOR DCF2
                                    if (ROICFilingsObj.StatementType == "DCF2")
                                    {
                                        if (ROICDatasVMObj.ROIC_ExplicitValuesVM != null && ROICDatasVMObj.ROIC_ExplicitValuesVM.Count > 0)
                                        {
                                            tblROICDatasObj.ROIC_ExplicitValues = new List<ROIC_ExplicitValues>();
                                            foreach (ROIC_ExplicitValuesViewModel ROICValues in ROICDatasVMObj.ROIC_ExplicitValuesVM)
                                            {
                                                // map ROIC_EXPViewModel to ROIC_EXPValues
                                                ROIC_ExplicitValues ExplicitValue = mapper.Map<ROIC_ExplicitValuesViewModel, ROIC_ExplicitValues>(ROICValues);
                                                tblROICDatasObj.ROIC_ExplicitValues.Add(ExplicitValue);
                                            }
                                        }
                                    }

                                    if (tblROICDatasObj.Id == 0)
                                    {
                                        //Save Code
                                        iROICDatas.Add(tblROICDatasObj);
                                        iROICDatas.Commit();
                                    }
                                    else
                                    {
                                        //Update Code
                                        iROICDatas.Update(tblROICDatasObj);
                                        iROICDatas.Commit();
                                    }

                                }
                            }
                        }
                    }

                    return Ok(new { message = "Data Saved Successfully", status = 200, result = true });
                }
                else
                {
                    return BadRequest(new { message = "No data found to save", status = 200, result = false });
                }

            }
            catch (Exception ss)
            {
                return BadRequest(Convert.ToString(ss.Message));
            }

        }
        #endregion
               
        #region Nonoperating Assets and NonEquity cla
        [HttpGet]
        [Route("GetAssetsEquityData/{UserId}")]
        public ActionResult GetAssetsEquityData(long UserId)
        {
            AssetsEquityResult renderResult = new AssetsEquityResult();
            List<AssetsEquityFilingsViewModel> AssetsEquityFilingsList = new List<AssetsEquityFilingsViewModel>();
            List<AssetsEquityDatasViewModel> AssetsEquityDatasList = new List<AssetsEquityDatasViewModel>();
            AssetsEquityFilingsViewModel AssetsEquityFiling = new AssetsEquityFilingsViewModel();
            try
            {
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                long? InitialsetupId = null;
                if (InitialSetup_IValuationObj != null)
                {
                    InitialsetupId = InitialSetup_IValuationObj.Id;
                }
                List<AssetsEquityDatas> tblAssetsEquityListObj = InitialSetup_IValuationObj != null ? iAssetsEquityDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList() : null;
                if (tblAssetsEquityListObj != null && tblAssetsEquityListObj.Count > 0)
                {
                    //Bind the Saved AssetsEquity DATA 
                }
                else
                {
                    List<AssetsEquityDatasViewModel> AssetsEquityDatasVMList = new List<AssetsEquityDatasViewModel>();
                    AssetsEquityDatasViewModel AssetsEquityData = new AssetsEquityDatasViewModel();
                    List<FilingsTable> filingsList = new List<FilingsTable>();
                    #region Non-Operating Assets

                    AssetsEquityFiling = new AssetsEquityFilingsViewModel();
                    AssetsEquityFiling.CompanyName = "";
                    AssetsEquityFiling.Unit = "";
                    AssetsEquityFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    AssetsEquityFiling.ReportName = "Non-Operating Assets";
                    AssetsEquityFiling.StatementType = "Non-Operating Assets";

                    AssetsEquityData.LineItem = "Excess Cash";
                    AssetsEquityData.Sequence = AssetsEquityDatasList != null ? AssetsEquityDatasList.Count + 1 : 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Markeatable / Tradable Securities";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Nonconsolidated Subsidiaries";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Other Equity Investments";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Tax loss carry forwards (or) Net operating losses (NOLs)";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Prepaid and Intangible Pension Assets";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Excess Real Estate";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Discontinued Operations";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Customer Financing Arms";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityFiling.AssetsEquityDatasVM = AssetsEquityDatasList;
                    AssetsEquityFilingsList.Add(AssetsEquityFiling);
                    #endregion

                    #region Non-Equity Claims
                    AssetsEquityDatasList = new List<AssetsEquityDatasViewModel>();
                    AssetsEquityFiling = new AssetsEquityFilingsViewModel();
                    AssetsEquityFiling.CompanyName = "";
                    AssetsEquityFiling.Unit = "";
                    AssetsEquityFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                    AssetsEquityFiling.ReportName = "Non-Equity Claims";
                    AssetsEquityFiling.StatementType = "Non-Equity Claims";

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Debt";
                    AssetsEquityData.Sequence = AssetsEquityDatasList != null ? AssetsEquityDatasList.Count + 1 : 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = true;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Short-Term Debt";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Long-Term Debt";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Debt Equivalents";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = true;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Operating Leases";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Securitized Receivables";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Long Term Operating Provisions - Plant Decommissioning";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Long Term Operating Provisions - Unfunded Retirement Plans";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Non-Operating Provisions - Restucturing Charges";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Hybrid Securities";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = true;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Convertible Debt";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Convertible Preferred Stock";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Employee Stock Options";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Minority Interest";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = true;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Minority Interest 1";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityData = new AssetsEquityDatasViewModel();
                    AssetsEquityData.LineItem = "Minority Interest 2";
                    AssetsEquityData.Sequence = AssetsEquityDatasList.Count + 1;
                    AssetsEquityData.IsExplicit_editable = false;
                    AssetsEquityData.IsHistorical_editable = false;
                    AssetsEquityData.IsParentItem = false;
                    AssetsEquityData.IsTally = false;
                    AssetsEquityData.Category = "";
                    AssetsEquityData.InitialSetupId = InitialsetupId;
                    AssetsEquityData.StatementTypeId = (int)StatementTypeEnum.NonOperatingAssets;
                    AssetsEquityDatasList.Add(AssetsEquityData);

                    AssetsEquityFiling.AssetsEquityDatasVM = AssetsEquityDatasList;
                    AssetsEquityFilingsList.Add(AssetsEquityFiling);
                    #endregion
                    renderResult.StatusCode = 1;
                    renderResult.Result = AssetsEquityFilingsList;
                }
                return (ActionResult)this.Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj

                });

            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }
        #endregion

        #region Valuation Summary
        [HttpGet]
        [Route("GetValuationData/{UserId}")]
        public ActionResult GetValuationData(long UserId)
        {
            ValuationResult renderResult = new ValuationResult();
            List<ValuationFilingsViewModel> ValuationFilingsList = new List<ValuationFilingsViewModel>();
            List<ValuationDatasViewModel> ValuationDatasList = new List<ValuationDatasViewModel>();
            ValuationFilingsViewModel ValuationFiling = new ValuationFilingsViewModel();
            // InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
             
             InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation
                .FindBy(x => x.UserId == UserId && x.IsActive == true)
                .OrderByDescending(x => x.Id)
                .FirstOrDefault();

                if (InitialSetup_IValuationObj == null)
                {
                    // Handle the case when no record is found
                    return NotFound("No active InitialSetup_IValuation found for the given UserId.");
                }



            long? InitialsetupId = InitialSetup_IValuationObj.Id;
            // if (InitialSetup_IValuationObj != null)
            // {
            //     InitialsetupId = InitialSetup_IValuationObj.Id;
            // }
            try
            {
                List<ValuationDatas> tblValuationListObj = InitialSetup_IValuationObj != null ? iValuationDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList() : null;

                List<ValuationDatasViewModel> ValuationDatasVMList = new List<ValuationDatasViewModel>();
                ValuationDatasViewModel ValuationData = new ValuationDatasViewModel();
                ValuationFiling = new ValuationFilingsViewModel();
                ValuationFiling.CompanyName = "";
                ValuationFiling.Unit = "Millions U.S. Dollars";
                ValuationFiling.CIK = InitialSetup_IValuationObj != null ? InitialSetup_IValuationObj.CIKNumber : null;
                ValuationFiling.ReportName = "Valuation Summary";
                ValuationFiling.StatementType = "Valuation Summary";
                double EnterpriseValue = 0;
                double EquityValue = 0;
                var ROIC_TotValueOfOperation = iROICDatas.GetSingle(x => x.LineItem == "Total Value of Operations" && x.InitialSetupId == InitialsetupId);

                ValuationData.LineItem = "Value of Operations";
                ValuationData.Sequence = ValuationDatasList != null ? ValuationDatasList.Count + 1 : 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = ROIC_TotValueOfOperation != null && !string.IsNullOrEmpty(ROIC_TotValueOfOperation.DtValue) ? ROIC_TotValueOfOperation.DtValue : null;
                EnterpriseValue = EnterpriseValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);

                var ForcastDT_ValueOfExcessCash = iForcastRatioDatas.GetSingle(x => x.LineItem.ToUpper().Contains("EXCESS CASH") && x.InitialSetupId == InitialsetupId);
                var ForcastValue_ValueOfExcessCash = ForcastDT_ValueOfExcessCash != null && InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.YearTo != null ? iForcastRatioValues.GetSingle(x => x.ForcastRatioDatasId == ForcastDT_ValueOfExcessCash.Id && x.Year == InitialSetup_IValuationObj.YearTo.ToString()) : null;
                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Value of Excess Cash";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = ForcastValue_ValueOfExcessCash != null && !string.IsNullOrEmpty(ForcastValue_ValueOfExcessCash.Value) ? ForcastValue_ValueOfExcessCash.Value : null;
                EnterpriseValue = EnterpriseValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);

                var ReorganizedDT_LongTermInvestment = iReorganizedDatas.GetSingle(x => x.LineItem == "Nonconsolidated Investments" && x.InitialSetupId == InitialsetupId);
                var ReorganizedVAL_LongTermInvestment = ReorganizedDT_LongTermInvestment != null && InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.YearTo != null ? iReorganizedValues.GetSingle(x => x.ReorganizedDatasId == ReorganizedDT_LongTermInvestment.Id && x.Year == InitialSetup_IValuationObj.YearTo.ToString()) : null;

                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Value of Long-Term Investments";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = ReorganizedVAL_LongTermInvestment != null && !string.IsNullOrEmpty(ReorganizedVAL_LongTermInvestment.Value) ? ReorganizedVAL_LongTermInvestment.Value : null;
                EnterpriseValue = EnterpriseValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);

                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Value of Tax Loss Carry-Forwards";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = null;
                EnterpriseValue = EnterpriseValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);

                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Enterprise Value";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = true;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = EnterpriseValue.ToString("0.");
                EquityValue = EquityValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);


                double valueOfDebt = 0;
                var IntegratedDatasList = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialsetupId && x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet).ToList();
                var DEBTIntegratedDatasList = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.FindAll(x => x.LineItem.ToUpper().Contains("DEBT")).ToList() : null;
                List<IntegratedValues> Debt_ValuesList = DEBTIntegratedDatasList != null && DEBTIntegratedDatasList.Count > 0 && InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.YearTo != null ? iIntegratedValues.FindBy(x => DEBTIntegratedDatasList.Any(m => m.Id == x.IntegratedDatasId && x.Year == InitialSetup_IValuationObj.YearTo.ToString())).ToList() : null;

                if (Debt_ValuesList != null && Debt_ValuesList.Count > 0)
                {
                    foreach (var item in Debt_ValuesList)
                    {
                        valueOfDebt = valueOfDebt + Convert.ToDouble(item.Value);
                    }
                }

                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Value of Debt";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                valueOfDebt = -1 * valueOfDebt;
                ValuationData.DtValue = valueOfDebt.ToString("0.");
                EquityValue = EquityValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);

                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Value of Capitalized Operating Leases";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = "0";
                EquityValue = EquityValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);



                double valueOfLiblity = 0;
                List<IntegratedDatas> LiblityIntegratedDatasList = new List<IntegratedDatas>();
                bool isTotalAsset = false;
                if (IntegratedDatasList != null && IntegratedDatasList.Count > 0)
                {
                    foreach (IntegratedDatas integratedData in IntegratedDatasList)
                    {
                        if (isTotalAsset == true && integratedData.Category == "Non-Operating")
                        {
                            LiblityIntegratedDatasList.Add(integratedData);
                        }
                        if (integratedData.LineItem.ToUpper().Contains("TOTAL ASSETS"))
                        {
                            isTotalAsset = true;
                        }
                        else if (integratedData.LineItem.ToUpper().Contains("TOTAL LIABILITIES"))
                        {
                            break;
                        }
                    }
                }
                //var LiblityIntegratedDatasList = IntegratedDatasList != null && IntegratedDatasList.Count > 0 ? IntegratedDatasList.FindAll(x => x.LineItem.ToUpper().Contains("LIABILITIES HELD FOR SALE") || x.LineItem.ToUpper().Contains("LIABILITY HELD FOR SALE") || x.LineItem.ToUpper().Contains("OTHER LONG-TERM LIABILITIES") || x.LineItem.ToUpper().Contains("OTHER NON-CURRENT LIABILITIES") || x.LineItem.ToUpper().Contains("OTHER NONCURRENT LIABILITIES") || x.LineItem.ToUpper().Contains("OTHER LIABILITIES") || x.LineItem.ToUpper().Contains("OTHER LONG-TERM OBLIGATIONS") || x.LineItem.ToUpper().Contains("LONG-TERM OTHER LIABILITIES")).ToList() : null;
                List<IntegratedValues> Liblity_ValuesList = LiblityIntegratedDatasList != null && LiblityIntegratedDatasList.Count > 0 && InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.YearTo != null ? iIntegratedValues.FindBy(x => LiblityIntegratedDatasList.Any(m => m.Id == x.IntegratedDatasId && x.Year == InitialSetup_IValuationObj.YearTo.ToString())).ToList() : null;
                if (Liblity_ValuesList != null && Liblity_ValuesList.Count > 0)
                {
                    foreach (var item in Liblity_ValuesList)
                    {
                        valueOfLiblity = valueOfLiblity + Convert.ToDouble(item.Value);
                    }
                }
                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Value of Other Debt Equivalents";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                valueOfLiblity = -1 * valueOfLiblity;
                ValuationData.DtValue = valueOfLiblity.ToString("0.");
                EquityValue = EquityValue + Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);

                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Equity Value";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = true;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = EquityValue.ToString("0.");
                ValuationDatasList.Add(ValuationData);

                //var HistForcastData = iForcastRatioDatas.GetSingle(x => x.LineItem.Contains("Weighted Average Shares Outstanding - Basic") && x.InitialSetupId == InitialsetupId);
                //var HistForcastvalue = HistForcastData != null && InitialSetup_IValuationObj != null && InitialSetup_IValuationObj.YearTo != null ? iForcastRatioValues.GetSingle(x => x.ForcastRatioDatasId == HistForcastData.Id && x.Year == InitialSetup_IValuationObj.YearTo.ToString()) : null;
                var PayOutPolicyLatestYear = InitialSetup_IValuationObj != null ? iPayoutPolicy_IValuation.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.Year== Convert.ToInt32(InitialSetup_IValuationObj.YearTo)) : null;

                double NOSO = 0;
                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Number of Shares Outstanding (M)";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = false;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;
                ValuationData.DtValue = PayOutPolicyLatestYear != null  && !string.IsNullOrEmpty(PayOutPolicyLatestYear.WeightedAvgShares_Basic) ? PayOutPolicyLatestYear.WeightedAvgShares_Basic : null;
                NOSO = Convert.ToDouble(ValuationData.DtValue);
                ValuationDatasList.Add(ValuationData);

                double stkprice = 0;
                ValuationData = new ValuationDatasViewModel();
                ValuationData.LineItem = "Stock Price ($)";
                ValuationData.Sequence = ValuationDatasList.Count + 1;
                ValuationData.IsExplicit_editable = false;
                ValuationData.IsHistorical_editable = false;
                ValuationData.IsParentItem = false;
                ValuationData.IsTally = true;
                ValuationData.Category = "";
                ValuationData.InitialSetupId = InitialsetupId;
                ValuationData.StatementTypeId = (int)StatementTypeEnum.Valuation;

                stkprice = NOSO != 0 ? (EquityValue) / NOSO : 0;
                ValuationData.DtValue = stkprice.ToString("0.##");
                ValuationDatasList.Add(ValuationData);

                ValuationFiling.ValuationDatasVM = ValuationDatasList;
                ValuationFilingsList.Add(ValuationFiling);

                // Save Valuation data in ReorganizedDatas  Values and Exp_Values
                if (ValuationDatasList != null && ValuationDatasList.Count > 0)
                {
                    try
                    {
                        List<ValuationDatas> tblValuationDatasList = new List<ValuationDatas>();
                        if (tblValuationListObj != null && tblValuationListObj.Count > 0)
                        {
                            foreach (var item in tblValuationListObj)
                            {
                                item.DtValue = ValuationDatasList.Find(x => x.LineItem == item.LineItem) != null ? ValuationDatasList.Find(x => x.LineItem == item.LineItem).DtValue : null;
                            }
                            iValuationDatas.UpdatedMany(tblValuationListObj);
                            iValuationDatas.Commit();
                        }
                        else
                        {
                            foreach (var item in ValuationDatasList)
                            {
                                ValuationDatas ReDatasObj = new ValuationDatas();
                                ReDatasObj.Id = 0;
                                ReDatasObj.Category = item.Category;
                                ReDatasObj.Sequence = item.Sequence;
                                ReDatasObj.LineItem = item.LineItem;
                                ReDatasObj.IsTally = item.IsTally;
                                ReDatasObj.IsParentItem = item.IsParentItem;
                                ReDatasObj.StatementTypeId = (int)StatementTypeEnum.Valuation;
                                ReDatasObj.InitialSetupId = InitialSetup_IValuationObj.Id;
                                ReDatasObj.DtValue = item.DtValue;
                                tblValuationDatasList.Add(ReDatasObj);
                            }
                            iValuationDatas.AddMany(tblValuationDatasList);
                            iValuationDatas.Commit();
                        }

                    }
                    catch (Exception ex)
                    {
                        renderResult.StatusCode = 1;
                        renderResult.Message = "Valuation DATA SAVING ISSUE";
                        renderResult.Result = ValuationFilingsList;
                    }
                }
                /////////////////////////////////////////////////////////////

                renderResult.StatusCode = 1;
                renderResult.Result = ValuationFilingsList;
                return Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj

                });
            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }
        #endregion

        #region Sensitivity Analysis
        [HttpGet]
        [Route("GetSensitivity/{UserId}")]
        public ActionResult GetSensitivity(long UserId)
        {
            List<KeyValueViewModel> KeyValueViewModelList = new List<KeyValueViewModel>();
            KeyValueViewModel KeyValueViewModelobj = new KeyValueViewModel();
            IVSensitivityResult renderResult = new IVSensitivityResult();
            IVSensitivityViewModel IVSensitivityViewModelobj = new IVSensitivityViewModel();

            InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();
            long? InitialsetupId = null;
            if (InitialSetup_IValuationObj == null)
            {
                return NotFound("No active valuation setup found for the given UserId.");
            }

            InitialsetupId = InitialSetup_IValuationObj.Id;


       
            try
            {
                List<IVSensitivity> tblIVSensitivityListObj = InitialSetup_IValuationObj != null ? iIVSensitivity.FindBy(x => x.InitialSetupId == InitialsetupId).ToList() : null;
                if (tblIVSensitivityListObj != null && tblIVSensitivityListObj.Count > 0)
                {
                    //Bind the Saved Sensitivity DATA 
                }
                else
                {
                    double stockPrice = InitialSetup_IValuationObj != null && iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)") != null && !string.IsNullOrEmpty(iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)").DtValue) ? Convert.ToDouble(iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)").DtValue) : 0;

                    var AllForcastList = iForcastRatioDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList();
                    var AllForcastExpvalueList = AllForcastList != null && AllForcastList.Count > 0 ? iForcastRatio_ExplicitValues.FindBy(t => AllForcastList.Any(m => m.Id == t.ForcastRatioDatasId)).ToList() : null;

                    var PPEForcastData = AllForcastList != null && AllForcastList.Count > 0 ? AllForcastList.Find(x => x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())) : null;
                    var PPEForcastExpvalueList = PPEForcastData != null && AllForcastExpvalueList != null && AllForcastExpvalueList.Count > 0 ? AllForcastExpvalueList.FindAll(x => x.ForcastRatioDatasId == PPEForcastData.Id) : null;
                    var PPEForcastExpvalue = PPEForcastExpvalueList != null && PPEForcastExpvalueList.Count > 0 ? PPEForcastExpvalueList.Find(x => x.Year == Convert.ToString(InitialSetup_IValuationObj.YearTo + 1)) : null;

                    var COGSForcastData = AllForcastList != null && AllForcastList.Count > 0 ? AllForcastList.Find(x => x.LineItem.ToLower().Contains(("COGS % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Goods Sold % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Revenue % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Sales % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Products Sold % of Sales").ToLower())) : null;
                    var COGSForcastExpvalueList = COGSForcastData != null && AllForcastExpvalueList != null && AllForcastExpvalueList.Count > 0 ? AllForcastExpvalueList.FindAll(x => x.ForcastRatioDatasId == COGSForcastData.Id) : null;
                    var COGSForcastExpvalue = COGSForcastExpvalueList != null && COGSForcastExpvalueList.Count > 0 ? COGSForcastExpvalueList.Find(x => x.Year == Convert.ToString(InitialSetup_IValuationObj.YearTo + 1)) : null;

                    var RDForcastData = AllForcastList != null && AllForcastList.Count > 0 ? AllForcastList.Find(x => x.LineItem.ToLower().Contains(("Research and Development % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Product Development % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Research Development and Engineering % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("R&D % of Sales").ToLower())) : null;
                    var RDForcastExpvalueList = RDForcastData != null && AllForcastExpvalueList != null && AllForcastExpvalueList.Count > 0 ? AllForcastExpvalueList.FindAll(x => x.ForcastRatioDatasId == RDForcastData.Id) : null;
                    var RDForcastExpvalue = RDForcastExpvalueList != null && RDForcastExpvalueList.Count > 0 ? RDForcastExpvalueList.Find(x => x.Year == Convert.ToString(InitialSetup_IValuationObj.YearTo + 1)) : null;

                    var SGAForcastData = AllForcastList != null && AllForcastList.Count > 0 ? AllForcastList.Find(x => x.LineItem.ToLower().Contains(("SGA % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("SG&A % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Selling General and Administrative % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Sales General and Administrative % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("General and Administrative % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Sales Marketing General and Administrative % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Sales and Administrative % of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Marketing, general and administrative % of Sales").ToLower())) : null;
                    var SGAForcastExpvalueList = SGAForcastData != null && AllForcastExpvalueList != null && AllForcastExpvalueList.Count > 0 ? AllForcastExpvalueList.FindAll(x => x.ForcastRatioDatasId == SGAForcastData.Id) : null;
                    var SGAForcastExpvalue = SGAForcastExpvalueList != null && SGAForcastExpvalueList.Count > 0 ? SGAForcastExpvalueList.Find(x => x.Year == Convert.ToString(InitialSetup_IValuationObj.YearTo + 1)) : null;

                    var AllROICList = iROICDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList();
                    var AllValuationList = iValuationDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList();
                    var DCF1List = AllROICList != null && AllROICList.Count > 0 ? AllROICList.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.DCF1).ToList() : null;

                    List<ReorganizedDatas> ReorganizedDataListTillEBITA = new List<ReorganizedDatas>();
                    var ReorganizedNOPLATList = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialsetupId && x.StatementTypeId == (int)StatementTypeEnum.NoplatCalculations).ToList();
                    if (ReorganizedNOPLATList != null && ReorganizedNOPLATList.Count > 0)
                    {
                        foreach (ReorganizedDatas item in ReorganizedNOPLATList)
                        {
                            if (item.LineItem.ToUpper() == "EBITA")
                            {
                                break;
                            }
                            ReorganizedDataListTillEBITA.Add(item);
                        }
                    }
                    var ReorganizedExpvalueListTillEBITA = ReorganizedDataListTillEBITA != null && ReorganizedDataListTillEBITA.Count > 0 ? iReorganized_ExplicitValues.FindBy(t => ReorganizedDataListTillEBITA.Any(m => m.Id == t.ReorganizedDatasId)).ToList() : null;
                    var DepriciationReorganizedData = ReorganizedDataListTillEBITA != null && ReorganizedDataListTillEBITA.Count > 0 ? ReorganizedDataListTillEBITA.Find(x => x.LineItem.ToLower().Contains(("Depreciation").ToLower())) : null;
                    var DepriciationReorganizedExpvalueList = DepriciationReorganizedData != null && ReorganizedExpvalueListTillEBITA != null && ReorganizedExpvalueListTillEBITA.Count > 0 ? ReorganizedExpvalueListTillEBITA.FindAll(x => x.ReorganizedDatasId == DepriciationReorganizedData.Id) : null;

                    var COGSReorganizedData = ReorganizedDataListTillEBITA != null && ReorganizedDataListTillEBITA.Count > 0 ? ReorganizedDataListTillEBITA.Find(x => x.LineItem.ToLower().Contains(("COGS").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Goods Sold").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Revenue").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Sales").ToLower()) || x.LineItem.ToLower().Contains(("Cost of Products Sold").ToLower())) : null;
                    var COGSReorganizedExpvalueList = COGSReorganizedData != null && ReorganizedExpvalueListTillEBITA != null && ReorganizedExpvalueListTillEBITA.Count > 0 ? ReorganizedExpvalueListTillEBITA.FindAll(x => x.ReorganizedDatasId == COGSReorganizedData.Id) : null;

                    var RDReorganizedData = ReorganizedDataListTillEBITA != null && ReorganizedDataListTillEBITA.Count > 0 ? ReorganizedDataListTillEBITA.Find(x => x.LineItem.ToLower().Contains(("Research and Development").ToLower()) || x.LineItem.ToLower().Contains(("Product Development").ToLower()) || x.LineItem.ToLower().Contains(("Research Development and Engineering").ToLower()) || x.LineItem.ToLower().Contains(("R&D").ToLower())) : null;
                    var RDReorganizedExpvalueList = RDReorganizedData != null && ReorganizedExpvalueListTillEBITA != null && ReorganizedExpvalueListTillEBITA.Count > 0 ? ReorganizedExpvalueListTillEBITA.FindAll(x => x.ReorganizedDatasId == RDReorganizedData.Id) : null;

                    var SGAReorganizedData = ReorganizedDataListTillEBITA != null && ReorganizedDataListTillEBITA.Count > 0 ? ReorganizedDataListTillEBITA.Find(x => x.LineItem.ToLower().Contains(("SGA").ToLower()) || x.LineItem.ToLower().Contains(("SG&A").ToLower()) || x.LineItem.ToLower().Contains(("Selling General and Administrative").ToLower()) || x.LineItem.ToLower().Contains(("Sales General and Administrative").ToLower()) || x.LineItem.ToLower().Contains(("General and Administrative").ToLower()) || x.LineItem.ToLower().Contains(("Sales Marketing General and Administrative").ToLower()) || x.LineItem.ToLower().Contains(("Sales and Administrative").ToLower())) : null;
                    var SGAReorganizedExpvalueList = SGAReorganizedData != null && ReorganizedExpvalueListTillEBITA != null && ReorganizedExpvalueListTillEBITA.Count > 0 ? ReorganizedExpvalueListTillEBITA.FindAll(x => x.ReorganizedDatasId == SGAReorganizedData.Id) : null;

                    double PVofFCF = 0;
                    var DCF2 = AllROICList != null && AllROICList.Count > 0 ? AllROICList.Find(x => x.StatementTypeId == (int)StatementTypeEnum.DCF2) : null;
                    var DCF2ExpValueList = DCF2 != null ? iROIC_ExplicitValues.FindBy(x => x.ROICDatasId == DCF2.Id).ToList() : null;

                    if (DCF2ExpValueList != null && DCF2ExpValueList.Count > 0)
                    {
                        foreach (var item in DCF2ExpValueList)
                        {
                            PVofFCF = PVofFCF + (!string.IsNullOrEmpty(item.Value) ? Convert.ToDouble(item.Value) : 0);
                        }
                    }

                    var FCFData = AllROICList != null && AllROICList.Count > 0 ? AllROICList.Find(x => x.LineItem == "Free Cash Flow (FCF)") : null;
                    var FCFExpValueList = FCFData != null ? iROIC_ExplicitValues.FindBy(x => x.ROICDatasId == FCFData.Id).ToList() : null;
                    //Remove terminal 
                    if (FCFExpValueList != null && FCFExpValueList.Count > 0)
                    {
                        FCFExpValueList.RemoveAt(FCFExpValueList.Count - 1);
                    }
                    /////

                    double NOPLATTerminal = 0;
                    var NOPLATData = AllROICList != null && AllROICList.Count > 0 ? AllROICList.Find(x => x.LineItem == "NOPLAT") : null;
                    var NOPLATExpValueList = NOPLATData != null ? iROIC_ExplicitValues.FindBy(x => x.ROICDatasId == NOPLATData.Id).ToList() : null;
                    NOPLATTerminal = NOPLATExpValueList != null && NOPLATExpValueList.Count > 0 ? Convert.ToDouble(NOPLATExpValueList.First(x => x.Year == Convert.ToString(InitialSetup_IValuationObj.YearTo + 1)).Value) : 0;

                    double Disrate = DCF1List != null && DCF1List.Count > 0 && DCF1List.Find(x => x.Sequence == 1) != null && !string.IsNullOrEmpty(DCF1List.Find(x => x.Sequence == 1).DtValue) ? Convert.ToDouble(DCF1List.Find(x => x.Sequence == 1).DtValue) : 0;
                    double GDTP = DCF1List != null && DCF1List.Count > 0 && DCF1List.Find(x => x.Sequence == 2) != null && !string.IsNullOrEmpty(DCF1List.Find(x => x.Sequence == 2).DtValue) ? Convert.ToDouble(DCF1List.Find(x => x.Sequence == 2).DtValue) : 0;
                    double RONIC = DCF1List != null && DCF1List.Count > 0 && DCF1List.Find(x => x.Sequence == 3) != null && !string.IsNullOrEmpty(DCF1List.Find(x => x.Sequence == 3).DtValue) ? Convert.ToDouble(DCF1List.Find(x => x.Sequence == 3).DtValue) : 0;
                    var IVSensitivityDataList = Enum.GetNames(typeof(IVSensitivityEnum));
                    List<string> keyList = new List<string>();
                    List<string> ValueList = new List<string>();
                    double val = 0;
                    foreach (var item in IVSensitivityDataList)
                    {
                        KeyValueViewModelobj = new KeyValueViewModel();
                        keyList = new List<string>();
                        ValueList = new List<string>();

                        if (item == "WACC")
                        {
                            KeyValueViewModelobj.Name = "WACC";
                            //////key Value
                            var ROICData = DCF1List != null && DCF1List.Count > 0 ? DCF1List.Find(x => x.Sequence == 1) : null;
                            val = ROICData != null && !string.IsNullOrEmpty(ROICData.DtValue) ? Convert.ToDouble(ROICData.DtValue) : 0;
                            keyList = GetKeyList(val);

                            ValueList = keyList != null && keyList.Count > 0 ? GetWACCValueList(keyList, FCFExpValueList, NOPLATTerminal, GDTP, RONIC, InitialSetup_IValuationObj.YearTo + 1, InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount, AllValuationList, stockPrice) : null;
                            KeyValueViewModelobj.Key = keyList;
                            KeyValueViewModelobj.Value = ValueList;
                            /////////
                        }
                        else if (item == "TGR")
                        {
                            KeyValueViewModelobj.Name = "Terminal Growth Rate";
                            //////key Value
                            var ROICData = DCF1List != null && DCF1List.Count > 0 ? DCF1List.Find(x => x.Sequence == 2) : null;
                            val = ROICData != null && !string.IsNullOrEmpty(ROICData.DtValue) ? Convert.ToDouble(ROICData.DtValue) : 0;
                            keyList = GetKeyList(val);

                            ValueList = keyList != null && keyList.Count > 0 ? GetTGRValueList(keyList, PVofFCF, NOPLATTerminal, Disrate, RONIC, InitialSetup_IValuationObj.YearTo + 1, InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount, AllValuationList, stockPrice) : null;
                            KeyValueViewModelobj.Key = keyList;
                            KeyValueViewModelobj.Value = ValueList;
                            /////////
                        }
                        else if (item == "RONIC")
                        {
                            KeyValueViewModelobj.Name = "RONIC";
                            //////key Value
                            var ROICData = DCF1List != null && DCF1List.Count > 0 ? DCF1List.Find(x => x.Sequence == 3) : null;
                            val = ROICData != null && !string.IsNullOrEmpty(ROICData.DtValue) ? Convert.ToDouble(ROICData.DtValue) : 0;
                            keyList = GetKeyList(val);

                            ValueList = keyList != null && keyList.Count > 0 ? GetRONICValueList(keyList, PVofFCF, NOPLATTerminal, Disrate, GDTP, InitialSetup_IValuationObj.YearTo + 1, InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount, AllValuationList, stockPrice) : null;
                            KeyValueViewModelobj.Key = keyList;
                            KeyValueViewModelobj.Value = ValueList;
                            /////////
                        }
                        else if (item == "NetPPE")
                        {
                            KeyValueViewModelobj.Name = "Net PPE % of Sales";
                            //////key Value
                            val = PPEForcastExpvalue != null && !string.IsNullOrEmpty(PPEForcastExpvalue.Value) ? Convert.ToDouble(PPEForcastExpvalue.Value) : 0;
                            keyList = GetKeyList(val);
                            ValueList = keyList != null && keyList.Count > 0 ? GetPPEValueList(keyList, InitialSetup_IValuationObj, NOPLATExpValueList, DepriciationReorganizedExpvalueList, FCFExpValueList, Disrate, GDTP, RONIC, InitialSetup_IValuationObj.YearTo + 1, InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount, AllValuationList) : null;
                            KeyValueViewModelobj.Key = keyList;
                            KeyValueViewModelobj.Value = ValueList;
                            ////////////

                        }
                        else if (item == "COGS")
                        {
                            KeyValueViewModelobj.Name = "COGS % of Sales";
                            //////key Value
                            val = COGSForcastExpvalue != null && !string.IsNullOrEmpty(COGSForcastExpvalue.Value) ? Convert.ToDouble(COGSForcastExpvalue.Value) : 0;
                            keyList = GetKeyList(val);
                            ValueList = keyList != null && keyList.Count > 0 ? GetValueList(keyList, InitialSetup_IValuationObj, NOPLATExpValueList, COGSReorganizedExpvalueList, DepriciationReorganizedExpvalueList, FCFExpValueList, Disrate, GDTP, RONIC, InitialSetup_IValuationObj.YearTo + 1, InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount, AllValuationList) : null;
                            KeyValueViewModelobj.Key = keyList;
                            KeyValueViewModelobj.Value = ValueList;
                            ////////////
                        }
                        else if (item == "RandD")
                        {
                            KeyValueViewModelobj.Name = "R&D % of Sales";
                            //////key Value
                            val = RDForcastExpvalue != null && !string.IsNullOrEmpty(RDForcastExpvalue.Value) ? Convert.ToDouble(RDForcastExpvalue.Value) : 0;
                            keyList = GetKeyList(val);
                            ValueList = keyList != null && keyList.Count > 0 ? GetValueList(keyList, InitialSetup_IValuationObj, NOPLATExpValueList, RDReorganizedExpvalueList, DepriciationReorganizedExpvalueList, FCFExpValueList, Disrate, GDTP, RONIC, InitialSetup_IValuationObj.YearTo + 1, InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount, AllValuationList) : null;

                            KeyValueViewModelobj.Key = keyList;
                            KeyValueViewModelobj.Value = ValueList;
                            ////////////
                        }
                        else if (item == "SGandA")
                        {
                            KeyValueViewModelobj.Name = "SG&A % of Sales";
                            //////key Value
                            val = SGAForcastExpvalue != null && !string.IsNullOrEmpty(SGAForcastExpvalue.Value) ? Convert.ToDouble(SGAForcastExpvalue.Value) : 0;
                            keyList = GetKeyList(val);
                            ValueList = keyList != null && keyList.Count > 0 ? GetValueList(keyList, InitialSetup_IValuationObj, NOPLATExpValueList, SGAReorganizedExpvalueList, DepriciationReorganizedExpvalueList, FCFExpValueList, Disrate, GDTP, RONIC, InitialSetup_IValuationObj.YearTo + 1, InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount, AllValuationList) : null;

                            KeyValueViewModelobj.Key = keyList;
                            KeyValueViewModelobj.Value = ValueList;
                            ////////////
                        }

                        KeyValueViewModelList.Add(KeyValueViewModelobj);
                    }
                }

                renderResult.StatusCode = 1;
                renderResult.Result = KeyValueViewModelList;
                return (ActionResult)this.Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj

                });
            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));

            }
        }

        private List<string> GetKeyList(double value)
        {
            List<string> KeyList = new List<string>();
            double min = value - (value / 2);  //50 % less
                                               //double max = value + (value / 2);  //50 % More
            double inc = value / 10;             //10 % change
            for (int i = 1; i <= 11; i++)
            {
                KeyList.Add(min.ToString("0.##"));
                min = min + inc;
            }
            return KeyList;
        }

        private List<string> GetWACCValueList(List<string> keyList, List<ROIC_ExplicitValues> FCFList, double NOPLATTerminal, double GDTP, double RONIC, int? ExpFrom, int? ExpTo, List<ValuationDatas> AllValuationList, double SavedStockprice)
        {
            List<string> valueList = new List<string>();
            List<double> DCFList = new List<double>();
            double dcFvalue = 0;
            double dcFvalueTotal = 0;
            double Baseterminalvalue = 0;
            double PVterminalvalue = 0;
            double TotValueofOperation = 0;
            double Equityvalue = 0;
            try
            {
                double valueOfExcessCash = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Excess Cash") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Excess Cash").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Excess Cash").DtValue) : 0;
                double valueOfLongInvest = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments").DtValue) : 0;
                double valueOftaxLoss = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards").DtValue) : 0;
                double valueOfDEBT = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Debt") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Debt").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Debt").DtValue) : 0;
                double valueOfCOL = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases").DtValue) : 0;
                double valueOfODE = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents").DtValue) : 0;
                double valueOfNoOfShare = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) : 0;
                double stockPrice = 0;
                string midKey = keyList[(keyList.Count - 1) / 2];
                foreach (string key in keyList)
                {

                    if (key == midKey)
                    {

                        stockPrice = SavedStockprice;
                    }

                    else
                    {
                        PVterminalvalue = 0;
                        Baseterminalvalue = 0;
                        dcFvalueTotal = 0;
                        TotValueofOperation = 0;
                        Equityvalue = 0;
                        int power = 1;
                        if (FCFList != null && FCFList.Count > 0)
                        {
                            foreach (ROIC_ExplicitValues FCF in FCFList)
                            {
                                dcFvalue = (!string.IsNullOrEmpty(FCF.Value) ? Convert.ToDouble(FCF.Value) : 0) / Math.Pow((1 + (Convert.ToDouble(key) / 100)), power);
                                power = power + 1;
                                dcFvalueTotal = dcFvalueTotal + dcFvalue;
                            }
                        }
                        Baseterminalvalue = (NOPLATTerminal * (1 - (RONIC != 0 ? GDTP / RONIC : 0))) / ((Convert.ToDouble(key) / 100) - (GDTP / 100));
                        PVterminalvalue = Baseterminalvalue / Math.Pow((1 + (Convert.ToDouble(key) / 100)), (Convert.ToUInt64(ExpTo) - Convert.ToUInt64(ExpFrom) + 1));
                        TotValueofOperation = dcFvalueTotal + PVterminalvalue;
                        Equityvalue = TotValueofOperation + valueOfExcessCash + valueOfLongInvest + valueOftaxLoss + valueOfDEBT + valueOfCOL + valueOfODE;
                        stockPrice = valueOfNoOfShare != 0 ? Equityvalue / valueOfNoOfShare : 0;
                    }
                    valueList.Add(stockPrice.ToString("0.##"));
                }
                return valueList;
            }
            catch (Exception ex)
            {
                return valueList;
            }
        }

        private List<string> GetTGRValueList(List<string> keyList, double PVofFCF, double NOPLATTerminal, double DisRate, double RONIC, int? ExpFrom, int? ExpTo, List<ValuationDatas> AllValuationList, double SavedStockprice)
        {
            List<string> valueList = new List<string>();
            double Baseterminalvalue = 0;
            double PVterminalvalue = 0;
            double TotValueofOperation = 0;
            double Equityvalue = 0;
            try
            {
                double valueOfExcessCash = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Excess Cash") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Excess Cash").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Excess Cash").DtValue) : 0;
                double valueOfLongInvest = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments").DtValue) : 0;
                double valueOftaxLoss = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards").DtValue) : 0;
                double valueOfDEBT = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Debt") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Debt").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Debt").DtValue) : 0;
                double valueOfCOL = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases").DtValue) : 0;
                double valueOfODE = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents").DtValue) : 0;
                double valueOfNoOfShare = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) : 0;
                double stockPrice = 0;
                string midKey = keyList[(keyList.Count - 1) / 2];
                foreach (string key in keyList)
                {

                    if (key == midKey)
                    {
                        stockPrice = SavedStockprice;
                    }
                    else
                    {
                        PVterminalvalue = 0;
                        Baseterminalvalue = 0;
                        //dcFvalueTotal = 0;
                        TotValueofOperation = 0;
                        Equityvalue = 0;
                        Baseterminalvalue = (NOPLATTerminal * (1 - (RONIC != 0 ? Convert.ToDouble(key) / RONIC : 0))) / ((DisRate / 100) - (Convert.ToDouble(key) / 100));
                        PVterminalvalue = Baseterminalvalue / Math.Pow((1 + (DisRate / 100)), (Convert.ToUInt64(ExpTo) - Convert.ToUInt64(ExpFrom) + 1));
                        TotValueofOperation = PVofFCF + PVterminalvalue;
                        Equityvalue = TotValueofOperation + valueOfExcessCash + valueOfLongInvest + valueOftaxLoss + valueOfDEBT + valueOfCOL + valueOfODE;
                        stockPrice = valueOfNoOfShare != 0 ? Equityvalue / valueOfNoOfShare : 0;
                    }
                    valueList.Add(stockPrice.ToString("0.##"));
                }
                return valueList;
            }
            catch (Exception ex)
            {
                return valueList;
            }
        }

        private List<string> GetRONICValueList(List<string> keyList, double PVofFCF, double NOPLATTerminal, double DisRate, double GDTP, int? ExpFrom, int? ExpTo, List<ValuationDatas> AllValuationList, double SavedStockprice)
        {
            List<string> valueList = new List<string>();
            double Baseterminalvalue = 0;
            double PVterminalvalue = 0;
            double TotValueofOperation = 0;
            double Equityvalue = 0;
            try
            {
                double valueOfExcessCash = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Excess Cash") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Excess Cash").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Excess Cash").DtValue) : 0;
                double valueOfLongInvest = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Long-Term Investments").DtValue) : 0;
                double valueOftaxLoss = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Tax Loss Carry-Forwards").DtValue) : 0;
                double valueOfDEBT = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Debt") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Debt").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Debt").DtValue) : 0;
                double valueOfCOL = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Capitalized Operating Leases").DtValue) : 0;
                double valueOfODE = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Other Debt Equivalents").DtValue) : 0;
                double valueOfNoOfShare = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) : 0;
                double stockPrice = 0;
                string midKey = keyList[(keyList.Count - 1) / 2];
                foreach (string key in keyList)
                {

                    if (key == midKey)
                    {
                        stockPrice = SavedStockprice;
                    }
                    else
                    {
                        PVterminalvalue = 0;
                        Baseterminalvalue = 0;
                        //dcFvalueTotal = 0;
                        TotValueofOperation = 0;
                        Equityvalue = 0;
                        Baseterminalvalue = (NOPLATTerminal * (1 - (GDTP / Convert.ToDouble(key)))) / ((DisRate / 100) - (GDTP / 100));
                        PVterminalvalue = Baseterminalvalue / Math.Pow((1 + (DisRate / 100)), (Convert.ToUInt64(ExpTo) - Convert.ToUInt64(ExpFrom) + 1));
                        TotValueofOperation = PVofFCF + PVterminalvalue;
                        Equityvalue = TotValueofOperation + valueOfExcessCash + valueOfLongInvest + valueOftaxLoss + valueOfDEBT + valueOfCOL + valueOfODE;
                        stockPrice = valueOfNoOfShare != 0 ? Equityvalue / valueOfNoOfShare : 0;
                    }
                    valueList.Add(stockPrice.ToString("0.##"));
                }
                return valueList;
            }
            catch (Exception ex)
            {
                return valueList;
            }
        }

        private List<string> GetPPEValueList(List<string> keyList, InitialSetup_IValuation InitialSetup_IValuationObj, List<ROIC_ExplicitValues> ConstantList, List<Reorganized_ExplicitValues> VariableList, List<ROIC_ExplicitValues> FCFExpValueList, double Discountrate, double GDTP, double RONIC, int? ExpFrom, int? ExpTo, List<ValuationDatas> AllValuationList)
        {
            List<string> valueList = new List<string>();
            double Baseterminalvalue = 0;
            double PVterminalvalue = 0;
            double TotValueofOperation = 0;
            double stockPrice = 0;
            double DCFvalueTotal = 0;
            double NOPLATTerminal = 0;
            double valueOfOP = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Operations") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Operations").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Operations").DtValue) : 0;
            double Equityvalue = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Equity Value") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Equity Value").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Equity Value").DtValue) : 0;
            double share = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) : 0;

            try
            {
                string midKey = keyList[(keyList.Count - 1) / 2];
                foreach (string key in keyList)
                {
                    List<ROIC_ExplicitValues> NOPLAT_ExpValueList = new List<ROIC_ExplicitValues>();
                    List<Reorganized_ExplicitValues> Depriciation_ExpValueList = new List<Reorganized_ExplicitValues>();
                    List<ROIC_ExplicitValues> NewFCFExpValueList = new List<ROIC_ExplicitValues>();
                    ROIC_ExplicitValues tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                    Reorganized_ExplicitValues tmpReorganized_ExplicitValues = new Reorganized_ExplicitValues();
                    List<ROIC_ExplicitValues> NewDCFExpValueList = new List<ROIC_ExplicitValues>();

                    PVterminalvalue = 0;
                    Baseterminalvalue = 0;
                    TotValueofOperation = 0;
                    stockPrice = 0;
                    DCFvalueTotal = 0;
                    NOPLATTerminal = 0;
                    double Change = Convert.ToDouble(key) - Convert.ToDouble(midKey);

                    double PercentChange = !string.IsNullOrEmpty(midKey) && midKey != "0" ? (Change * 100) / Convert.ToDouble(midKey) : 0;
                    if (Change == 0)//Find Actual Stock price
                    {
                        stockPrice = InitialSetup_IValuationObj != null && iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)") != null && !string.IsNullOrEmpty(iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)").DtValue) ? Convert.ToDouble(iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)").DtValue) : 0;
                    }
                    else //Calculate Stock price
                    {

                        foreach (ROIC_ExplicitValues item in ConstantList)
                        {
                            tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                            double removeValue = VariableList != null && VariableList.Count > 0 && VariableList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(VariableList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(VariableList.Find(x => x.Year == item.Year).Value) : 0;
                            double AddValue = removeValue + (removeValue * PercentChange / 100);
                            double NewValue = Convert.ToDouble(item.Value) - removeValue + AddValue;
                            //item.Value = NewValue.ToString("0.");
                            tmpROIC_ExplicitValues = item;
                            tmpROIC_ExplicitValues.Value = NewValue.ToString("0.");
                            NOPLAT_ExpValueList.Add(tmpROIC_ExplicitValues);
                        }
                        NOPLATTerminal = NOPLAT_ExpValueList != null && NOPLAT_ExpValueList.Count > 0 && !string.IsNullOrEmpty(NOPLAT_ExpValueList[NOPLAT_ExpValueList.Count - 1].Value) ? Convert.ToDouble(NOPLAT_ExpValueList[NOPLAT_ExpValueList.Count - 1].Value) : 0;
                        foreach (Reorganized_ExplicitValues item in VariableList)
                        {
                            double NewValue = Convert.ToDouble(item.Value) + (Convert.ToDouble(item.Value) * PercentChange / 100);
                            //item.Value = NewValue.ToString("0.");
                            tmpReorganized_ExplicitValues = item;
                            tmpReorganized_ExplicitValues.Value = NewValue.ToString("0.");
                            Depriciation_ExpValueList.Add(tmpReorganized_ExplicitValues);
                        }
                        foreach (ROIC_ExplicitValues item in FCFExpValueList)
                        {
                            tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                            double removeValue1 = VariableList != null && VariableList.Count > 0 && VariableList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(VariableList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(VariableList.Find(x => x.Year == item.Year).Value) : 0;
                            double removeValue2 = ConstantList != null && ConstantList.Count > 0 && ConstantList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(ConstantList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(ConstantList.Find(x => x.Year == item.Year).Value) : 0;
                            double AddValue1 = NOPLAT_ExpValueList != null && NOPLAT_ExpValueList.Count > 0 && NOPLAT_ExpValueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(NOPLAT_ExpValueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(NOPLAT_ExpValueList.Find(x => x.Year == item.Year).Value) : 0;
                            double AddValue2 = Depriciation_ExpValueList != null && Depriciation_ExpValueList.Count > 0 && Depriciation_ExpValueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(Depriciation_ExpValueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(Depriciation_ExpValueList.Find(x => x.Year == item.Year).Value) : 0;
                            double NewValue = Convert.ToDouble(item.Value) - removeValue1 - removeValue2 + AddValue1 + AddValue2;
                            tmpROIC_ExplicitValues = item;
                            tmpROIC_ExplicitValues.Value = NewValue.ToString("0.");
                            NewFCFExpValueList.Add(tmpROIC_ExplicitValues);
                        }
                        int power = 1;
                        foreach (ROIC_ExplicitValues item in NewFCFExpValueList)
                        {
                            double value = 0;
                            value = Convert.ToDouble(item.Value) / Math.Pow((1 + (Discountrate / 100)), power);
                            DCFvalueTotal = DCFvalueTotal + value;
                            power = power + 1;
                        }

                        Baseterminalvalue = (NOPLATTerminal * (1 - (RONIC != 0 ? GDTP / RONIC : 0))) / ((Discountrate / 100) - (GDTP / 100));
                        PVterminalvalue = Baseterminalvalue / Math.Pow((1 + (Discountrate / 100)), (Convert.ToUInt64(ExpTo) - Convert.ToUInt64(ExpFrom) + 1));
                        TotValueofOperation = DCFvalueTotal + PVterminalvalue;
                        stockPrice = share != 0 ? (Equityvalue - valueOfOP + TotValueofOperation) / share : 0;
                    }
                    valueList.Add(stockPrice.ToString("0.##"));
                }





                return valueList;
            }
            catch (Exception ex)
            {
                return valueList;
            }
        }
        private List<string> GetValueList(List<string> keyList, InitialSetup_IValuation InitialSetup_IValuationObj, List<ROIC_ExplicitValues> ConstantList, List<Reorganized_ExplicitValues> VariableList, List<Reorganized_ExplicitValues> DepriciationExpList, List<ROIC_ExplicitValues> FCFExpValueList, double Discountrate, double GDTP, double RONIC, int? ExpFrom, int? ExpTo, List<ValuationDatas> AllValuationList)
        {
            List<string> valueList = new List<string>();
            double Baseterminalvalue = 0;
            double PVterminalvalue = 0;
            double TotValueofOperation = 0;
            double stockPrice = 0;
            double DCFvalueTotal = 0;
            double NOPLATTerminal = 0;
            double valueOfOP = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Operations") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Operations").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Operations").DtValue) : 0;
            double Equityvalue = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Equity Value") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Equity Value").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Equity Value").DtValue) : 0;
            double share = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) : 0;

            try
            {
                string midKey = keyList[(keyList.Count - 1) / 2];
                foreach (string key in keyList)
                {
                    List<ROIC_ExplicitValues> NOPLAT_ExpValueList = new List<ROIC_ExplicitValues>();
                    //List<Reorganized_ExplicitValues> Depriciation_ExpValueList = new List<Reorganized_ExplicitValues>();
                    List<ROIC_ExplicitValues> NewFCFExpValueList = new List<ROIC_ExplicitValues>();
                    ROIC_ExplicitValues tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                    Reorganized_ExplicitValues tmpReorganized_ExplicitValues = new Reorganized_ExplicitValues();
                    List<ROIC_ExplicitValues> NewDCFExpValueList = new List<ROIC_ExplicitValues>();

                    PVterminalvalue = 0;
                    Baseterminalvalue = 0;
                    TotValueofOperation = 0;
                    stockPrice = 0;
                    DCFvalueTotal = 0;
                    NOPLATTerminal = 0;
                    double Change = Convert.ToDouble(key) - Convert.ToDouble(midKey);

                    double PercentChange = !string.IsNullOrEmpty(midKey) && midKey != "0" ? (Change * 100) / Convert.ToDouble(midKey) : 0;
                    if (Change == 0)//Find Actual Stock price
                    {
                        stockPrice = InitialSetup_IValuationObj != null && iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)") != null && !string.IsNullOrEmpty(iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)").DtValue) ? Convert.ToDouble(iValuationDatas.GetSingle(x => x.InitialSetupId == InitialSetup_IValuationObj.Id && x.LineItem == "Stock Price ($)").DtValue) : 0;
                    }
                    else //Calculate Stock price
                    {

                        foreach (ROIC_ExplicitValues item in ConstantList)
                        {
                            tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                            double removeValue = VariableList != null && VariableList.Count > 0 && VariableList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(VariableList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(VariableList.Find(x => x.Year == item.Year).Value) : 0;
                            double AddValue = removeValue + (removeValue * PercentChange / 100);
                            double NewValue = Convert.ToDouble(item.Value) - removeValue + AddValue;
                            //item.Value = NewValue.ToString("0.");
                            tmpROIC_ExplicitValues = item;
                            tmpROIC_ExplicitValues.Value = NewValue.ToString("0.");
                            NOPLAT_ExpValueList.Add(tmpROIC_ExplicitValues);
                        }

                        NOPLATTerminal = NOPLAT_ExpValueList != null && NOPLAT_ExpValueList.Count > 0 && !string.IsNullOrEmpty(NOPLAT_ExpValueList[NOPLAT_ExpValueList.Count - 1].Value) ? Convert.ToDouble(NOPLAT_ExpValueList[NOPLAT_ExpValueList.Count - 1].Value) : 0;
                        foreach (ROIC_ExplicitValues item in FCFExpValueList)
                        {
                            tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                            double removeValue = ConstantList != null && ConstantList.Count > 0 && ConstantList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(ConstantList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(ConstantList.Find(x => x.Year == item.Year).Value) : 0;
                            double AddValue = NOPLAT_ExpValueList != null && NOPLAT_ExpValueList.Count > 0 && NOPLAT_ExpValueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(NOPLAT_ExpValueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(NOPLAT_ExpValueList.Find(x => x.Year == item.Year).Value) : 0;
                            double NewValue = Convert.ToDouble(item.Value) - removeValue + AddValue;
                            tmpROIC_ExplicitValues = item;
                            tmpROIC_ExplicitValues.Value = NewValue.ToString("0.");
                            NewFCFExpValueList.Add(tmpROIC_ExplicitValues);
                        }
                        int power = 1;
                        foreach (ROIC_ExplicitValues item in NewFCFExpValueList)
                        {
                            double value = 0;
                            value = Convert.ToDouble(item.Value) / Math.Pow((1 + (Discountrate / 100)), power);
                            DCFvalueTotal = DCFvalueTotal + value;
                            power = power + 1;
                        }
                        Baseterminalvalue = (NOPLATTerminal * (1 - (RONIC != 0 ? GDTP / RONIC : 0))) / ((Discountrate / 100) - (GDTP / 100));
                        PVterminalvalue = Baseterminalvalue / Math.Pow((1 + (Discountrate / 100)), (Convert.ToUInt64(ExpTo) - Convert.ToUInt64(ExpFrom) + 1));
                        TotValueofOperation = DCFvalueTotal + PVterminalvalue;

                        stockPrice = share != 0 ? (Equityvalue - valueOfOP + TotValueofOperation) / share : 0;
                    }
                    valueList.Add(stockPrice.ToString("0.##"));
                }





                return valueList;
            }
            catch (Exception ex)
            {
                return valueList;
            }
        }

        #endregion

        #region Scenario Analysis


        [HttpGet]
        [Route("GetScenario/{UserId}")]
        public ActionResult GetScenario(long UserId)
        {
            IVScenarioResult renderResult = new IVScenarioResult();
            List<IVScenarioViewModel> IVScenarioViewModelList = new List<IVScenarioViewModel>();
            IVScenarioViewModel IVScenarioViewModelObj = new IVScenarioViewModel();
            try
            {
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                long? InitialsetupId = null;
                if (InitialSetup_IValuationObj != null)
                {
                    InitialsetupId = InitialSetup_IValuationObj.Id;
                }
                List<IVScenario> tblIVScenarioListObj = InitialSetup_IValuationObj != null ? iIVScenario.FindBy(x => x.InitialSetupId == InitialsetupId).ToList() : null;
                if (tblIVScenarioListObj != null && tblIVScenarioListObj.Count > 0)
                {
                    //Bind the Saved Sensitivity DATA 
                    foreach (IVScenario item in tblIVScenarioListObj)
                    {
                        IVScenarioViewModelObj = new IVScenarioViewModel();
                        IVScenarioViewModelObj.Id = item.Id;
                        IVScenarioViewModelObj.InitialSetupId = item.InitialSetupId;
                        IVScenarioViewModelObj.Scenario = item.Scenario;
                        IVScenarioViewModelObj.Probability = item.Probability;
                        IVScenarioViewModelObj.WACC = item.WACC;
                        IVScenarioViewModelObj.TGR = item.TGR;
                        IVScenarioViewModelObj.NetPPE = item.NetPPE;
                        IVScenarioViewModelObj.StockPrice = item.StockPrice;
                        IVScenarioViewModelList.Add(IVScenarioViewModelObj);
                    }
                }
                renderResult.StatusCode = 1;
                renderResult.Result = IVScenarioViewModelList;
                return (ActionResult)this.Ok(new
                {
                    renderResult,
                    InitialSetup_IValuationObj = InitialSetup_IValuationObj
                });
            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }

        [HttpPost]
        [Route("SaveScenario/{UserId}")]
        public ActionResult SaveScenario([FromBody] List<IVScenarioViewModel> IVScenarioViewModelList, long UserId)
        {
            try
            {
                List<ROIC_ExplicitValues> NewFCFExpValueList = new List<ROIC_ExplicitValues>();
                List<Reorganized_ExplicitValues> NewDepriciation_ExpValueList = new List<Reorganized_ExplicitValues>();
                List<ROIC_ExplicitValues> NewNoplatExpValueList = new List<ROIC_ExplicitValues>();
                ROIC_ExplicitValues tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                Reorganized_ExplicitValues tmpReorganized_ExplicitValues = new Reorganized_ExplicitValues();
                InitialSetup_IValuation InitialSetup_IValuationObj = iInitialSetup_IValuation.FindBy(x => x.UserId == UserId && x.IsActive == true).OrderByDescending(x => x.Id).First();
                long? InitialsetupId = null;
                int? ExpTo = 0;
                int? ExpFrom = 0;
                if (InitialSetup_IValuationObj != null)
                {
                    ExpTo = InitialSetup_IValuationObj.YearTo + InitialSetup_IValuationObj.ExplicitYearCount;
                    ExpFrom = InitialSetup_IValuationObj.YearTo + 1;
                    InitialsetupId = InitialSetup_IValuationObj.Id;
                }
                var PPEForcastData = iForcastRatioDatas.GetSingle(x => x.InitialSetupId == InitialsetupId && x.StatementTypeId == (int)StatementTypeEnum.BalanceSheet && (x.LineItem.ToLower().Contains(("net property, plant & equipment").ToLower()) || x.LineItem.ToLower().Contains(("property, plant & equipment, net").ToLower()) || x.LineItem.ToLower().Contains(("pp&e, property and equipment").ToLower()) || x.LineItem.ToLower().Contains(("Net property (Note 14)").ToLower()) || x.LineItem.ToLower().Contains(("equipment").ToLower())));
                var PPEForcastExpvalueList = PPEForcastData != null ? iForcastRatio_ExplicitValues.FindBy(m => m.ForcastRatioDatasId == PPEForcastData.Id).ToList() : null;

                var AllROICList = iROICDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList();
                double NOPLATTerminal = 0;
                var NOPLATData = AllROICList != null && AllROICList.Count > 0 ? AllROICList.Find(x => x.LineItem == "NOPLAT") : null;
                var NOPLATExpValueList = NOPLATData != null ? iROIC_ExplicitValues.FindBy(x => x.ROICDatasId == NOPLATData.Id).ToList() : null;

                List<ReorganizedDatas> ReorganizedDataListTillEBITA = new List<ReorganizedDatas>();
                var ReorganizedNOPLATList = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialsetupId && x.StatementTypeId == (int)StatementTypeEnum.NoplatCalculations).ToList();
                if (ReorganizedNOPLATList != null && ReorganizedNOPLATList.Count > 0)
                {
                    foreach (ReorganizedDatas item in ReorganizedNOPLATList)
                    {
                        if (item.LineItem.ToUpper() == "EBITA")
                        {
                            break;
                        }
                        ReorganizedDataListTillEBITA.Add(item);
                    }
                }
                var ReorganizedExpvalueListTillEBITA = ReorganizedDataListTillEBITA != null && ReorganizedDataListTillEBITA.Count > 0 ? iReorganized_ExplicitValues.FindBy(t => ReorganizedDataListTillEBITA.Any(m => m.Id == t.ReorganizedDatasId)).ToList() : null;
                var DepriciationReorganizedData = ReorganizedDataListTillEBITA != null && ReorganizedDataListTillEBITA.Count > 0 ? ReorganizedDataListTillEBITA.Find(x => x.LineItem.ToLower().Contains(("Depreciation").ToLower())) : null;
                var DepriciationReorganizedExpvalueList = DepriciationReorganizedData != null && ReorganizedExpvalueListTillEBITA != null && ReorganizedExpvalueListTillEBITA.Count > 0 ? ReorganizedExpvalueListTillEBITA.FindAll(x => x.ReorganizedDatasId == DepriciationReorganizedData.Id) : null;

                var FCFData = AllROICList != null && AllROICList.Count > 0 ? AllROICList.Find(x => x.LineItem == "Free Cash Flow (FCF)") : null;
                var FCFExpValueList = FCFData != null ? iROIC_ExplicitValues.FindBy(x => x.ROICDatasId == FCFData.Id).ToList() : null;
                //Remove terminal 
                if (FCFExpValueList != null && FCFExpValueList.Count > 0)
                {
                    FCFExpValueList.RemoveAt(FCFExpValueList.Count - 1);
                }
                /////

                double AvgPPE = 0;
                double sumPPE = 0;
                if (PPEForcastExpvalueList != null && PPEForcastExpvalueList.Count > 0)
                {
                    foreach (ForcastRatio_ExplicitValues FEV in PPEForcastExpvalueList)
                    {
                        sumPPE = sumPPE + Convert.ToDouble(FEV.Value);
                    }
                    AvgPPE = sumPPE / (PPEForcastExpvalueList.Count);
                }

                var DCF1List = AllROICList != null && AllROICList.Count > 0 ? AllROICList.FindAll(x => x.StatementTypeId == (int)StatementTypeEnum.DCF1).ToList() : null;
                double RONIC = DCF1List != null && DCF1List.Count > 0 && DCF1List.Find(x => x.Sequence == 3) != null && !string.IsNullOrEmpty(DCF1List.Find(x => x.Sequence == 3).DtValue) ? Convert.ToDouble(DCF1List.Find(x => x.Sequence == 3).DtValue) : 0;

                var AllValuationList = iValuationDatas.FindBy(x => x.InitialSetupId == InitialsetupId).ToList();
                double valueOfOP = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Value of Operations") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Value of Operations").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Value of Operations").DtValue) : 0;
                double Equityvalue = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Equity Value") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Equity Value").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Equity Value").DtValue) : 0;
                double share = AllValuationList != null && AllValuationList.Count > 0 && AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)") != null && !string.IsNullOrEmpty(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) ? Convert.ToDouble(AllValuationList.Find(x => x.LineItem == "Number of Shares Outstanding (M)").DtValue) : 0;

                if (IVScenarioViewModelList != null && IVScenarioViewModelList.Count > 0)
                {
                    double Baseterminalvalue = 0;
                    double PVterminalvalue = 0;
                    double TotValueofOperation = 0;
                    double stockPrice = 0;
                    double ChangePPE = 0;
                    double PercentChange = 0;
                    double DCFvalueTotal = 0;
                    IVScenario tblIVScenarioObj = new IVScenario();
                    foreach (IVScenarioViewModel IVScenarioVmObj in IVScenarioViewModelList)
                    {
                        tblIVScenarioObj = new IVScenario();
                        Baseterminalvalue = 0;
                        PVterminalvalue = 0;
                        TotValueofOperation = 0;
                        stockPrice = 0;
                        DCFvalueTotal = 0;
                        ChangePPE = Convert.ToDouble(IVScenarioVmObj.NetPPE) - AvgPPE;
                        PercentChange = AvgPPE != 0 ? (ChangePPE * 100) / AvgPPE : 0;
                        NewNoplatExpValueList = new List<ROIC_ExplicitValues>();
                        NewDepriciation_ExpValueList = new List<Reorganized_ExplicitValues>();
                        NewFCFExpValueList = new List<ROIC_ExplicitValues>();

                        if (NOPLATExpValueList != null && NOPLATExpValueList.Count > 0)
                        {
                            foreach (ROIC_ExplicitValues item in NOPLATExpValueList)
                            {
                                tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                                double removeValue = DepriciationReorganizedExpvalueList != null && DepriciationReorganizedExpvalueList.Count > 0 && DepriciationReorganizedExpvalueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(DepriciationReorganizedExpvalueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(DepriciationReorganizedExpvalueList.Find(x => x.Year == item.Year).Value) : 0;
                                double AddValue = removeValue + (removeValue * PercentChange / 100);
                                double NewValue = Convert.ToDouble(item.Value) - removeValue + AddValue;
                                //item.Value = NewValue.ToString("0.");
                                tmpROIC_ExplicitValues = item;
                                tmpROIC_ExplicitValues.Value = NewValue.ToString("0.");
                                NewNoplatExpValueList.Add(tmpROIC_ExplicitValues);
                            }
                        }
                        NOPLATTerminal = NewNoplatExpValueList != null && NewNoplatExpValueList.Count > 0 && !string.IsNullOrEmpty(NewNoplatExpValueList[NewNoplatExpValueList.Count - 1].Value) ? Convert.ToDouble(NewNoplatExpValueList[NewNoplatExpValueList.Count - 1].Value) : 0;
                        if (DepriciationReorganizedExpvalueList != null && DepriciationReorganizedExpvalueList.Count > 0)
                        {
                            foreach (Reorganized_ExplicitValues item in DepriciationReorganizedExpvalueList)
                            {
                                tmpReorganized_ExplicitValues = new Reorganized_ExplicitValues();
                                double NewValue = Convert.ToDouble(item.Value) + (Convert.ToDouble(item.Value) * PercentChange / 100);
                                //item.Value = NewValue.ToString("0.");
                                tmpReorganized_ExplicitValues = item;
                                tmpReorganized_ExplicitValues.Value = NewValue.ToString("0.");
                                NewDepriciation_ExpValueList.Add(tmpReorganized_ExplicitValues);
                            }
                        }
                        if (FCFExpValueList != null && FCFExpValueList.Count > 0)
                        {
                            foreach (ROIC_ExplicitValues item in FCFExpValueList)
                            {
                                tmpROIC_ExplicitValues = new ROIC_ExplicitValues();
                                double removeValue1 = DepriciationReorganizedExpvalueList != null && DepriciationReorganizedExpvalueList.Count > 0 && DepriciationReorganizedExpvalueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(DepriciationReorganizedExpvalueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(DepriciationReorganizedExpvalueList.Find(x => x.Year == item.Year).Value) : 0;
                                double removeValue2 = NOPLATExpValueList != null && NOPLATExpValueList.Count > 0 && NOPLATExpValueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(NOPLATExpValueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(NOPLATExpValueList.Find(x => x.Year == item.Year).Value) : 0;
                                double AddValue1 = NewNoplatExpValueList != null && NewNoplatExpValueList.Count > 0 && NewNoplatExpValueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(NewNoplatExpValueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(NewNoplatExpValueList.Find(x => x.Year == item.Year).Value) : 0;
                                double AddValue2 = NewDepriciation_ExpValueList != null && NewDepriciation_ExpValueList.Count > 0 && NewDepriciation_ExpValueList.Find(x => x.Year == item.Year) != null && !string.IsNullOrEmpty(NewDepriciation_ExpValueList.Find(x => x.Year == item.Year).Value) ? Convert.ToDouble(NewDepriciation_ExpValueList.Find(x => x.Year == item.Year).Value) : 0;
                                double NewValue = Convert.ToDouble(item.Value) - removeValue1 - removeValue2 + AddValue1 + AddValue2;
                                tmpROIC_ExplicitValues = item;
                                tmpROIC_ExplicitValues.Value = NewValue.ToString("0.");
                                NewFCFExpValueList.Add(tmpROIC_ExplicitValues);
                            }
                        }
                        int power = 1;
                        if (NewFCFExpValueList != null && NewFCFExpValueList.Count > 0)
                        {
                            foreach (ROIC_ExplicitValues item in NewFCFExpValueList)
                            {
                                double value = 0;
                                value = Convert.ToDouble(item.Value) / Math.Pow((1 + (Convert.ToDouble(IVScenarioVmObj.WACC) / 100)), power);
                                DCFvalueTotal = DCFvalueTotal + value;
                                power = power + 1;
                            }
                        }
                        Baseterminalvalue = (NOPLATTerminal * (1 - (RONIC != 0 ? Convert.ToDouble(IVScenarioVmObj.TGR) / RONIC : 0))) / ((Convert.ToDouble(IVScenarioVmObj.WACC) / 100) - (Convert.ToDouble(IVScenarioVmObj.TGR) / 100));
                        PVterminalvalue = Baseterminalvalue / Math.Pow((1 + (Convert.ToDouble(IVScenarioVmObj.WACC) / 100)), (Convert.ToUInt64(ExpTo) - Convert.ToUInt64(ExpFrom) + 1));
                        TotValueofOperation = DCFvalueTotal + PVterminalvalue;

                        stockPrice = share != 0 ? (Equityvalue - valueOfOP + TotValueofOperation) / share : 0;
                        IVScenarioVmObj.StockPrice = stockPrice.ToString("0.##");
                        tblIVScenarioObj = mapper.Map<IVScenarioViewModel, IVScenario>(IVScenarioVmObj);
                        if (tblIVScenarioObj.Id == 0)
                        {
                            iIVScenario.Add(tblIVScenarioObj);
                        }
                        else
                        {
                            iIVScenario.Update(tblIVScenarioObj);
                        }
                        iIVScenario.Commit();
                    }
                    //////////////Get Scenario data//////////////
                    //IVScenarioResult renderResult = new IVScenarioResult();
                    ActionResult ScenarioResult = GetScenario(UserId);
                    /////////////////////////////////////////////
                    return Ok(new { message = "Data Saved Successfully", status = 200, result = ScenarioResult });
                }
                else
                {
                    return BadRequest(new { message = "No data found to save", status = 200, result = false });

                }
            }
            catch (Exception ex)
            {
                return BadRequest(Convert.ToString(ex.Message));
            }
        }
        #endregion

        #region  InitialSetup_IValuation 

        [HttpGet]
        [Route("DeleteDataByInitialSetupId/{InitialSetupId}")]
        public ActionResult DeleteDataByInitialSetupId(long InitialSetupId)
        {
            try
            {
                //delete from ROIC
                List<ROICDatas> ROICDatasList = new List<ROICDatas>();
                ROICDatasList = iROICDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (ROICDatasList != null && ROICDatasList.Count > 0)
                {
                    List<ROICValues> ROICValuesList = iROICValues.FindBy(t => ROICDatasList.Any(m => m.Id == t.ROICDatasId)).ToList();
                    if (ROICValuesList != null && ROICValuesList.Count > 0)
                    {
                        iROICValues.DeleteMany(ROICValuesList);
                        iROICValues.Commit();
                    }
                    List<ROIC_ExplicitValues> ROIC_ExplicitValuesList = iROIC_ExplicitValues.FindBy(t => ROICDatasList.Any(m => m.Id == t.ROICDatasId)).ToList();
                    if (ROIC_ExplicitValuesList != null && ROIC_ExplicitValuesList.Count > 0)
                    {
                        iROIC_ExplicitValues.DeleteMany(ROIC_ExplicitValuesList);
                        iROIC_ExplicitValues.Commit();
                    }
                    iROICDatas.DeleteMany(ROICDatasList);
                    iROICDatas.Commit();
                }

                //delete data from Reorganized
                List<ReorganizedDatas> ReorganizedDatasList = new List<ReorganizedDatas>();
                ReorganizedDatasList = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (ReorganizedDatasList != null && ReorganizedDatasList.Count > 0)
                {
                    List<ReorganizedValues> ReorganizedValues = iReorganizedValues.FindBy(t => ReorganizedDatasList.Any(m => m.Id == t.ReorganizedDatasId)).ToList();
                    if (ReorganizedValues != null && ReorganizedValues.Count > 0)
                    {
                        iReorganizedValues.DeleteMany(ReorganizedValues);
                        iReorganizedValues.Commit();
                    }
                    List<Reorganized_ExplicitValues> Reorganized_ExplicitValuesList = iReorganized_ExplicitValues.FindBy(t => ReorganizedDatasList.Any(m => m.Id == t.ReorganizedDatasId)).ToList();
                    if (Reorganized_ExplicitValuesList != null && Reorganized_ExplicitValuesList.Count > 0)
                    {
                        iReorganized_ExplicitValues.DeleteMany(Reorganized_ExplicitValuesList);
                        iReorganized_ExplicitValues.Commit();
                    }
                    iReorganizedDatas.DeleteMany(ReorganizedDatasList);
                    iReorganizedDatas.Commit();
                }

                //////ForcastRatio Data and value And ExplicitValues
                List<ForcastRatioDatas> ForcastRatioDatasList = new List<ForcastRatioDatas>();
                ForcastRatioDatasList = iForcastRatioDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (ForcastRatioDatasList != null && ForcastRatioDatasList.Count > 0)
                {
                    List<ForcastRatioValues> ForcastRatioValuesList = iForcastRatioValues.FindBy(t => ForcastRatioDatasList.Any(m => m.Id == t.ForcastRatioDatasId)).ToList();
                    if (ForcastRatioValuesList != null && ForcastRatioValuesList.Count > 0)
                    {
                        iForcastRatioValues.DeleteMany(ForcastRatioValuesList);
                        iForcastRatioValues.Commit();
                    }
                    List<ForcastRatio_ExplicitValues> ForcastRatio_ExplicitValuesList = iForcastRatio_ExplicitValues.FindBy(t => ForcastRatioDatasList.Any(m => m.Id == t.ForcastRatioDatasId)).ToList();
                    if (ForcastRatio_ExplicitValuesList != null && ForcastRatio_ExplicitValuesList.Count > 0)
                    {
                        iForcastRatio_ExplicitValues.DeleteMany(ForcastRatio_ExplicitValuesList);
                        iForcastRatio_ExplicitValues.Commit();
                    }
                    iForcastRatioDatas.DeleteMany(ForcastRatioDatasList);
                    iForcastRatioDatas.Commit();
                }

                //////Integrated Data and value
                List<IntegratedDatas> IntegratedDatasList = new List<IntegratedDatas>();
                IntegratedDatasList = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (IntegratedDatasList != null && IntegratedDatasList.Count > 0)
                {
                    //List<IntegratedValues> IntegratedValuesList = new List<IntegratedValues>();
                    List<IntegratedValues> AllIntegratedValuesList = iIntegratedValues.FindBy(t => IntegratedDatasList.Any(m => m.Id == t.IntegratedDatasId)).ToList();
                    if (AllIntegratedValuesList != null && AllIntegratedValuesList.Count > 0)
                    {
                        iIntegratedValues.DeleteMany(AllIntegratedValuesList);
                        iIntegratedValues.Commit();
                    }
                    List<Integrated_ExplicitValues> Integrated_ExplicitValuesList = iIntegrated_ExplicitValues.FindBy(t => IntegratedDatasList.Any(m => m.Id == t.IntegratedDatasId)).ToList();
                    if (Integrated_ExplicitValuesList != null && Integrated_ExplicitValuesList.Count > 0)
                    {
                        iIntegrated_ExplicitValues.DeleteMany(Integrated_ExplicitValuesList);
                        iIntegrated_ExplicitValues.Commit();
                    }
                    iIntegratedDatas.DeleteMany(IntegratedDatasList);
                    iIntegratedDatas.Commit();
                }

                // delete data  from MixedSubdatas
                List<MixedSubDatas> MixedDatasList = iMixedSubDatas.FindBy(t => /*DatasList.Any(m => m.Id == t.DatasId) &&*/ t.InitialSetupId == InitialSetupId).ToList();
                if (MixedDatasList != null && MixedDatasList.Count > 0)
                {
                    List<MixedSubValues> MixedValuesList = iMixedSubValues.FindBy(t => MixedDatasList.Any(m => m.Id == t.MixedSubDatasId)).ToList();
                    if (MixedValuesList != null && MixedValuesList.Count > 0)
                    {
                        iMixedSubValues.DeleteMany(MixedValuesList);
                        iMixedSubValues.Commit();
                    }
                    iMixedSubDatas.DeleteMany(MixedDatasList);
                    iMixedSubDatas.Commit();
                }

                // delete from category table
                List<CategoryByInitialSetup> CategoryList = new List<CategoryByInitialSetup>();
                CategoryList = iCategoryByInitialSetup.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (CategoryList != null && CategoryList.Count > 0)
                {
                    iCategoryByInitialSetup.DeleteMany(CategoryList);
                    iCategoryByInitialSetup.Commit();
                }

                //delete from payout policy
                List<PayoutPolicy_IValuation> payoutList = new List<PayoutPolicy_IValuation>();
                payoutList = iPayoutPolicy_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (payoutList != null && payoutList.Count > 0)
                {
                    iPayoutPolicy_IValuation.DeleteMany(payoutList);
                    iPayoutPolicy_IValuation.Commit();
                }


                //delete from Cost of sales
                List<CostOfCapital_IValuation> CostofSalesList = new List<CostOfCapital_IValuation>();
                CostofSalesList = iCostOfCapital_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (CostofSalesList != null && CostofSalesList.Count > 0)
                {
                    iCostOfCapital_IValuation.DeleteMany(CostofSalesList);
                    iCostOfCapital_IValuation.Commit();
                }

                // delete from Tax
                List<TaxRates_IValuation> TaxratesList = new List<TaxRates_IValuation>();
                TaxratesList = iTaxRates_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (TaxratesList != null && TaxratesList.Count > 0)
                {
                    iTaxRates_IValuation.DeleteMany(TaxratesList);
                    iTaxRates_IValuation.Commit();
                }

                // delete from Tax
                List<ValuationDatas> valuationsumList = new List<ValuationDatas>();
                valuationsumList = iValuationDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (valuationsumList != null && valuationsumList.Count > 0)
                {
                    iValuationDatas.DeleteMany(valuationsumList);
                    iValuationDatas.Commit();
                }

                //  delete from sensitivity 
                List<IVSensitivity> SensitivityList = new List<IVSensitivity>();
                SensitivityList = iIVSensitivity.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (SensitivityList != null && SensitivityList.Count > 0)
                {
                    iIVSensitivity.DeleteMany(SensitivityList);
                    iIVSensitivity.Commit();
                }

                //  delete from scenario
                List<IVScenario> ScenarioList = new List<IVScenario>();
                ScenarioList = iIVScenario.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (ScenarioList != null && ScenarioList.Count > 0)
                {
                    iIVScenario.DeleteMany(ScenarioList);
                    iIVScenario.Commit();
                }

                //delete from interest
                List<Interest_IValuation> InterestList = new List<Interest_IValuation>();
                InterestList = iInterest_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (InterestList != null && InterestList.Count > 0)
                {
                    iInterest_IValuation.DeleteMany(InterestList);
                    iInterest_IValuation.Commit();
                }

                //update filings table
                List<FilingsTable> FilingsList = new List<FilingsTable>();
                FilingsList = iFilings.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                if (FilingsList != null && FilingsList.Count > 0)
                {
                    foreach (var filing in FilingsList)
                    {
                        filing.InitialSetupId = null;
                    }
                    iFilings.UpdatedMany(FilingsList);
                    iFilings.Commit();
                }

                //delete from in initialsetup
                try
                {

                    iInitialSetup_IValuation.DeleteWhere(x => x.Id == InitialSetupId);
                    iInitialSetup_IValuation.Commit();
                }catch(Exception ss)
                {
                    return BadRequest(new { message = "You can not delete this Project,it is used in FSA", result = false, statusCode = 2 });
                }


                /////////////////////////////////////////
                return Ok(new { message = "Deleted", result = true, statusCode = 200 });
            }
            catch (Exception ss)
            {
                return BadRequest(new { message = "Error", result = false, statusCode = 2 });
            }
        }


      
        [HttpGet]
        [Route("GetFlagForInternalValuation/{InitialSetupId}/{cik}")]
        public List<InternalValuationFlags> GetFlagForInternalValuation(long InitialSetupId,string cik)
        {
            List<InternalValuationFlags> FlagList = new List<InternalValuationFlags>();
            InternalValuationFlags flag= new InternalValuationFlags();
            try
            {

                Array values = Enum.GetValues(typeof(IValuationFlagEnum));
                for (int i = 1; i <= values.Length; i++)
                {
                    FlagList.Add(new InternalValuationFlags
                    {
                        FlagName = EnumHelper.DescriptionAttr((IValuationFlagEnum)i),
                        Id = i,
                        FlagValue = false
                    });
                    //flag = new InternalValuationFlags();
                    //flag.FlagName = EnumHelper.DescriptionAttr((IValuationFlagEnum)i);
                    //flag.Id = i;
                    //flag.FlagValue = false;
                    //FlagList.Add(flag);
                }
                FlagList = FlagList.OrderBy(x => x.Id).ToList();

                //Check for filings table
                List<FilingsTable> FilingsList = new List<FilingsTable>();
                FilingsList = iFilings.FindBy(x => x.CIK == cik).ToList();
                if (FilingsList != null && FilingsList.Count > 0)
                {
                  
                    //FlagList.RemoveAt(0);
                  

                    //for Raw Historical Data
                    var Rawitem = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.RawHistorical);
                    Rawitem.FlagValue = true;

                    //  check for sensitivity 
                    List<IVSensitivity> SensitivityList = new List<IVSensitivity>();
                    SensitivityList = iIVSensitivity.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (SensitivityList != null && SensitivityList.Count > 0)
                    {
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.Sensitivity);
                        item.FlagValue = true;
                    }

                    //  check for scenario
                    //List<IVScenario> ScenarioList = new List<IVScenario>();
                    //ScenarioList = iIVScenario.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    //if (ScenarioList != null && ScenarioList.Count > 0)
                    //{
                        
                    //}

                    //check Valuation Summary 
                    List<ValuationDatas> valuationsumList = new List<ValuationDatas>();
                    valuationsumList = iValuationDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (valuationsumList != null && valuationsumList.Count != 0)
                    {
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.ValuationSummary);
                        item.FlagValue = true;
                    }                                    

                    //Check for ROIC
                    List<ROICDatas> ROICDatasList = new List<ROICDatas>();
                    ROICDatasList = iROICDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (ROICDatasList != null && ROICDatasList.Count > 0)
                    {
                        //ROIC
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.ROIC);
                        item.FlagValue = true;

                        // Non Operating Assets
                        var NonOpitem = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.NonOperatingAssets);
                        NonOpitem.FlagValue = true;
                    }

                    //Check for Reorganized
                    List<ReorganizedDatas> ReorganizedDatasList = new List<ReorganizedDatas>();
                    ReorganizedDatasList = iReorganizedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (ReorganizedDatasList != null && ReorganizedDatasList.Count > 0)
                    {
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.ReorganizedStatement);
                        item.FlagValue = true;
                    }

                    //Check for ForcastRatio Data
                    List<ForcastRatioDatas> ForcastRatioDatasList = new List<ForcastRatioDatas>();
                    ForcastRatioDatasList = iForcastRatioDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (ForcastRatioDatasList != null && ForcastRatioDatasList.Count > 0)
                    {
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.ForcastRatio);
                        item.FlagValue = true;
                    }

                    
                    //Check for payout policy
                    List<PayoutPolicy_IValuation> payoutList = new List<PayoutPolicy_IValuation>();
                    payoutList = iPayoutPolicy_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (payoutList != null && payoutList.Count > 0)
                    {
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.PayoutPolicy);
                        item.FlagValue = true;
                    }

                    // Check for Tax
                    List<TaxRates_IValuation> TaxratesList = new List<TaxRates_IValuation>();
                    TaxratesList = iTaxRates_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (TaxratesList != null && TaxratesList.Count > 0)
                    {
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.Tax);
                        item.FlagValue = true;
                    }

                    //Check for interest
                    List<Interest_IValuation> InterestList = new List<Interest_IValuation>();
                    InterestList = iInterest_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    if (InterestList != null && InterestList.Count > 0)
                    {
                        var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.Interest);
                        item.FlagValue = true;
                    }

                    //Check for Cost of sales
                    List<CostOfCapital_IValuation> CostofSalesList = new List<CostOfCapital_IValuation>();
                    CostofSalesList = iCostOfCapital_IValuation.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                    List<CategoryByInitialSetup> CategoryList = new List<CategoryByInitialSetup>();
                    if (CostofSalesList != null && CostofSalesList.Count > 0)
                    {
                        var COSitem = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.costofCapital);
                        COSitem.FlagValue = true;

                        //Check for Integrated 
                        List<IntegratedDatas> IntegratedDatasList = new List<IntegratedDatas>();
                        IntegratedDatasList = iIntegratedDatas.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                        if (IntegratedDatasList != null && IntegratedDatasList.Count > 0)
                        {
                            var item = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.IntegratedStatement);
                            item.FlagValue = true;

                            var DataProcitem = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.DataProcessing);
                            DataProcitem.FlagValue = true;
                        }
                        else
                        {
                            CategoryList = new List<CategoryByInitialSetup>();
                            CategoryList = iCategoryByInitialSetup.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                            if (CategoryList != null && CategoryList.Count > 0)
                            {
                                var DataProcitem = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.DataProcessing);
                                DataProcitem.FlagValue = true;
                            }
                        }

                    }else
                    {
                        CategoryList = new List<CategoryByInitialSetup>();
                        CategoryList = iCategoryByInitialSetup.FindBy(x => x.InitialSetupId == InitialSetupId).ToList();
                        if (CategoryList != null && CategoryList.Count > 0)
                        {
                            var DataProcitem = FlagList.Find(x => x.Id == (int)IValuationFlagEnum.DataProcessing);
                            DataProcitem.FlagValue = true;
                        }
                    }

                   

                }
            }
            catch (Exception ss)
            {
               
            }
            return FlagList;
        }


       
        #endregion
    }
}

